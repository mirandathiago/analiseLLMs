[
    {
        "id": 523,
        "title": "How to appropriately balance project activities with support tasks",
        "body": "<p>I have a small team of experts (12 staff) who do great project work. Unfortunately, their expertise makes them the go-to individuals on support tasks as well. The inability to focus on projects affects their productivity and sometimes has a negative impact on morale.</p>\n\n<p>Am I the only one who has this problem?</p>\n\n<p>For those who manage small teams without the luxury of dedicated project staff versus support staff, what strategies have you implemented to ensure high morale and productivity and manage staff who feel like they are being pulled in a hundred different directions?</p>\n",
        "score": 19,
        "creationdate": "2011-02-20T16:28:58.860000",
        "viewcount": 2351,
        "tags": "|process|roles|human-resources|maintenance|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in team productivity and morale, which could be *indirectly* related to technical debt, it does not explicitly or implicitly mention any indicators of technical debt.  The core issue is task management and prioritization, not the quality of the codebase or development practices. There is no mention of Agile methodologies or any elements of ASD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on balancing project activities with support tasks, which relates to time management and team morale. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 871,
        "title": "Is the PMP or other project management certification worth while to have?",
        "body": "<p>This is a classic question whose answer would likely help a lot of people on this site.</p>\n\n<p>Is it worth it to get the PMP? How about other project management certifications?</p>\n",
        "score": 10,
        "creationdate": "2011-03-06T14:57:33.040000",
        "viewcount": 7162,
        "tags": "|pmp|certification|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "Terrible",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is a general question about the value of PMP certification. It does not discuss Technical Debt, Agile Software Development, or provide any real-world examples of software development challenges.  Therefore, it fails to meet inclusion criteria 1, 2, and 3, and does not relate to the research topic.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about the value of project management certifications like PMP and does not relate to Technical Debt (TD) or Agile Software Development (ASD). It lacks any mention of TD indicators or ASD context, making it irrelevant to the research study."
    },
    {
        "id": 888,
        "title": "What to do with a messy project when it's close to be finished",
        "body": "<p>It happened to me in the past that for some reasons a project (software app) has become very messy, or we inherited it that way.</p>\n\n<p>With messy I mean that some basic best practices was not followed at some point, and as a result everybody was a little scared to touch anything because you don't know how it's going to affect the whole (say at this point the project misses 10% to be completed), this leaded to a even worse situation.\nWe realized this status too late, when the project was close to be finished and we hoped we needed very little maintenance.</p>\n\n<p>But I'm wondering what to do if the situation comes again, of course you should avoid the project to get to a point where you're afraid to touch it, but once it's there, is it acceptable to make an exception, limit the work do do on it and fix each problem the short way. When does it worth to refactor it anyway, going out of budget?</p>\n\n<p>thanks</p>\n",
        "score": 4,
        "creationdate": "2011-03-07T00:41:04.510000",
        "viewcount": 847,
        "tags": "|development-process|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario of a messy software project nearing completion.  It implicitly defines technical debt through 'messy' code, fear of touching it due to unknown consequences, and the resulting avoidance of necessary improvements. The description highlights the trade-off between fixing the debt and exceeding the budget. While it doesn't explicitly mention Agile, the context of a software project nearing completion suggests an iterative development process, aligning with Agile principles. The lack of explicit mention of Agile methodologies slightly lowers the relevance to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it describes a scenario where a project becomes 'messy' due to not following best practices, leading to fear of making changes. This implicitly indicates poor-quality code and maintenance challenges, which are TD indicators. The scenario is based on lived experience, meeting the inclusion criteria. However, the discussion lacks explicit mention of Agile Software Development (ASD) methodologies, which slightly reduces its relevance. Therefore, it is classified as 'Good' due to its relevance to TD but missing explicit ASD context."
    },
    {
        "id": 1264,
        "title": "What criteria should be considered when deciding to do work which goes beyond project scope?",
        "body": "<p>Answering my recently asked question whether to \"deliver results when finished significantly prior to the agreed deadline\", Smandoli <a href=\"https://pm.stackexchange.com/questions/1178/deliver-results-when-finished-significantly-prior-to-the-agreed-deadline/1255#1255\">suggested</a> to fill the slack with \"Look for places to exceed expectations, exceed the spec.\"</p>\n\n<p>I understand that deciding whether to do work which goes beyond defined project scope depends on a number of factors. Which ones do you consider to be particularly important to make a qualified decision?</p>\n",
        "score": 5,
        "creationdate": "2011-03-26T16:34:23.687000",
        "viewcount": 174,
        "tags": "|politics|customer-satisfaction|relationships|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon exceeding project scope, which *could* indirectly relate to technical debt (e.g., taking on extra work that might lead to rushed development and thus introduce debt), it does not explicitly or implicitly discuss technical debt itself.  There's no mention of code quality, testing, documentation, or other indicators of technical debt. The focus is purely on project management and scope creep, not on the technical aspects of software development within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about deciding whether to do work beyond the project scope, which does not relate to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators or ASD context, making it irrelevant to the study's criteria."
    },
    {
        "id": 1279,
        "title": "What role should a technical architect play in Project Management?",
        "body": "<p>I've recently been given the role of Technical Architect in my organization (I will also be project managing some projects and developing if the 10-12 senior developers are all too busy).  </p>\n\n<p>I'm wondering whether a technical architect should have a strong role at the start in defining the project architecture and the right developers for the project - but then takes a back-seat during the actual project.  Is that reasonable?</p>\n",
        "score": 22,
        "creationdate": "2011-03-27T12:48:52.303000",
        "viewcount": 17341,
        "tags": "|project-team|technical-leader|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion focuses on the role of a technical architect in project management within an organization, but it does not explicitly or implicitly mention technical debt or any of its indicators.  There is no mention of Agile methodologies or any lived experience related to software development challenges. The question is primarily about organizational roles and responsibilities, not about technical debt in an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the role of a technical architect in project management and does not address Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators or agile methodologies, making it irrelevant to the study criteria."
    },
    {
        "id": 1539,
        "title": "How to measure quality in a software development project?",
        "body": "<p><a href=\"http://en.wikipedia.org/wiki/Quality_%28business%29\">Quality</a> is one of the four key <a href=\"http://en.wikipedia.org/wiki/Project_management\">project constraints</a>, which need to be planned and controlled by a project manager during the entire project lifecycle. In order to plan and control it the PM, first of all, has to understand how to measure it.</p>\n\n<p>What are possible and most effective methods of measurement of quality in a software development project?</p>\n",
        "score": 21,
        "creationdate": "2011-04-06T10:33:18.243000",
        "viewcount": 51154,
        "tags": "|quality|quality-management|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions software development project quality, it's primarily focused on general project management and lacks any reference to Technical Debt or Agile methodologies.  It's an advice-seeking question without real-world examples, thus failing inclusion criteria 1, 2, and 3.  There is no mention of any TD indicators.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on measuring quality in software development projects, which is a broad topic and does not specifically address Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators or agile methodologies, making it irrelevant to the study's criteria."
    },
    {
        "id": 1725,
        "title": "Starting to learn Project Management, which book or path to follow ?",
        "body": "<p>As I started to search to learn more about project management on Google, I was overwhelmed by all the certification links.</p>\n\n<p>All I want to learn is about the various software (especially web development) related to project management and all about the models like <strong>scrum</strong> or <strong>Price2</strong> or <strong>agile</strong> development.</p>\n\n<p>What would be the best resource, like a free online resource, or better, a book, which would get me started learning about project management.</p>\n\n<p><em>Also please note that I may have asked the wrong question, because I'm very confused after searching on Google, and here I came as a last resort to clarify.</em> </p>\n",
        "score": 14,
        "creationdate": "2011-04-15T17:18:42.467000",
        "viewcount": 2113,
        "tags": "|agile|books|learning|",
        "answercount": 12,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the post mentions Agile and Scrum, it's primarily a request for learning resources on project management, not a discussion of existing Technical Debt within an Agile software development context.  There is no description of a real-world scenario, nor any indicators of technical debt. It lacks the lived experience and TD indicators required for inclusion.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about learning project management and seeking resources for understanding methodologies like Scrum and Agile. It does not address Technical Debt (TD) or provide any real-world scenario related to TD in Agile Software Development (ASD). The mention of 'agile' is in the context of learning about methodologies, not in relation to TD. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 2043,
        "title": "How to choose, motivate & develop a newbie programmer?",
        "body": "<p>Imagine that you need to hire new programmer, however you are 100% sure that there are not experienced (what you need) developers on the local market and you need to work with newbies. A couple of months ago we hired such developer with the clause that he will learn &amp; learn to satisfy the needs of the company however that did not happened and his progress is disappointing. Anyway he is leaving in two weeks and we will need a new one. It is important to mention that we have a policy for 6 months test period which I cannot change.</p>\n\n<p>My idea was to hire not 1 programmer for six months, but 2 programmers for 3 months and make it like a game -- set goals, make a competition,  set a final test and choose the better one the other one will leave (in the best scenario we will have 2 good programmers :) -- basically the issue is with the lack of quality programmers we can find on the local market and outsourcing is absolutely not an option, I suffered this before).</p>\n\n<p>Do you have any ideas how to motivate the future programmer to become the greatest one in the universes within 3-6 months? I need quick results in short time or the Director will say \"This one is not good enough, we need another one.\" and everything will start over (which is such a pain).</p>\n",
        "score": 16,
        "creationdate": "2011-05-04T13:15:48.273000",
        "viewcount": 1108,
        "tags": "|team-management|human-resources|team-building|motivation|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on hiring and motivating junior programmers, not on technical debt. While the implied lack of experienced developers might indirectly relate to potential future technical debt, the post doesn't describe an existing scenario of technical debt, nor does it mention any indicators of it.  The focus is entirely on recruitment and training strategies, making it irrelevant to the research study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about hiring and motivating new programmers, with a focus on recruitment strategies and employee development. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no context provided that links the discussion to ASD methodologies or practices. Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 2212,
        "title": "Gameification - How would you gameify work in an Agile team?",
        "body": "<p>During a recent open session at RallyON 2011 we talked about paradoxes in Agile. One of the items that came up during the conversation is when a high-performing team becomes so well greased that all the \"agile-ness\" has been sucked from the process. When introducing NEW change to the well-oiled Scrum team, they balk because things are going so well...</p>\n\n<p>A way to keep learning going, we talked briefly about \"gameification of work\" in an Agile team. Has anyone done this before? What are ways to keep an Agile team fresh?</p>\n",
        "score": 15,
        "creationdate": "2011-05-13T00:48:33.623000",
        "viewcount": 418,
        "tags": "|agile|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions an Agile team and challenges in maintaining agility, it does not explicitly or implicitly address Technical Debt.  The focus is on team dynamics and introducing change, not on code quality, processes, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the concept of 'gamification' in Agile teams to maintain engagement and learning. It does not address Technical Debt (TD) explicitly or implicitly, nor does it describe an existing scenario related to TD indicators. The discussion is more about team dynamics and motivation rather than issues related to TD in Agile Software Development."
    },
    {
        "id": 2309,
        "title": "How do you schedule maintenance work in Scrum?",
        "body": "<p>What are some of the different patterns you use to schedule maintenance work (any non-feature work like bug fixes, technical debt reduction, etc.)?  In our organization, we've considered mash-ups of the following:</p>\n\n<ul>\n<li>Finish feature commitments and then peel off teams for maintenance work during test or warranty cycles</li>\n<li>Bug Quash (a social event where the goal is to fix, or \u201cquash\u201d, as many bugs as is humanly possible in a time-boxed period)</li>\n<li>Schedule fixed capacity up front in each release (e.g. plan for 1 sprint per team in a release)</li>\n<li>Dedicated full-time bugmeister to triage and coordinate fixes with teams</li>\n<li>Ping-pong the maintenance work between off-shore teams</li>\n</ul>\n\n<p>Note, we follow two guiding principles in this area of practice:</p>\n\n<ol>\n<li>People should fix their own bugs to the extent possible</li>\n<li>No dedicated maintenance teams</li>\n</ol>\n\n<p>Note, too, the reality is we have bugs.  Please don't tell me to find a way to eliminate bugs so that we don't have to worry about solving for this problem.  I'm interested in other ideas about how to approach the problem.  </p>\n\n<p>(P.S. credit <a href=\"http://blog.natebeck.net/about/\">Nate Beck</a> for the Bug Quash idea - thanks Nate!)</p>\n",
        "score": 19,
        "creationdate": "2011-05-18T06:04:37.243000",
        "viewcount": 2954,
        "tags": "|scrum|planning|maintenance|defect-fixing|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses scheduling maintenance work, which inherently involves technical debt reduction (bug fixes).  It describes an existing scenario within a Scrum framework (an Agile methodology). While it doesn't explicitly define a TD indicator in the initial question, the context of bug fixes and maintenance work implicitly points to the existence of technical debt. The various strategies mentioned for handling maintenance work all relate to managing and mitigating the impact of technical debt within an Agile environment. The request for additional ideas further strengthens the relevance to real-world experiences in ASD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions 'technical debt reduction' and discusses strategies for managing maintenance work, which is a common TD indicator. It describes an existing scenario based on lived experience, detailing how the organization handles maintenance work within their Scrum framework. The discussion is clearly situated in the context of Agile Software Development (ASD), specifically mentioning Scrum practices. The post provides actionable insights into managing TD within an ASD environment, meeting all inclusion criteria."
    },
    {
        "id": 2316,
        "title": "How to handle user stories that cannot be split and do not fit even a 30 days long sprint?",
        "body": "<ol>\n<li>Given a small team (3 people or so) and a technically challenging area (e.g. middleware, embedded software etc.), and </li>\n<li>Assuming that a user story is a smallest thing that <em>has value for the end user</em>,</li>\n</ol>\n\n<p>how do you go about handling stories that take more than one month to reach the DONE-DONE state? Of course one could always split them into several so called \"technical stories\", but they are, with the exception of refactoring spikes, a big no-no in Agile, aren't they?</p>\n",
        "score": 12,
        "creationdate": "2011-05-18T09:00:43.040000",
        "viewcount": 7540,
        "tags": "|agile|scrum|planning|sprint|backlog|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon challenges in Agile software development, particularly concerning large user stories and sprint planning, it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, or other indicators of technical debt. The core problem is task decomposition and sprint planning within an Agile framework, not the accumulation of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on handling large user stories in Agile, specifically in the context of a small team working on technically challenging areas. However, it does not explicitly or implicitly relate to Technical Debt (TD). There is no mention of poor-quality code, lack of tests, duplicated code, or other TD indicators. The discussion is more about Agile practices and user story management rather than TD in Agile Software Development."
    },
    {
        "id": 2434,
        "title": "How do I encourage team members to accurately log their work?",
        "body": "<p>One thing that I noticed is that lots of employees forget to log the number of hours that they worked on a task. Is there a way to provide incentives for them to measure their work accurately? (either in time spent or progress on a specific task)</p>\n",
        "score": 14,
        "creationdate": "2011-05-25T11:23:17.287000",
        "viewcount": 1318,
        "tags": "|progress-monitor|timeline|timekeeping|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While inaccurate time logging can be an indirect indicator of potential problems in a software development project, this discussion does not explicitly or implicitly mention Technical Debt.  It focuses solely on time tracking and incentivization, lacking any description of code quality, process issues, or other indicators of TD. There is no mention of Agile methodologies either.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on encouraging team members to log their work hours accurately, which is related to time management but does not explicitly or implicitly address Technical Debt (TD) indicators. There is no mention of poor-quality code, lack of tests, duplicated code, or other TD indicators. Additionally, the discussion does not provide evidence of being related to Agile Software Development (ASD). Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 2635,
        "title": "Leading (predictive) Metrics?",
        "body": "<p>I was wondering what useful leading metrics people might be using to predict failures/issues after release.  (I'm assuming SW projects).</p>\n\n<p>There are lots of lagging metrics that capture what has already happened after release (e.g. weekly number of defects reported by customers) and those can be used to build a predictive model themselves.  But I am wondering if anyone else tracks things like \"number of high level defects per total defects\" and uses that to predict (with some level of accuracy :-) the number of defects that customers will see/report.</p>\n\n<p><strong>Reason/context:</strong> I'd like to be able to have something (measurable) in my back pocket in 12 months (the next big project) that says \"sure, we can lower the quality bar and cut $$$ for quality improvements, but it'll result in a higher maintenance budget by about x%\"  That is, start measuring now, validate the data and results then use it as a guide on the next project(s).</p>\n\n<p>thanks!</p>\n",
        "score": 19,
        "creationdate": "2011-06-17T13:14:27.253000",
        "viewcount": 2550,
        "tags": "|metrics|quality|",
        "answercount": 9,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions software project quality and potential cost implications related to defects, it does not describe an existing scenario based on lived experience. It's primarily an advice-seeking question about predictive metrics, lacking real-world examples of technical debt or its indicators.  There is no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on leading metrics for predicting software failures/issues post-release, which is not directly related to Technical Debt (TD). There is no mention of TD indicators such as poor-quality code, lack of tests, or challenges in Agile Software Development (ASD). The discussion is more about predictive metrics rather than addressing TD in an ASD context."
    },
    {
        "id": 2659,
        "title": "Would/should the PM define the code style for a software project?",
        "body": "<p>In terms of specifying the actual code/syntax style that all developers should use in a project, should the project manager do this?<br>\nOr would that be under the realm of a technical lead/lead developer?<br>\nOr would it vary from organization to organization?\nOr all of the above?</p>\n\n<p>I ask because I feel having uniform, readable, commented code is extremely important for a project's success because it makes debugging and maintenance <em>so</em> much easier - so this seems like it'd be under the PM realm.</p>\n",
        "score": 6,
        "creationdate": "2011-06-21T11:23:49.090000",
        "viewcount": 895,
        "tags": "|software-development|",
        "answercount": 9,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions code readability and maintainability, which are indirectly related to Technical Debt, it does not describe an existing scenario of TD.  It's primarily a question about project management responsibilities regarding code style, lacking any real-world examples of TD or its impact. There is no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about who should define the code style in a software project, focusing on roles like project manager or technical lead. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). The mention of code readability and maintenance is not linked to TD indicators or ASD context, making it a false positive based on keywords like 'code' and 'maintenance'."
    },
    {
        "id": 2765,
        "title": "Why use story points instead of hours for estimating?",
        "body": "<p>After using hours to estimate our projects for a long time and rarely coming within 20% of actual \"work-to-ship,\" I have been told by a handful of people that \"points\" work a lot better at gauging the complexity and estimated length of tasks within a project.  </p>\n\n<p>How are story points better at estimating the work required for a project?</p>\n",
        "score": 164,
        "creationdate": "2011-07-04T19:25:46.013000",
        "viewcount": 98029,
        "tags": "|agile|scrum|estimation|story-points|",
        "answercount": 19,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in estimating project work ('rarely coming within 20% of actual \"work-to-ship\"'), it does not explicitly or implicitly refer to Technical Debt.  It focuses on comparing estimation techniques (hours vs. story points) within an Agile context, but doesn't address any indicators of TD such as code quality, lack of testing, or other issues related to accumulated technical debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the use of story points versus hours for estimating project tasks, which is a common practice in Agile Software Development. However, it does not relate to Technical Debt (TD) explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. The discussion is about estimation techniques rather than addressing any existing scenario of TD in ASD."
    },
    {
        "id": 3284,
        "title": "How do you handle new tasks in an earned value analysis chart?",
        "body": "<p><a href=\"http://en.wikipedia.org/wiki/Earned_value_management\" rel=\"noreferrer\">Earned Value Analysis</a> is great on paper. However, I'm having difficulty using it for programming projects that tend to change dramatically from week to week.</p>\n\n<p>For example, a milestone is \"complete test plan 2 on accounting package\", however, in the first half hour of the test plan, the tester discovered an unrecoverable bug. Fixing the bug is 3+ weeks worth of work that was never in the work break down structure. The programmer says, \"oh yeah I forgot to include that task\" when we made the task list. </p>\n\n<p>So, how do you handle this? Do you create the chart so that your project is now a month behind schedule and a month over cost because the WBS was incomplete? Hard to swallow when the entire project is 6 weeks long. Or, do you adjust the planned value to include this new 3 weeks worth of work thus creating a new project plan?</p>\n\n<p>To further extend the question, how do you handle disagreements about the meaning of a work item. The programmer says it's done. The stake holder explains why the three legged cat is missing a leg and the programmer says, oooh you wanted 4 legs?? Well, that's going to take an additional 3 weeks. The new cat will have more value with the extra leg... but the project will take 3 weeks longer than estimated. How do you handle this?</p>\n",
        "score": 5,
        "creationdate": "2011-08-31T19:43:55.033000",
        "viewcount": 736,
        "tags": "|tracking|evm|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions project management challenges and schedule overruns, it does not explicitly or implicitly relate to Technical Debt.  The core issue revolves around Earned Value Management (EVM) and incomplete work breakdown structures, not code quality, design flaws, or other indicators of technical debt. There is no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on handling changes in project scope and scheduling within the context of Earned Value Analysis, which is a project management technique. While it touches on issues like incomplete work breakdown structures and scope changes, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 3343,
        "title": "How do \"action items\" relate to various task identification and tracking methods used by agile methodologies?",
        "body": "<p>I'm specifically thinking about the relationship between <a href=\"http://en.wikipedia.org/wiki/Action_item\" rel=\"noreferrer\">action items</a> and various methods of organizing tasks in agile methodologies, such as <a href=\"http://en.wikipedia.org/wiki/User_story\" rel=\"noreferrer\">user stories</a>. I think this requires a little bit of a leap, but I don't think it's too off-base.</p>\n\n<p>My understanding of an action item is that it is something that needs to be done. It could be a task to write a document, review a document, implement functionality, write a test case, prepare a presentation, send an email, sign a document, and so on. An action item is also something that can be handled by (and is assigned to) a single individual.</p>\n\n<p>As I understand it, a user story is a requirement in the form of \"As a {role}, I want {output} so that {benefit}\". Quite simply, it's a representation task. Usually, user stories are used to capture the functional requirements of a system, and then someone will use this requirement to implement a solution. However, I see nothing in this definition that precludes it from capturing non-functional requirements (\"As a user, I want this program to respond to {input X} within 1 second so that I can complete this task within the deadlines.\") I also don't see a reason why stories can't be written for internal tasks as well (\"As a project manager, I want a regular status report on the health of this project to determine scheduling, budgeting, and risks.\" -> realized through things like daily standups or weekly status meetings).</p>\n\n<p>I came across the <a href=\"http://en.wikipedia.org/wiki/INVEST_%28mnemonic%29\" rel=\"noreferrer\">INVEST mnemonic</a> when searching about this relationship between action items and user stories. It means that user stories must be independent (self-contained), negotiable (changed up to the time they are added to an iteration), valuable, can be estimated, appropriately sized (4-40 or 8-80 rule?), and testable. I disagree that all stories must be independent (some features or tasks do depend on others existing first) and testable (you can't necessarily \"test\" a presentation in the development sense, but it can be reviewed and assessed, so it might be close). It seems like with the exception of independent and testable, the same rules should apply to an action item.</p>\n\n<p>Ultimately, the question is: Are \"user stories\" and \"action items\" (and any other methods of task identification and tracking) generally interchangable? It seems like a good task is a good task, regardless of how it's presented, and the only significant difference between the two is how they are formatted and presented. Is the only consideration which presentation of tasks bests suits the project and team, and maintaining consistency (in the format used to express tasks) throughout the project?</p>\n",
        "score": 5,
        "creationdate": "2011-09-08T13:11:03.340000",
        "viewcount": 3017,
        "tags": "|planning|tasks|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile methodologies and task management, it does not address Technical Debt (TD) either explicitly or implicitly.  There is no mention of code quality, testing, documentation issues, or any other indicators of TD. The focus is solely on the relationship between action items and user stories within an Agile framework, lacking any connection to the core concept of the research.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the relationship between action items and user stories within agile methodologies. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about task organization and tracking in agile, without any mention of TD or related challenges. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 3953,
        "title": "How can I avoid team burnout?",
        "body": "<p>I work for a small web company that deals with a lot of projects, a few at any given time are development heavy for us (400-1500 hours or more) and I've been noticing developers get extremely burnt out on a project after 150 hours or so.</p>\n\n<p>I've been toying around with the idea of working some form of rotation/rest so when someone reaches the threshold, they at least get some time off of working on that project. Is there an industry standard approach?</p>\n",
        "score": 36,
        "creationdate": "2011-11-28T22:53:05.563000",
        "viewcount": 3184,
        "tags": "|team-management|motivation|team-building|",
        "answercount": 11,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "Poor",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions team burnout, a common consequence of accumulating technical debt, it doesn't explicitly or implicitly describe any indicators of technical debt.  There's no mention of code quality, lack of testing, duplicated code, or other factors related to technical debt. The focus is solely on preventing burnout through project rotation, without connecting it to underlying technical issues.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on team burnout and potential solutions like rotation/rest periods. While it touches on time management difficulties, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no mention of Agile Software Development (ASD) practices or context, making it unrelated to the study's focus on TD in ASD."
    },
    {
        "id": 4037,
        "title": "Do you know any companies that rotate developers between different projects on regular basis?",
        "body": "<p>I work for a smallish outsourcing company of about 30 people, nearly all of them developers. At any given moment we have 6-9 projects in development for various clients. Most of the projects are developed by 3 programmers and one tester and last around 6 months, but we have also some long-running projects lasting up to two years. We have been practicing Agile methodologies for a couple of years, and now we use Kanban more and more. Most of our developers are highly-skilled and while we have only a couple of \"real TDD\" practitioners, everybody does at least \"test-after\". We don't pair a lot, but instead rely on hallway testing and code reviews.</p>\n\n<p>The problem we have encountered is that after having been acquired by a corporation, which has in the past outsourced all of it's programming work to India, we now handle multiple projects with very significant technical debt, almost all of which will probably run for quite a long time. This is a problem, because morale of the people working on those projects is very low (some people already quit), and the programmers are getting burned out quickly. It has been said that it feels like a prison sentence to be a part of those teams, especially with no end in sight for those projects.</p>\n\n<p>We are looking for a way of increasing morale of the unlucky employees who have to handle the worst projects. One of our ideas is to start rotating people regularly between projects, so that even if someone ends up in a really nasty project, they know that they only have to endure this for a couple of months, and not as long as they work for our company.</p>\n\n<p>We have looked into this idea before, because we think it might be a good way to improve knowledge transfer, shared code ownership and encourage pair programming, but now we have a much stronger incentive to pursue this.</p>\n\n<p>I know of two companies that practice rotating people among projects: <a href=\"http://thinkrelevance.com/\" rel=\"noreferrer\">Relevance</a> and <a href=\"http://pivotallabs.com/\" rel=\"noreferrer\">Pivotal Labs</a>. Relevance has posted an <a href=\"http://thinkrelevance.com/blog/2010/09/20/rotation-and-the-customer.html\" rel=\"noreferrer\">entry on their blog</a> about rotating people, and Pivotal hints about it in <a href=\"http://www.linkedin.com/jobs/jobs-Ultimate-Agile-Developer-2197139\" rel=\"noreferrer\">some job offers</a> and it was <a href=\"http://www.quora.com/What-are-the-most-valuable-lessons-that-developers-who-study-at-Pivot\" rel=\"noreferrer\">mentioned on Quora</a>.</p>\n\n<p>Do you know any other companies that apply this technique (I'm especially interested in any experience reports)? Is it a good or a bad idea in our situation?</p>\n\n<hr>\n\n<p>EDIT:</p>\n\n<p>After reading the responses, I have come to the realization, that I might have over-stressed the burnout/prison-projects angle a little bit.</p>\n\n<p>In fact, as I have mentioned above, we have had the idea of rotating people regularly before, and the reason for that is that we expect this to:</p>\n\n<ol>\n<li><p>Promote knowledge-sharing, because people who are experts in various fields (DB, JavaScript), will have chance to work with a larger subset of other employees.</p></li>\n<li><p>Improve code quality through continuous code review: when a new person enters a project, it will be a fresh set of eyes looking at the code and pointing out the faults in the design/code itself.</p></li>\n<li><p>Foster collective code ownership: if people are expected to rotate off the project, the code, which they wrote will be maintained by other people. In order to not be left with maintaining a completely unknown, \"untouchable\" piece of code written by someone else, the developers will have to share the responsibility for various parts of the system.</p></li>\n<li><p>Foster pair-programming: I believe that pair-programming is a good way of developing software. In a team, which periodically welcomes new members, pair-programming is the most effective way of introducing new people. If programmers spend a lot of time pair-programming with new people, hopefully they will be more likely to pair program with other team members on normal tasks.</p></li>\n</ol>\n\n<p>I am really interested in learning about other companies that have tried rotating people across projects. Has anyone worked in an environment like that or has heard about some company practicing this?</p>\n",
        "score": 9,
        "creationdate": "2011-12-07T12:34:31.320000",
        "viewcount": 1432,
        "tags": "|software-development|motivation|project-team|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses technical debt as a significant problem impacting team morale and developer burnout within an Agile (Kanban) environment.  The post details the existing scenario of multiple projects burdened by technical debt, leading to low morale and employee turnover. The author proposes project rotation as a solution, directly linking the problem (technical debt manifested in low morale and burnout) to a proposed solution within an Agile context. The discussion clearly defines technical debt indicators (low morale, burnout, and the implication of poor code quality leading to long-term maintenance issues). The author's lived experience within the company provides a strong real-world context.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is highly relevant to the study of Technical Debt (TD) in Agile Software Development (ASD). It explicitly mentions technical debt as a significant issue affecting team morale and productivity, which aligns with TD indicators such as low team morale and burnout. The scenario described is based on lived experience, detailing the challenges faced by the company after being acquired and handling projects with significant TD. The discussion is set in the context of Agile methodologies, specifically mentioning the use of Kanban and practices like test-after and code reviews. The proposed solution of rotating developers is aimed at addressing TD-related issues, making the discussion an excellent fit for the study."
    },
    {
        "id": 4194,
        "title": "Training methods in small team",
        "body": "<p>I'm working for a startup company where there are only a few employees (5 programmers).\nI'm senior in terms of my time with the company and experience even though I'm only 23 years old. I have no experience in leading a team other than the college project groups.</p>\n\n<p>Since I'm most experienced, I was told to train the newcomers and one of them was assigned to my team for a project.</p>\n\n<p>Can any one tell me how can I train them while handling project pressure myself?\nI want to share my knowledge with them but at the same time I want to avoid spoon feeding them or let them go astray in programming (became weak or clueless). What is the best approach to interact with them? </p>\n\n<ol>\n<li>Boss them</li>\n<li>Treat them as peers</li>\n<li>Something else</li>\n</ol>\n\n<p>I expect to manage more than a single person soon so I look for methods which would work in the long run and not only in this specific situation.</p>\n",
        "score": 16,
        "creationdate": "2011-12-28T10:17:03.920000",
        "viewcount": 548,
        "tags": "|team-management|training|product-management|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in a software development team (training newcomers while managing project pressure), it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, documentation problems, or any other indicators of technical debt. The focus is solely on team management and training methodologies within a small, agile team, but without any connection to technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on training methods and team management in a small startup, without any mention or implication of Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no reference to Agile Software Development (ASD) practices or methodologies. The discussion is primarily about leadership and mentoring, not TD in ASD."
    },
    {
        "id": 4285,
        "title": "How to handle 'ilities' (or non-functional requirements) for a project planning/prioritization/work-allocation?",
        "body": "<p>It seems the world is doing a good job at managing functional requirements for a system - you can link them to benefits, prioritize them and manage their implementation schedule (let's assume an ideal world :)</p>\n\n<p>Now consider 'ilities' like modifiability, usability, adaptability, reusability, security, reliability, availability etc., etc.,</p>\n\n<p>Technically one can link them to potential end benefits and also prioritize their importance for a business - but just HOW should one manage their implementation? Assuming you prioritize the functions and the ilities in the same 'pile' so to speak, it's possible that availability may be lower than 'booking tickets' feature-set (for example).</p>\n\n<p>Agilists may argue that the design should reveal itself and that they can 'refactor' availability or security etc., later. Honestly, <strong>everything</strong> can be added to the system by refactoring but the costs may be prohibitive and <strong>that's why</strong> one must spend some time (may be more) upfront when accounting for such ilities IMO.</p>\n\n<p>So my question is this: should you preform a separate prioritization for ilities? Should they be in a separate 'pile' (or backlog) of their own? What should be a good sequencing order when implementing the system? If you indeed perform two independent prioritization activities then how can you compare amongst them and convince the stakeholders that you are indeed doing valuable things first? Basically how would you justify doing ility-management/planning/design over feature-set designing?</p>\n\n<p>Since ilities have tradeoffs associated with them you must be able to balance them well and thinking about it later or following YAGNI (You ain't gonna need it) won't suffice. What do you suggest?</p>\n",
        "score": 5,
        "creationdate": "2012-01-09T01:05:09.500000",
        "viewcount": 4327,
        "tags": "|agile|planning|software-development|requirements|resource-planning|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion revolves around managing non-functional requirements (ilities) like modifiability, usability, security, and reliability within an Agile context. The author explicitly mentions refactoring and the potential costs associated with delaying the consideration of these ilities, which implicitly relates to technical debt. The discussion also touches on prioritization within an agile backlog, which is a key aspect of ASD. While the discussion is more about planning and prioritization than a specific instance of TD, it does highlight the challenges of managing TD related to non-functional requirements in an agile environment.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt.  The author highlights the potential high costs of addressing 'ilities' (non-functional requirements like security and availability) later through refactoring, directly relating to the concept of accumulating technical debt. The discussion is within the context of Agile, as evidenced by the mention of refactoring and prioritization within an Agile framework. While it doesn't explicitly mention 'technical debt,' the core concern aligns with the concept.  The lack of a specific real-world example slightly lowers the relevance rating to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on managing non-functional requirements ('ilities') in project planning and prioritization, particularly in an Agile context. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The mention of refactoring costs is related to design decisions rather than TD. Additionally, the discussion lacks a real-world scenario or lived experience, making it hypothetical in nature. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 4635,
        "title": "With Scrum, how do you keep from dropping the little things?",
        "body": "<p>We've moved our group's workflow to a scrum-based approach, with a lot of success. We're getting things done, people are more engaged, and we're more focused on our actual user community's needs.</p>\n\n<p>Because we needed to work on processes over tools, we're using physical cards on a backlog board and a task board. This works pretty well, although we're probably going to move to an electronic version eventually as we're starting to get more remote team members.</p>\n\n<p>This works very well for \"right sized\" user stories. But how do we deal with things that are really too small for a user story? Sometimes these are bugs/defects, or sometimes they're just really small feature requests or enhancements. For example, our Gitorious installation appends a superfluous <code>s</code>  to repository names when one makes a clone. It'd be nicer if it didn't.</p>\n\n<p>One <em>could</em> write user stories for every thing like this (which is what we do), but a) it feels overweight and not at all \"agile\" and b) such stories inevitably get scheduled below bigger, more important things, even though they're often low-hanging fruit (small effort for small but noticeable results).</p>\n\n<p>Or, one could have a separate issue tracker. However, that suddenly goes from one place to look for work \u2014 the scrum task board \u2014 to having two tools. Is there a good way to integrate these things so they don't act in opposition to each other?</p>\n\n<p>Or, one could just leave these things out of the process and shout them at each other across the room. There's a serious risk of this becoming the <em>de facto</em> process if I don't fix this. When this works, it's basically fine, but it's problematic because a) it can disrupt productivity when people get distracted from their other work by unscheduled interruptions and b) when these issues aren't immediately fixed, they can (as the question title) get dropped.</p>\n",
        "score": 15,
        "creationdate": "2012-02-14T13:55:37.613000",
        "viewcount": 629,
        "tags": "|scrum|process|tasks|defect-fixing|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly relates to Agile Software Development (Scrum) and implicitly addresses Technical Debt.  The author describes \"small things\" that are not getting addressed, leading to a degradation of the software (superfluous 's' appended to repository names). This represents a form of technical debt \u2013 a small, easily fixable issue that, if left unaddressed, will accumulate and potentially cause larger problems. The author's concern about these small tasks being 'dropped' and the disruption caused by unscheduled fixes further supports this. While not explicitly mentioning 'technical debt,' the scenario clearly describes a form of it within an Agile context. The discussion focuses on a real-world problem and seeks solutions, fulfilling the criteria for inclusion.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses issues like time management difficulties and potential low team morale due to the handling of small tasks and bugs. It describes an existing scenario based on lived experience with a Scrum-based approach, which is a form of Agile Software Development (ASD). The discussion highlights the challenge of managing small tasks that are too minor for user stories, which can lead to them being overlooked or disrupting productivity, thus acting as a TD indicator. However, the discussion lacks depth in exploring solutions or insights into managing these issues, which affects its relevance rating."
    },
    {
        "id": 4875,
        "title": "What actions will you take when Iteration/Sprint goals are in danger?",
        "body": "<p>Let's say, you are a Scrum Master and your team is in the middle of a Sprint. You see that all planned stories can't be completed till the end of the Sprint, that's for sure. What action will you perform?</p>\n",
        "score": 13,
        "creationdate": "2012-02-28T21:27:22.727000",
        "viewcount": 11349,
        "tags": "|agile|scrum|sprint|",
        "answercount": 10,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a scenario where sprint goals are at risk, it doesn't explicitly or implicitly address Technical Debt.  There's no mention of code quality issues, lack of testing, duplicated code, documentation problems, or other indicators of TD. The focus is purely on sprint management and potential solutions within the Agile framework, lacking the crucial element of TD for inclusion in the study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on actions a Scrum Master might take when sprint goals are in danger, which is a common scenario in Agile Software Development. However, it does not explicitly or implicitly relate to Technical Debt. There is no mention of poor-quality code, lack of tests, or any other TD indicators. The question is hypothetical and lacks a real-world scenario or example, which further disqualifies it from inclusion."
    },
    {
        "id": 5037,
        "title": "What do to if a signed project got cancelled?",
        "body": "<p>I have a X dollars project under my belt. It supposed to start on Monday. But client refused to go forward and I waited for them for a week. How do software consulting firms deal with this situation?</p>\n\n<p>This is a contract project and the client cannot pay me due to resources. For suppose 80 hours. </p>\n",
        "score": 10,
        "creationdate": "2012-03-07T21:02:12.747000",
        "viewcount": 848,
        "tags": "|time-management|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on contract cancellation and the financial implications for the consultant, not on technical debt.  While lost time could be indirectly related to potential future debt if the project were to resume, there's no mention of code quality, agile practices, or any other indicators of technical debt. The core issue is a business/contractual problem, not a technical one.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about a project cancellation and how to handle it from a business perspective. It does not relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators or agile methodologies, making it irrelevant to the study's focus."
    },
    {
        "id": 5339,
        "title": "Tracking points spent on bugs during sprint",
        "body": "<p>The product owner wants to keep track on how much <strong>points</strong> are spent on bugs during a sprint. This can raise some issues, such as:</p>\n\n<ul>\n<li><p>Scoring a task that is already done. Surprisingly even with it done, there are sometimes discussion and divergences.</p></li>\n<li><p>Scoring many small tasks with 0 points that at the end actually sum up to something meaningful (a bunch of fast fixes).</p></li>\n<li><p>Counting points spent on bugs as available points for new features in the next sprint, alongside with new bugs that eventually will show up.</p></li>\n</ul>\n\n<p>I agree with him that it is important to track the time spent on it, but points doesn't seems to play really well in this case. So what are the best approaches and practices in this case? Count the hours spent on each one?</p>\n",
        "score": 6,
        "creationdate": "2012-03-30T21:03:47.197000",
        "viewcount": 696,
        "tags": "|scrum|tracking|sprint|bugs|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions issues in Agile software development (tracking points in a sprint), it does not explicitly or implicitly refer to Technical Debt.  The problems described relate to sprint planning and bug tracking, not to the accumulation of poorly designed or implemented code that hinders future development (which is the core of Technical Debt). There is no mention of code quality, lack of tests, duplicated code, or other indicators of Technical Debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on tracking points spent on bugs during a sprint, which is related to time management and task estimation in Agile Software Development. However, it does not explicitly or implicitly address Technical Debt indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is more about process management rather than addressing or identifying Technical Debt in ASD."
    },
    {
        "id": 5345,
        "title": "Project complete but does not really satisfy the end users. Business owners unhappy",
        "body": "<p>Some background on the project:</p>\n\n<blockquote>\n  <p>I recently completed a project for a company. The project was a fairly\n  large line of business web site. The customer was a company with no\n  prior experience producing software applications. There was no prior\n  infrastructure, web server, database servers, code repository or\n  formal product owner. I was given a list of requirements and a 6 month\n  completion date. The scope included integrating the web site with\n  their enterprise data ware house, designing the back end database,\n  creating specifically layed out Pdf files on the fly. It also needed\n  to work in english, spanish and mandarin.  </p>\n  \n  <p>I was told their was another developer in-house I would be working\n  with.  Once I got a month into the project I found the other developer\n  had no prior web or application development experience. I had to build\n  the infrastructure from scratch. There were issues with the network\n  that cause the application to run slowly. I also completely\n  underestimated the amount of time it takes to create applications for\n  more than one language. I soon realized I was not going to meet the\n  6th month deadline. I told the I.T. director that there was no way the\n  project would completed on time. I said it would take at least 9\n  months for a single person to complete the project. She said they\n  couldn't afford to pay over time and just do the best I could.</p>\n</blockquote>\n\n<p>A smart person would have left the project at this point. I did not do the smart thing. I completed the project within 9 months. I worked 60 hour weeks because I wanted to complete the project and move on. </p>\n\n<p>Many lessons were learned but I still have a dilemma. The company is very small and does not have an in-house developer to support the application. I continue to support the application on nights and weekends.  I have asked the company to hire someone to support the application as part of their job but they say they cannot afford it. The application built serves the purpose it was made for but I see absolutely no way it can be maintained. </p>\n\n<p>What are my options? </p>\n\n<p>I feel I really did them a dis-service by creating something for them they cannot maintain and the users don't really want. The project is not getting used as much as it should because I requires a great amount of data entry, the users wanted data to be migrated from an existing file maker application. The data migration was not a part of the scope of the project. Advice needed.</p>\n",
        "score": 16,
        "creationdate": "2012-03-31T21:01:12.010000",
        "viewcount": 796,
        "tags": "|estimation|product-management|deadline|subcontractor|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where a developer faced challenges due to unrealistic deadlines, lack of resources, and scope creep, leading to a system that is difficult to maintain and not fully adopted by users. This implicitly points to technical debt accrued due to time pressure and inadequate planning. The context is within an agile-like setting, although not explicitly stated, the project was developed in iterations and the developer had to adapt to changing circumstances. The lack of proper data migration and the need for ongoing support also indicate technical debt.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world project with significant technical debt.  The author explicitly mentions underestimated time, resulting in 60-hour workweeks to meet a deadline.  The resulting application is difficult to maintain due to lack of in-house support, highlighting a crucial aspect of technical debt. While Agile methodology isn't explicitly named, the project's issues (poor requirements gathering, lack of a dedicated product owner, and scope creep) are common in Agile projects and point to a lack of Agile practices. The lack of data migration, leading to user dissatisfaction, further indicates a failure to manage scope and prioritize user needs, common in projects struggling with technical debt. The author's dilemma directly relates to the consequences of accumulated technical debt in a software project.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions challenges related to project completion, user satisfaction, and maintenance, but it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or duplicated code. The focus is on project management and resource allocation issues rather than TD. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices, making it unrelated to the ASD context required by the inclusion criteria."
    },
    {
        "id": 5439,
        "title": "Allowing PMs to grade/rate developers",
        "body": "<p>We're trying to introduce some new/updated ways to quantify developer productivity, and we want to include our Project Managers' thoughts.  What do you think about allowing PMs to \"grade\" or apply some sort of \"rating\" to a developer's task?  The grades would be based on things like the number of bugs that were found, code performance (does it run slow vs. fast), adherence to requirements, etc.</p>\n\n<p>Would developers get upset about PMs grading them on a seemingly arbitrary scale?  How can I do this in a way that won't rock the boat?</p>\n",
        "score": 9,
        "creationdate": "2012-04-09T22:10:21.637000",
        "viewcount": 734,
        "tags": "|team-management|software-development|communication|project-team|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on developer performance evaluation methods proposed by project managers. While indirectly related to software quality (bugs, performance, adherence to requirements), it does not explicitly or implicitly discuss Technical Debt.  There is no mention of existing technical debt, nor are there indicators of technical debt present in the described scenario. The question is hypothetical and lacks a real-world context of existing technical debt within an Agile environment.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the idea of project managers grading developers based on productivity metrics like bugs, code performance, and adherence to requirements. While these factors can relate to technical debt, the discussion does not explicitly or implicitly address technical debt or its indicators. Additionally, there is no mention of Agile Software Development, making it unrelated to the ASD context. Therefore, it does not meet the inclusion criteria for discussions on technical debt in ASD."
    },
    {
        "id": 5521,
        "title": "Quick win or long term sustainability?",
        "body": "<p>My project has to deliver middleware components that will support a large, complex system development spanning multiple phases. My phase is due to implement in 6 weeks, with future phases being implemented in 6 months and 12 months from now.</p>\n\n<p>Most of my work is well on track, but we have one component that we are just starting to put in place. We know what is needed to support the current phase, and are confident in our plans to deliver that. However, we don't have a clear view of how the future development phases will be implemented, and so we have not been able to plan our implementation with the future phases in mind. Carrying out the necessary analysis would cost us a couple of weeks, which would delay the overall implementation of the current phase by a week overall.</p>\n\n<p>My question is this: should I opt for the quick implementation that fully meets the current requirement and meets current targets, but does not guarantee an easy future implementation, or should I request a delay to the project, with potential (but unproven) future benefits through avoidance of rework?</p>\n\n<p>We are using a waterfall-based approach, rather than agile, and the technology is relatively new to the organisation. Does this make a difference to your answer?</p>\n",
        "score": 4,
        "creationdate": "2012-04-18T18:46:41.843000",
        "viewcount": 845,
        "tags": "|planning|scheduling|infrastructure|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon a trade-off between a quick solution and long-term sustainability, which could be interpreted as a form of technical debt, it does not meet several inclusion criteria.  Firstly, it's explicitly stated that a waterfall methodology is used, excluding it from the ASD context. Secondly, although a potential future problem is identified, no concrete TD indicators (poor code quality, lack of testing, etc.) are described in the current phase.  The question is primarily about project management and prioritization in a non-agile environment, not about technical debt within Agile Software Development.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is related to decision-making in project management, specifically choosing between quick implementation and long-term planning. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, the discussion is set in a waterfall-based approach, not Agile Software Development (ASD), which disqualifies it based on the inclusion criteria. Therefore, it is marked as a false positive."
    },
    {
        "id": 6305,
        "title": "Calculated duration in MS project task?",
        "body": "<p>I would like to add a \"Bugs\" task with a duration calculated from 20% of total project duration. Is this possible in MS Project?</p>\n\n<p>If not, what are the options of adding a task that duration depends on duration of others?</p>\n",
        "score": 3,
        "creationdate": "2012-08-12T12:44:36.727000",
        "viewcount": 4803,
        "tags": "|ms-project|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is about calculating task duration in MS Project, a project management tool.  It does not relate to Technical Debt or Agile Software Development. While time management is mentioned, it's in the context of project scheduling, not software development challenges. There is no mention of code quality, testing, or other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about calculating task duration in MS Project, which does not relate to Technical Debt (TD) or Agile Software Development (ASD). It lacks any mention of TD indicators or ASD context, making it irrelevant to the study's focus."
    },
    {
        "id": 6387,
        "title": "How do you manage a team of developers when their preferred working hours vary?",
        "body": "<p>I recently read a question on here about - <a href=\"https://pm.stackexchange.com/questions/6347/how-to-balance-teamwork-and-babble\">How to balance Teamwork and Babble?</a> - and David Espina's answer pointed out that despite developers being contracted as 100% FTE (full-time equivalents), in reality they only deliver between 45% and 75%.</p>\n\n<p>For simplicity's sake, translating that statistic into hours implies that in a typical 8 hour day (9 to 5), developers only work around 4 to 6 hours.</p>\n\n<p>Based on my experience at work, I would tend to agree with David. In other words, I have also found that developer stamina and / or willingness to work varies quite a bit from one developer to the next.</p>\n\n<p>Some developers enjoy working 8 hours per day. Other developers experience stress when they work for prolonged periods of time and require regular breaks during the day in order to perform at their best.</p>\n\n<p>In other words, a 4-hour per day developer (let's call him laid-back Larry) gets stressed if he is required to put in 8 hours per day. This reduces Larry's morale and thus impacts his long-term productivity.</p>\n\n<p>Likewise an 8-hour per day developer (let's call him workaholic Winston) gets stressed when Larry takes regular breaks, because he feels like he's the one doing all the hard work whilst Larry is free-riding. But levelling the playing field by inviting Winston to work 4 hours per day instead of 8 results in a loss of long-term productivity as well.</p>\n\n<p>So how do you manage a team of developers when their preferred working hours vary?</p>\n",
        "score": 15,
        "creationdate": "2012-08-28T09:05:52.857000",
        "viewcount": 1277,
        "tags": "|team-management|time-management|",
        "answercount": 10,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon team management challenges and potential impacts on productivity, it does not explicitly or implicitly relate to Technical Debt.  There is no mention of code quality, lack of testing, duplicated code, documentation issues, or any other indicators of technical debt. The core issue is managing varying work styles and hours, not technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on managing developers with varying preferred working hours and the impact on productivity and morale. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). The mention of productivity and morale does not connect to TD indicators such as poor-quality code or lack of documentation. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 6509,
        "title": "How should we plan work on support issues without a \"battery\"?",
        "body": "<p>We are working on a very old project with a lot of legacy code. This means that we have around 3-5 unplanned issues every Sprint.</p>\n\n<p>We were handling that with \"batteries\": time set aside for unscheduled issues each Sprint. But I recently read an article that recommended against using batteries, and many points from it are true. For example:</p>\n\n<ol>\n<li>The battery is always used up, but it's sometimes used for unrelated things.</li>\n<li>The battery has a negative influence on our velocity.</li>\n</ol>\n\n<p>How should we handle this situation in our projects? And yes, we are doing <em>quality</em> stories to improve the current state of the project. :)</p>\n",
        "score": 11,
        "creationdate": "2012-09-06T06:21:06.010000",
        "viewcount": 752,
        "tags": "|scrum|planning|schedule-risk|timeboxing|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions a significant amount of legacy code and unplanned issues (3-5 per sprint), which are clear indicators of technical debt.  The team's use of a 'battery' (buffer time) to handle these issues further supports this. While the post doesn't explicitly mention Agile, the reference to sprints strongly implies an Agile context. The author describes a real-world scenario and seeks solutions to manage the technical debt, fulfilling the inclusion criteria. The relevance is rated as 'Good' because while the connection to Agile is implicit, the description of the problem and its impact on velocity is clear and directly related to managing technical debt within a sprint-based framework.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it deals with legacy code and unplanned issues, which are indicators of TD. It describes an existing scenario based on lived experience, as the author discusses their current project and challenges. The TD indicator is implicit through the mention of legacy code and unplanned issues affecting velocity. The discussion is related to Agile Software Development (ASD) as it mentions sprints and velocity, which are key elements of agile methodologies. However, the discussion lacks depth in exploring the TD indicators and their impact, which is why it is rated as 'Good' rather than 'Excellent.'"
    },
    {
        "id": 6546,
        "title": "Is it a good idea to replace Confluence with a custom in-house workflow based on search?",
        "body": "<p>Our team (40 people) is currently using Confluence as a knowledge base repository. There are many problems with confluence - formatting text is limited; can't paste images in the text; editing bugs; etc.</p>\n\n<p>I have the idea to use something else - have a folder somewhere dedicated to documents. Anyone from the team can put files there, edit files, create folders, etc. Have also web-access with a search engine, and we have everything we want.</p>\n\n<p>I realize we won't be able to track changes, but I don't think it is that important for us.</p>\n\n<p>For second stage I think of something a little more sophisticated: Have a bot mail-user that whenever it receives e-mail, it stores it in said folder. That will make things even easier - since a lot of the information is in e-mails, all I need to do is Cc bot-mail-user, and I'm done.</p>\n\n<p>So my question is: Is this a good/bad idea?</p>\n",
        "score": 1,
        "creationdate": "2012-09-09T23:42:50.167000",
        "viewcount": 1432,
        "tags": "|communication|knowledge-management|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in knowledge management (lack of version control, difficulties with the current system), it does not relate to Technical Debt.  The core issue is about choosing a knowledge management system, not about addressing technical debt within a software development project. There is no mention of Agile methodologies or any indicators of technical debt within software code or processes.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about replacing Confluence with a custom workflow for document management. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). The focus is on the limitations of Confluence and a proposed alternative, without any mention of TD indicators or agile methodologies. Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 6698,
        "title": "Agile/scrum - tracking time spent in current iteration towards stories from the next iteration if all current stories are done",
        "body": "<p>Our team has been slowly trying to go towards agile, and like many other teams, up to this point, the question of \"what do we do when we actually finish all commitments?\" is fairly new and foreign to us. But lately it actually came up once or twice.</p>\n\n<p>The reason I wanted to ask this board on good practices is that we are using Rally for agile project tracking and one thing the tool does is keep track of hours and points. In order to improve our estimates, I wanted to do something with this data and provide feedback to the team on how we did in the past, by comparing metrics that show estimated task hours vs. actual task hours vs. assigned story points.</p>\n\n<p>This seems like it could work great as long as developers work up until the last day of the iteration or if they are late with their deliveries. Then \"actual hours\" reflects exactly what went into each story.</p>\n\n<p>However, what should we do when we finish early but next story would take too long to complete so we can't pull it into the current iteration?</p>\n\n<p>I know some people are advised to simply take the time for general cleanup/housekeeping like updating automated tests or documentation, but for sake of argument, let's say the best value to the team and the company in this specific scenario would be to immediately start working on the next story.</p>\n\n<p>If we are not committed to the next story, actual hours aren't tracked anywhere. And in the next iteration when we do commit, we will only identify estimated/actual hours which will go into the next iteration, at which point the work might already be 25%-50% complete.</p>\n",
        "score": 11,
        "creationdate": "2012-10-01T20:58:42.290000",
        "viewcount": 1790,
        "tags": "|scrum|agile|estimation|scheduling|rally|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile and touches upon time management in software development, it does not explicitly or implicitly address Technical Debt.  The core question revolves around managing time and task allocation within an Agile framework when a team finishes early, not about addressing existing code quality issues or technical shortcomings. There's no mention of code quality, lack of tests, duplicated code, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about time tracking and estimation practices in an agile context, specifically using Rally for project tracking. While it touches on agile practices and time management, it does not explicitly or implicitly relate to Technical Debt (TD). There is no mention of poor-quality code, lack of tests, documentation issues, or other TD indicators. The focus is on improving estimation accuracy and handling work when finishing early, which does not align with the criteria for TD in ASD."
    },
    {
        "id": 6717,
        "title": "Is imposing \"impossible deadlines\" a Management Technique?",
        "body": "<p>I am a developer aiming to become a manager. I want to know if the following is a valid management technique (within reasonable parameters, to be determined), I want to know how to deal with it and to use it or not.</p>\n\n<p>A group of developers is given a task that has a hard deadline of one week. Everyone knows that is impossible to achieve, concerns are raised, people speak up, but the deadline stands.</p>\n\n<p>One week later, of course, the task is not finished. The deadline is moved another week further, and so on...</p>\n\n<p>Could this actually be a management technique to create a sense of urgency to actually get the task done in the least possible amount of time, having management knowing full well all along that the imposed deadlines are impossible to meet?</p>\n",
        "score": 35,
        "creationdate": "2012-10-03T14:24:58.203000",
        "viewcount": 13990,
        "tags": "|time-management|",
        "answercount": 15,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon time management difficulties, a common indicator of technical debt, it primarily focuses on a hypothetical management technique involving impossible deadlines.  It lacks a real-world example of technical debt in an Agile context. There is no description of existing code, processes, or project details that would allow for an assessment of technical debt. The scenario is purely hypothetical and doesn't meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about management techniques and does not explicitly or implicitly relate to Technical Debt (TD). It does not describe an existing scenario based on lived experience, nor does it define any TD indicators. Additionally, there is no mention or context of Agile Software Development (ASD). Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 7867,
        "title": "Best Metrics to Show the Value of Fixing Bugs",
        "body": "<p>My software development group has spent a significant amount of time recently on fixing existing bugs instead of working on new development.  </p>\n\n<p>Using our bug tracking software, I can get data on how many total bugs were fixed by time period and which areas of the software had the most bugs reported.</p>\n\n<p>What is the most useful information I can extrapolate from these results?  I know there is a lot of material available about performance metrics, but I am trying to get ideas on which would be most helpful for this situation.</p>\n\n<p>Essentially, I want to be able to demonstrate the effectiveness of the recent time that we've spent dedicated to bug fixes. For me, it's not enough to just say that we were able to fix more bugs, I want to be able to show a dramatic overall improvement in the software. For example, would it be best to measure the decreasing rate of customer complaints? If not, what is the best application of data related to software bug fixes?</p>\n",
        "score": 12,
        "creationdate": "2012-10-19T21:06:54.267000",
        "viewcount": 5505,
        "tags": "|metrics|reporting|bugs|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where a software development group has spent time fixing bugs, which is a form of technical debt remediation. The author is looking for metrics to demonstrate the effectiveness of this effort, indicating an agile context where iterative improvements are tracked. The discussion implicitly refers to poor-quality code as a TD indicator, and the focus on bug fixing aligns with ASD principles of continuous improvement. While not explicitly mentioning agile, the context of iterative development and bug fixing within a team suggests an agile environment. The discussion could be more explicit about the agile methodology used, but it is still relevant.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The team spent significant time fixing bugs, indicating the existence of accumulated technical debt.  The question focuses on demonstrating the value of addressing this debt, which aligns with the research topic. While there's no explicit mention of Agile, the context of a software development group suggests an implicit connection to software development practices, which could include Agile. The focus is on measuring the impact of bug fixes, a key indicator of TD reduction.  The lack of explicit mention of Agile methodologies slightly lowers the relevance rating.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on metrics for demonstrating the value of fixing bugs, which is related to software quality but does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of Agile Software Development (ASD) practices or context, making it unrelated to the study's focus on TD in ASD."
    },
    {
        "id": 7904,
        "title": "How to better balance resources in a cross-functional agile team?",
        "body": "<p>I am the project manager for a team composed of employees who were hired specifically as QA or development prior to agile/scrum being adopted by the organization. Just for background, I came into the organization after the implementation of scrum. </p>\n\n<p>The problem we're having is at various times during a sprint, team members will announce that they have no work to do. There are still many items that aren't \"done\", but either someone is already working on them or they're not in the phase that person feels they're responsible for - developers have no work because everything is in QA or vice versa. Previously, they would just pull more items off of the product backlog - no team commitment, no discussion, they were allowed to just pull something else in to the sprint. That, I put a stop to immediately, explaining by doing that they were committing to things for everyone else on the team without asking them first. I should also mention that the team rarely meets their original commitment set in planning, let alone the extra items pulled in, because things get stuck in phases even though there are team members claiming they have nothing to work on.</p>\n\n<p>The idea of a single team working together to get everything to \"done\" has been explained to them, but developers say they weren't hired to do QA and QA says the developers just get in their way when they try to help on QA tasks and they don't understand how to properly test from a QA perspective. I've also explained that developers don't necessarily have to test and testers don't necessarily have to develop, but that the entire team should be working (through self-management) to either get committed items to \"done\" or doing something to benefit the team in the future (updating docs, maintaining the build/CI systems, improving automated testing, etc.) Regardless, we still get team members saying they don't have anything to do and want to pull new items in from the product backlog. </p>\n\n<p>I feel that what they're really saying is:\n1. There's nothing left in this sprint that I WANT to do.\n2. I really want to get a head start on that so I have less work to do next sprint. </p>\n\n<p>As a project manager, none of the team members directly report to me. I have discussed this with their managers individually and while they agree this is a problem, they feel that they can't force this. </p>\n\n<p>The most direct result of this is that QA is constantly behind. When we start a sprint there are already several items ready for QA. While they work on these items, things keep piling up and at the end of the sprint we've got a giant set of items in QA and developers saying they have nothing to do. Of course with items not getting finished in a sprint, the next sprint comes and the problem keeps getting slightly worse and worse as QA can't keep up. </p>\n\n<p>Does anyone see any course of action here? Thanks in advance.</p>\n",
        "score": 19,
        "creationdate": "2012-10-24T17:18:57.307000",
        "viewcount": 3051,
        "tags": "|agile|scrum|team-management|team-building|cross-functional|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an Agile team where developers and QA testers are not collaborating effectively, leading to a backlog of QA tasks and developers with idle time.  While not explicitly mentioning 'technical debt', the situation implicitly points to it through indicators like QA backlog (poor quality due to insufficient testing), and inefficient workflow (lack of cross-functional collaboration). The team's inability to complete committed work also suggests a time management issue, another indicator of TD. The context is clearly within an Agile framework (Scrum is mentioned). The author's description of the problem and its consequences fulfills the criteria for an existing scenario and a defined TD indicator.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is highly relevant to Technical Debt (TD) in Agile Software Development (ASD). It explicitly addresses issues related to time management difficulties and low team morale, which are indicators of TD. The scenario described is based on lived experience, detailing the challenges faced by a cross-functional agile team in balancing resources and meeting sprint commitments. The discussion is clearly situated within an ASD context, mentioning scrum and agile methodologies. The project manager's account provides actionable insights into the real-world implications of TD in an agile setting, making it an excellent fit for the study."
    },
    {
        "id": 7912,
        "title": "How can I identify quality objectives and associated metrics?",
        "body": "<p>Our project was on ENROLLMENT SYSTEM DEVELOPMENT. We are 4 members and we are adding new software to improve the system to give clash free timing to students.</p>\n\n<p>Stakeholders are:</p>\n\n<ul>\n<li>My teammates </li>\n<li>The University</li>\n</ul>\n\n<p>Here are the time constraints:</p>\n\n<ul>\n<li>Project Start Date: August 30, 2012.</li>\n<li>Projected Finish Date: October 21, 2013</li>\n</ul>\n\n<p>But the problem is that now we're having trouble approaching these 3 questions:</p>\n\n<ul>\n<li><p>What Quality Objectives would be needed for the project?</p></li>\n<li><p>What metrics should we use to measure the quality of this project?</p></li>\n<li><p>What actions should we take to ensure Quality Assurance of this<br>\nproject?</p></li>\n</ul>\n\n<p>The answer to these questions are not in my syllabus.</p>\n",
        "score": 0,
        "creationdate": "2012-10-26T02:29:34.730000",
        "viewcount": 3698,
        "tags": "|metrics|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a software development project with time constraints, it does not explicitly or implicitly address Technical Debt.  It focuses on defining quality objectives and metrics, which are important aspects of software development but do not directly relate to the presence or management of technical debt. There is no mention of Agile methodologies. The question is primarily seeking advice rather than describing an existing scenario with real-world examples of TD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on identifying quality objectives and metrics for a project, without any explicit or implicit mention of Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no reference to Agile Software Development (ASD) methodologies or practices. The questions posed are general and do not provide a real-world scenario related to TD in ASD. Therefore, it does not meet the inclusion criteria for the study."
    },
    {
        "id": 7954,
        "title": "How do you manage technical debt?",
        "body": "<p>In real world, business initiatives always take higher priority as there are associated ROIs and deliver something tangible to the users. But there are technical initiatives and projects that need to be done to keep up with the different versions of software, upgrading to a newer platforms, architecture re-factoring etc., </p>\n\n<ol>\n<li>How can we plan, prioritize and manage such competing initiatives?</li>\n<li>Is there a model to quantify technical debt and its impact to the business?</li>\n</ol>\n",
        "score": 21,
        "creationdate": "2012-11-01T04:55:55.430000",
        "viewcount": 1937,
        "tags": "|planning|prioritization|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion explicitly mentions technical debt and the need to address it alongside business initiatives. It describes a real-world scenario where technical tasks compete with business priorities, which is a common issue in Agile development. The question implies the existence of TD indicators such as outdated software versions and the need for refactoring. The context is clearly within software development, which is often associated with Agile methodologies.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly addresses technical debt management within a real-world context.  It highlights the conflict between business priorities and the need for technical improvements (a key indicator of TD). While it doesn't explicitly define a TD indicator in the body, the description of 'upgrading to newer platforms, architecture refactoring etc.' implicitly points to TD. The questions about planning, prioritizing, and quantifying TD further solidify its relevance to the study.  The lack of specific examples keeps it from being 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions 'technical debt' explicitly but does not provide a real-world scenario or lived experience. It is primarily seeking advice on managing technical debt and quantifying its impact, without describing any specific instance or example of technical debt in an Agile Software Development context. Therefore, it does not meet the inclusion criteria for describing an existing scenario or being related to ASD."
    },
    {
        "id": 8059,
        "title": "How to keep a requirements gathering discussion focused on business needs and not technical details?",
        "body": "<p>I'm certain that acquiring the business requirements from the clients and providing the work items for the developer teams are always a headache for experienced business analysts as well.</p>\n\n<p>A few days ago, it was my first time to talk my clients, who ask us to develop an ordering application for the Windows platform. After that I was recommended to carry on the necessary research and summarize the business needs.</p>\n\n<p>I am a fresh graduate of Information Engineering and I don't know much about software development processes, and I have less experience in discussing business proposals with clients about reducing operational costs and process improvements. Nevertheless, I had to draft a wireframe for our application along with all the possible use cases and architectural specifications.</p>\n\n<p>At the moment it is hard for me to distinguish between the business analyst role and the programmer role, which I also have in our 3 men team, but I have to figure this out in order to be able to communicate with our clients.</p>\n\n<p>So, what is the best way to collect business requirements? </p>\n\n<p>Is there a good way to translate business requirements to software development requirements?</p>\n\n<p>How can I gather business requirements without getting into deep technical discussions?</p>\n",
        "score": 7,
        "creationdate": "2012-11-15T04:30:42.487000",
        "viewcount": 4044,
        "tags": "|project-team|communication-management|business-analyst|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development, it primarily focuses on the process of gathering business requirements and the distinction between business analyst and programmer roles.  There is no mention of technical debt, either explicitly or implicitly through indicators like poor code quality, lack of tests, or other issues related to TD. The post is advice-seeking and lacks real-world examples of existing scenarios, failing to meet inclusion criteria 2 and 4.  It does not describe a TD indicator (criterion 3).",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on gathering business requirements and distinguishing roles between business analysts and programmers. It does not relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about understanding business needs and translating them into technical requirements, which does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 8098,
        "title": "Handling bugs in the Scrum process?",
        "body": "<p>I have recently gone live with a big project. To meet a tight deadline some technical debt was accumulated but the true extent only became apparent after go live. </p>\n\n<p>As this is intended to be a scalable application, these problems which could be deep seeded into the code have to be resolved. </p>\n\n<p>Should these issues be grouped under user stories / child tech tasks and be accounted for within the sprint process? I think not as it is fixing existing functionality and should be logged as tasks / child tasks outside the sprint process. Or should I add them to account for what the team is doing? </p>\n\n<p>Many thanks. </p>\n",
        "score": 19,
        "creationdate": "2012-11-21T09:25:25.083000",
        "viewcount": 2505,
        "tags": "|agile|scrum|bugs|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions 'technical debt' accumulated to meet a deadline. It describes an existing scenario ('gone live with a big project') and focuses on how to handle the resulting bugs within a Scrum process (an Agile methodology).  The post implicitly defines a TD indicator (bugs/problems deep-seeded in the code impacting scalability), making it relevant to the study. While it doesn't explicitly detail the nature of the debt beyond 'bugs', the context clearly points to a real-world experience of TD in an Agile environment.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions 'technical debt' accumulated during a project to meet a tight deadline. It describes an existing scenario based on lived experience, as the author discusses a real-world project that has gone live. The TD indicator is defined through the mention of 'deep seeded' problems in the code that need resolution. The discussion is related to Agile Software Development (ASD) as it references the Scrum process and sprint management. However, the discussion lacks depth in exploring the implications of TD on the project, which affects its relevance rating."
    },
    {
        "id": 8171,
        "title": "How to improve and facilitate prioritization of bug fixes?",
        "body": "<p>In a long-term software project with frequent releases, end-users regularly report bugs and defects in the product. When the reported bug is highly critical, the fix is generally developed and released right away. Otherwise the bug is recorded into a bug-tracking system, which is basically a list. One of the tasks of the product owner is to prioritize this list and decide what fixes to include in the next release.</p>\n\n<p>The difficulty of prioritizing defects will increase along with the number of reported defects. Specifically, it is difficult to:</p>\n\n<ul>\n<li>Estimate implications of each bug (including risk, technical complexity, etc.)</li>\n<li>See the whole picture : How stable is the product? Did the quality drop with the last release? etc.</li>\n<li>Identify duplicate bugs</li>\n</ul>\n\n<p>What process or tool can the product owner (and the team) implement to facilitate (and potentially improve) prioritization of bug fixes? What are the advantages/disadvantages of these processes or tools?</p>\n",
        "score": 11,
        "creationdate": "2012-12-02T01:09:50.133000",
        "viewcount": 3093,
        "tags": "|software-development|bugs|prioritization|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in managing bugs and prioritizing fixes in a software project, it does not explicitly or implicitly refer to Technical Debt.  It focuses on process improvement for bug prioritization, lacking any indicators of TD such as poor code quality, lack of tests, or other TD-related issues.  There is no mention of Agile methodologies either.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the prioritization of bug fixes in a software project, which is a common challenge in software development. However, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or duplicated code. The discussion is more about process improvement for bug prioritization rather than addressing TD. Additionally, there is no mention of Agile Software Development (ASD) methodologies or context, making it unrelated to the study's focus on TD in ASD."
    },
    {
        "id": 8556,
        "title": "Team velocity fluctuates a lot, how to find the root cause?",
        "body": "<p>I have plotted my team burn up chart and its velocity per iteration. To me it looks really bad (velocity fluctuates a lot). What should I be looking for to diagnose the root cause of this behaviour?</p>\n\n<p><img src=\"https://i.stack.imgur.com/YpbT0.png\" alt=\"BurnUpChard and VelocityPerSprint \"></p>\n",
        "score": 12,
        "creationdate": "2013-01-30T10:06:26.100000",
        "viewcount": 5172,
        "tags": "|scrum|agile|metrics|burn-charts|velocity|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion presents a real-world scenario of fluctuating team velocity in an agile context, evidenced by the burn-up chart. While not explicitly mentioning technical debt, the fluctuating velocity can be an indicator of underlying issues such as poor code quality, lack of testing, or other technical impediments that are often associated with technical debt. The context is clearly within Agile Software Development, making it relevant to the study.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly relates to Agile Software Development (ASD) through the mention of a burn-up chart and velocity per iteration. While not explicitly mentioning 'technical debt', the fluctuating velocity implicitly suggests underlying issues that could be indicators of TD.  For example, inconsistent velocity might stem from unexpected bugs due to poor code quality or insufficient testing, both indicators of TD. The discussion presents a real-world scenario based on the author's experience with their team's velocity.  It lacks explicit definition of a TD indicator, but the implied connection between fluctuating velocity and underlying code quality issues makes it relevant. ",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on diagnosing the root cause of fluctuating team velocity, which is a common concern in Agile Software Development. However, it does not explicitly or implicitly relate to Technical Debt (TD). There is no mention of TD indicators such as poor-quality code, lack of tests, or documentation issues. The discussion lacks a real-world scenario related to TD and does not provide any evidence of TD in the context of ASD. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 8793,
        "title": "What to do with incomplete stories that depend on customers",
        "body": "<p>We're starting with scrum, user stories, and agile. Some of our tasks require final testing from our customers to verify that they are completed according to their needs, but sometimes they don't complete the testing, or respond, for well over a week (or 3). What is the best way to handle these tasks for QA? Can we close the task as complete after X days? Should we have the sales rep remind them a couple times? We're trying to load our sprints 1 week at a time, would having a larger, month-long project to push these things to be a good option?</p>\n",
        "score": 8,
        "creationdate": "2013-02-26T23:14:22.147000",
        "viewcount": 1092,
        "tags": "|sprint|customer|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development (customer delays impacting sprint completion), it does not explicitly or implicitly refer to technical debt.  The core issue is project management and customer interaction, not code quality or technical shortcomings. There's no mention of poor code, lack of tests, duplicated code, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing incomplete user stories in an Agile context due to customer delays. It does not explicitly or implicitly relate to Technical Debt (TD) as it lacks references to poor-quality code, lack of tests, documentation issues, or other TD indicators. The focus is on process management rather than TD in Agile Software Development."
    },
    {
        "id": 8809,
        "title": "Why does Pivotal Tracker discourage estimating points for bugs and chores?",
        "body": "<p>Pivotal Tracker \"strongly discourages\" estimating velocity points for bugs and chores \u2013 you have to change a setting and accept a warning to be able to do it.</p>\n\n<p>They explain why <a href=\"https://www.pivotaltracker.com/help/faq#whycantiestimatebugsandchores\">here</a>, but I just don't understand it. Here is an excerpt:</p>\n\n<blockquote>\n  <p>By measuring velocity in terms of features only, Tracker can estimate how much real, business-valued work can be completed in future iteration, allowing you to predict when project milestones might be achieved</p>\n</blockquote>\n\n<p>Chores and bugs take time. How can ignoring this <em>help</em> you to predict when a milestone will be reached?</p>\n\n<p>Say you need to complete three more features to get to the next milestone, and you also need to complete a chore (because one of the features can't be started until that chore is done)... How could discounting the time needed for the chore <em>help</em> you to estimate when the milestone will be reached?</p>\n",
        "score": 25,
        "creationdate": "2013-02-28T12:49:41.563000",
        "viewcount": 6869,
        "tags": "|agile|estimation|velocity|pivotal-tracker|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions time management difficulties in software development, relating to estimating project milestones, it does not explicitly or implicitly discuss Technical Debt.  There is no mention of code quality, lack of tests, duplicated code, lack of documentation, or other indicators of technical debt. The core issue is project management and estimation, not technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the estimation practices in Pivotal Tracker, specifically regarding why bugs and chores are not estimated in terms of velocity points. While it touches on time management and project planning, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, there is no mention of Agile Software Development (ASD) practices or methodologies, making it unrelated to the context required for inclusion."
    },
    {
        "id": 9287,
        "title": "Should the same person do the testing who did the development?",
        "body": "<h2>Background</h2>\n\n<p>We have 50 employees who are working on different projects in a team of 3-4 people. In my firm the testing is done by the developers. We have 2 or 3 products with a large code base that we constantly modify while we add new functionality.</p>\n\n<h2>Question</h2>\n\n<p>Should the same person do the testing who did the development, or should another team member do the testing?</p>\n",
        "score": 7,
        "creationdate": "2013-05-31T14:46:54.073000",
        "viewcount": 2583,
        "tags": "|roles|quality-management|testing|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions software development practices and a large codebase, it does not explicitly or implicitly address Technical Debt.  The question focuses on testing methodologies and team organization, not on the existence or management of technical debt within an Agile context. There is no mention of code quality issues, lack of documentation, time constraints, or other indicators of technical debt.  Although the context implies an existing scenario, it lacks any description of TD indicators.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on the practice of whether developers should test their own code, without explicit or implicit references to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of Agile Software Development (ASD) methodologies or context. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 9338,
        "title": "Create team activities that will lead to an improved documentation process",
        "body": "<p>One of my goals for this year is to try to improve the documentation process within the R&amp;D-department. My first step have been to sit down with each developer and talk about documentation in general and how they feel about our current documentation process.</p>\n\n<p>The (almost) unanimous response I got was;</p>\n\n<ol>\n<li>I can't find the documentation I'm looking for.</li>\n<li>I don't trust the documentation I find as it is probably outdated\nbecause nobody updates documents once they are created.</li>\n<li>Process? Well we put whatever document we create in the documents\nfolder and that folder is a mess...</li>\n<li>I miss information related to requirements, design and implementation.</li>\n<li>Creating documents can be hard. Document templates would help.</li>\n<li>It is very important that we document what we should do and what we have done!</li>\n</ol>\n\n<p>This is terrible! Because this means that whatever documentation that is created is \"worthless\". The good thing is that I there is a common urge from the team to actually fix this.</p>\n\n<p>We have a team building activity coming up in two weeks and my manager have given me a few hours for discussions around this topic. The question is - <strong>how would you spend these hours to make sure that you got the best result?</strong></p>\n\n<hr>\n\n<p><em>The background to this is that I a while back asked a question on how to resolve the problem of a non-existent pseudo process, <a href=\"https://pm.stackexchange.com/questions/8311/how-do-i-improve-the-development-process-when-the-only-spec-is-a-slogan-from\">How do I improve the development process when the only &#39;spec&#39; is a &quot;slogan&quot; from management</a>.</em></p>\n\n<p><em>As a consequence I have started working more on involving the team around the problems that I see. And less of my just keep presenting solutions to problems they haven't really thought about.</em></p>\n",
        "score": 3,
        "creationdate": "2013-06-10T11:37:38.353000",
        "viewcount": 2556,
        "tags": "|documentation|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where the team faces issues with documentation, a clear indicator of technical debt. The team's feedback highlights problems like outdated and hard-to-find documentation, lack of process, and missing information, all of which are related to TD. The context is within an R&D department, which implies an agile environment. The author is trying to improve the process, which is a common goal in agile teams. The discussion is not excellent because it focuses more on the problem than on the solution, but it is still a good example of TD in an agile context.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion highlights problems with documentation, a key indicator of technical debt, it does not explicitly or implicitly mention Agile Software Development.  The focus is on improving documentation processes generally, not within an Agile framework.  There's no mention of sprints, iterations, or other Agile methodologies.  Therefore, it fails to meet inclusion criterion 4.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of poor documentation practices, which is a recognized indicator of TD. It describes an existing scenario based on lived experience, as the author shares feedback from developers about the current documentation process. The discussion is related to Agile Software Development, as it involves team activities and process improvement, which are common in agile contexts. However, the discussion lacks depth in directly addressing agile methodologies or specific TD indicators, which slightly reduces its relevance."
    },
    {
        "id": 9538,
        "title": "What if you finish all stories before sprint ends?",
        "body": "<p>What we should do if we run out of stories during sprint (e.g we are still learning what is our true velocity)? Can programmers pick some unscheduled bugs to fix or should we end sprint prematurely? </p>\n\n<p>What if one person still is working on his task when all others already finished? Should they all help to finish that story or try to fill up time with some techical tasks (try to reduce technical debt)?</p>\n",
        "score": 13,
        "creationdate": "2013-07-13T09:52:05.293000",
        "viewcount": 13730,
        "tags": "|scrum|agile|sprint|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion implicitly addresses technical debt. While not explicitly mentioning 'technical debt,' the question of using remaining sprint time to address technical tasks (reducing technical debt) directly relates to the concept.  The scenario is based on a real-world experience of a team finishing sprint tasks early. The Agile context is clear, as it discusses sprint planning and velocity.  The lack of explicit detail on the nature of the technical tasks prevents it from being classified as 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it mentions reducing technical debt as a potential activity when team members finish their tasks early. It describes an existing scenario in Agile Software Development (ASD) where the team is learning their true velocity and considering how to handle spare time in a sprint. The discussion implicitly defines a TD indicator by suggesting technical tasks to reduce TD. However, the discussion lacks depth in exploring TD indicators and solutions, which affects its relevance rating."
    },
    {
        "id": 9631,
        "title": "Is there an Agile methodology that fits with large refactoring?",
        "body": "<p>Some background: At work, there are several epic (user visible) stories whose effort will be greatly reduced by improving the roles and permissions infrastructure in our code base. However, the effort of shoe-horning any one of these epics into existing infrastructure is less than the effort of improving the infrastructure.</p>\n\n<p>Our team has been tasked with improving our roles and permissions. Additionally, since we would like to follow an Agile methodology, we have been given one of the mentioned epics to work on and are attempting to follow Scrum while building it. However, we are struggling with coming up with user stories that produce work that:</p>\n\n<ul>\n<li>is user facing (as all user stories should be),</li>\n<li>improves our infrastructure in any significant way, and</li>\n<li>fits into one sprint.</li>\n</ul>\n\n<p>It seems to be a 2 out of 3 deal: Either we make things user facing and fit into one sprint at the expense of making things harder to fix in the future, or we improve things in 1 sprint that we can't show anybody, or we improve things and make changes user facing but it doesn't fit into 1 sprint.</p>\n\n<p>This makes me wonder if there is an Agile methodology that would work for us better than Scrum. Do you have any suggestions?</p>\n",
        "score": 10,
        "creationdate": "2013-07-25T21:37:47.757000",
        "viewcount": 3400,
        "tags": "|scrum|agile|software-development|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The author describes a situation where addressing a large refactoring effort (improving roles and permissions infrastructure) is necessary to reduce the effort of future epics.  The difficulty in fitting this refactoring into short sprints highlights the conflict between short-term sprint goals and long-term code maintainability, a key aspect of technical debt. The context is clearly within an Agile (Scrum) framework. While the author doesn't explicitly label the infrastructure issues as 'technical debt', the description strongly implies it. The focus is on a real-world scenario, not a hypothetical one.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses the issue of poor-quality code and infrastructure that needs improvement, which are indicators of TD. The scenario described is based on lived experience, as the author discusses a real-world challenge faced by their team. The discussion is related to Agile Software Development (ASD), specifically mentioning the use of Scrum and the difficulties in aligning it with large refactoring tasks. However, the discussion lacks depth in exploring the TD indicators and their impact, which affects its relevance rating."
    },
    {
        "id": 9674,
        "title": "Title/subject formalism in bug reports (standardising bug naming only): I was <context>, I did <action>, I got <actual behaviour>",
        "body": "<h2>Intro</h2>\n\n<p>We use different formalisms in <strong><em>titles</em></strong>/<em><strong>subjects</em></strong> for different purposes (story, feature, test), but we have no formalism for bug reports...</p>\n\n<p>We are investigating the advantages of a <strong><em>standardised title format for bugs</em></strong>.</p>\n\n<h2>Different formalisms for <em>titles</em>/*subjects* in use, practically</h2>\n\n<p>We use with quite a success these formalisms in <strong>titles</strong>/*<em>subjects</em>* .</p>\n\n<h3>Story title</h3>\n\n<p>For Scrum stories, we use the following title formalism:</p>\n\n<pre><code>As a &lt;role&gt;, I want &lt;goal/desire&gt; so that &lt;benefit&gt;\n</code></pre>\n\n<h3>Feature title</h3>\n\n<p>For FDD (Feature-Driven Development) features, we use the following title formalism:</p>\n\n<pre><code>&lt;action&gt; the &lt;result&gt; &lt;by|for|of|to&gt; a(n) &lt;object&gt;\n</code></pre>\n\n<h3>Tests formalism</h3>\n\n<p>For Acceptance Tests (behaviour), we use the following formalism:</p>\n\n<pre><code>GIVEN THAT &lt;conditions&gt;/&lt;initial state&gt;/&lt;context&gt; (no action)\nWHEN &lt;actions&gt; (performed by user)\nTHEN &lt;expected results&gt;/&lt;consequences&gt; (that the system does)\n</code></pre>\n\n<h2>Looking for a bug title formalism</h2>\n\n<h3>Title/subject formalism</h3>\n\n<p>For bug reports, we think we are going to adopt a title formalism close to:</p>\n\n<pre><code>I was &lt;context&gt;, I did &lt;action&gt;, I got &lt;actual behaviour&gt;\n</code></pre>\n\n<p><strong>I only focus here on the title, not the full description!</strong></p>\n\n<p>Advantages:</p>\n\n<ul>\n<li>homogeneity across teams (when bugs needs to be passed over)</li>\n<li>strictness for better description and understanding</li>\n<li>mapping of:\n<ul>\n<li>the bug's 'context' to the acceptance test's 'context'</li>\n<li>the bug's 'actual behaviour' to the acceptance test's 'expected results'</li>\n</ul></li>\n</ul>\n\n<p>Disadvantages:</p>\n\n<ul>\n<li>it is a change to introduce, document, promote, and followup in the project</li>\n<li>you name it</li>\n</ul>\n\n<h3>Guidelines for the title/subject</h3>\n\n<p>But this formalism is not enough for just a title, as it may need a few guidelines:</p>\n\n<ul>\n<li>should be as short as possible</li>\n<li>do not mention a technical component or feature, as the guess and confirmation is part of the investigation and not the purpose of the creation of the bug</li>\n<li>do not make any assumption or guess</li>\n<li>just basically describe as briefly as possible the context, action, and actual behaviour, because anyway it will be detailed in the full description</li>\n<li>do not not add any markup like [stuff] or (thing), because it hinders the reading</li>\n<li>do not add any team-specific keywords, as a bug is supposed to be passed from team to team</li>\n<li>do not try to solve the issue at the reporting phase, it is the task of the assignee</li>\n<li>bring the right balance/dichotomy between barely perimetered issue, and fully understood, as in one hand it is too vague, and on the other hand the resolution is almost finished</li>\n<li>stay meaningful</li>\n</ul>\n\n<h3>\u00a0Full description (not the goal of this post)</h3>\n\n<p>Of course, this is not the goal of this post, but in the full description of the bug free text), there will be:</p>\n\n<ul>\n<li>Context</li>\n<li>Steps to reproduce</li>\n<li>Actual behaviour</li>\n<li>Expected results</li>\n<li>Optionnally\n<ul>\n<li>links to docs</li>\n<li>logs</li>\n<li>diagrams</li>\n<li>screenshots</li>\n<li>...</li>\n</ul></li>\n</ul>\n\n<p>With all the fields of the bug tracker software, like affected/fix versions, severity, priority, links to other tickets, etc.</p>\n\n<p>But this is not the subject of this post...</p>\n\n<p>Let's get back to the bug <strong>titles</strong>/*<em>subjects</em>*.</p>\n\n<h2>Open questions on bug titles</h2>\n\n<ul>\n<li>Do you think it is worth to put up such a <strong>title</strong>/*<em>subject</em>* formalism in place?</li>\n<li>How do you <strong>name</strong> you bugs? (how you fully describe and manage bugs is not the goal of this discussion)</li>\n</ul>\n",
        "score": 2,
        "creationdate": "2013-08-06T09:17:42.880000",
        "viewcount": 434,
        "tags": "|process|bugs|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions software development processes and best practices, it does not focus on Technical Debt.  It primarily concerns standardizing bug report titles for improved clarity and consistency across teams. There is no mention of code quality issues, time management problems, or other indicators of technical debt.  The focus is on process improvement, not addressing existing technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on standardizing bug report titles and does not relate to Technical Debt (TD) or Agile Software Development (ASD). It lacks any mention of TD indicators or agile methodologies, making it irrelevant to the research study on TD in ASD."
    },
    {
        "id": 9717,
        "title": "How handle small refactorings and minor code base improvements in Scrum?",
        "body": "<p>How should be handle small improvements, should we include story for them in each sprint? Or should it be done outside of the sprint scope? I am talking here about things like Uncle Bob's boy scout rule. </p>\n\n<p>Other option could be to accommodate time in each ticket? </p>\n",
        "score": 2,
        "creationdate": "2013-08-14T08:13:58.087000",
        "viewcount": 322,
        "tags": "|scrum|tasks|user-stories|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions code improvements, which could be related to addressing technical debt, it primarily focuses on a process question within Scrum.  There's no description of an existing scenario with real-world examples of technical debt.  It's an advice-seeking question lacking concrete examples of technical debt indicators in an Agile context.  Therefore, it fails to meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about handling small refactorings and code improvements in Scrum, which could relate to technical debt management. However, it lacks explicit or implicit references to technical debt indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the discussion does not describe an existing scenario based on lived experience, but rather seeks advice on handling refactorings in Scrum. Therefore, it does not meet the inclusion criteria for technical debt in Agile Software Development."
    },
    {
        "id": 9809,
        "title": "Advice needed: best project management solution for a small web studio",
        "body": "<p>I am a web developer in a small web design studio (15-20 employees). It was founded back in 2005 and since that time we've made over 700 different sites (~500 projects, ~300 clients). I started working here in 2011, so I had not participated in any discussions over decisions to use any PM tools. Here's what we have now:</p>\n\n<ul>\n<li><p>A pile of tables filled with information about domains, hosts, hosting accounts, domain accounts, FTP access, admin panel access, etc. All this information is presented in quite a messy way on a local website.</p></li>\n<li><p>A small CRM made for internal use; to some extends it is capable of time tracking, global \"task\" tracking, it stores project-client relations, basic project information and monthly money flows.</p></li>\n<li><p>Redmine, which is used as a bug tracker for some of the projects.</p></li>\n<li><p>One shared mailbox.</p></li>\n</ul>\n\n<p>The problems are:</p>\n\n<ul>\n<li><p>We still have to maintain websites that we made several years ago (not all of them, hopefully, but still this can not be neglected). Some of them smell. Some require secret knowledge.</p></li>\n<li><p>Many projects have a huge backlog, it is not stored anyhow except mail history/documents; e. g. you can't tell precisely, whether local and testing versions are synced (without a file manager). You can hardly tell who designed the frontend, who programmed the backend; to learn that, you have to spend some time searching.</p></li>\n<li><p>An enormous load of important information is stored by mailserver, and messages are not assigned anyhow to projects/clients/issues in internal CRM/Redmine.</p></li>\n<li><p>The workflow is not yet stable and I guess it never was. Some sites have a precise spec, some do not; I guess, only a couple of them have VCS and 10-20 have passed the testing stage. Most of the testing often was done by clients themself, which is awfully bad.</p></li>\n<li><p>There is a lot of SEO information associated with almost every site; we have a few interfaces to manage cross-links and seo pages, but it was <strong>never</strong> something neat. </p></li>\n</ul>\n\n<p>Now we have faced all these problems, as it gets more stressful to work with old sites. I don't have any <em>big</em> hopes that one system can solve all these problems (<strong>almost certainly</strong> it will even get worse). But I believe that bird by bird all this mess can be puzzled out and organized. </p>\n\n<p>Strategies, products and workflows are welcome.</p>\n",
        "score": 2,
        "creationdate": "2013-08-29T09:53:52.600000",
        "viewcount": 424,
        "tags": "|communication|management|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario in a web development studio facing challenges related to technical debt. The author implicitly describes TD indicators such as messy documentation, lack of version control, and inconsistent testing practices. The context is clearly within an Agile environment, as the team is working on multiple projects and facing issues with workflow and backlog management. While the post is primarily seeking advice, it is based on a lived experience and provides sufficient evidence of TD within an ASD context.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in a small web studio facing significant challenges related to Technical Debt.  The lack of proper documentation, version control, testing procedures, and a disorganized workflow all point to implicit indicators of TD. While Agile is not explicitly mentioned, the context of a small web studio managing numerous projects suggests an implicit Agile or iterative development approach. The post clearly outlines existing problems, fulfilling the criteria for an existing scenario and defining multiple TD indicators.  The relevance is rated 'Good' instead of 'Excellent' because the connection to Agile methodologies is implicit rather than explicit.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about seeking advice on project management solutions for a small web studio. While it mentions issues like messy information management and workflow instability, it does not explicitly or implicitly relate to Technical Debt (TD) as defined by the protocol. There is no mention of Agile Software Development (ASD) practices or methodologies, and the problems described do not align with TD indicators such as poor-quality code or lack of tests. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 9926,
        "title": "How does a team learn a domain quickly and effectively on legacy applications?",
        "body": "<h2>Background</h2>\n\n<p>We have many legacy applications which are 10-15 years old.  The readability of the code is also challenging and many applications depend on other subsystems too. Documentation on these applications are not readily available, and are often not up to date. SME availability is also poor, and some SME's have left the company. Changing code in these applications without having deep domain information is also challenging, and we tend to miss some scenarios. Business folks are also new.</p>\n\n<h1>Question</h1>\n\n<p>With all of these challenges, how can team members learn the domain quickly and effectively?</p>\n",
        "score": 4,
        "creationdate": "2013-09-15T08:32:54.410000",
        "viewcount": 188,
        "tags": "|knowledge-management|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario with legacy applications, poor code readability, lack of documentation, and limited SME availability, all of which are indicators of technical debt. The context is within a team environment, implicitly suggesting an agile setting. While not explicitly mentioning agile, the challenges described are common in agile teams dealing with legacy systems. The question is about how to learn the domain quickly, which is a challenge faced by agile teams when dealing with technical debt.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt. The description of legacy applications with poor code readability, lack of documentation, and limited SME availability clearly indicates challenges stemming from accumulated technical debt.  The question focuses on strategies to overcome these challenges, which are directly related to managing the consequences of TD. While there's no explicit mention of 'technical debt', the context strongly suggests it as a central issue. The discussion is related to an existing scenario and is implicitly linked to Agile through the implied need for the team to quickly adapt and learn in an iterative manner, a core principle of Agile.  It lacks explicit mention of Agile methodologies, preventing it from being classified as 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on learning a domain quickly and effectively in the context of legacy applications. While it mentions challenges such as poor code readability and lack of documentation, which could be related to technical debt, it does not explicitly or implicitly discuss technical debt indicators or relate to Agile Software Development. The question is more about domain knowledge acquisition rather than addressing technical debt in an ASD context. Therefore, it does not meet the inclusion criteria for discussions on technical debt in agile environments."
    },
    {
        "id": 10078,
        "title": "Project scheduling based on use cases or technical tasks",
        "body": "<p>We have a web project going on and there are several use cases and we're now busy scheduling the development of the project.</p>\n\n<p>We're wondering what the best practices are about scheduling a project. Should we schedule our project based upon use cases or technical tasks? I know that scheduling based upon use cases is interesting for business because they can determine what each use case costs.</p>\n\n<p>However, for developers this mindset is usually not very easy to follow (they think in technical tasks). Let's say they have a technical task \"Setup Java projects\", this is a requirement for each use case, so it's hard to \"convert\" this into the functional aspect of the project.</p>\n\n<p>They can divide the story points for each use case, but let's say that business puts a specific use case on hold, then the project schedule wouldn't be correct anymore.</p>\n\n<p>So my question; what's the best way to schedule a project? Should it be based upon the functional part, the technical part or both?</p>\n",
        "score": 2,
        "creationdate": "2013-10-24T10:10:38.307000",
        "viewcount": 518,
        "tags": "|scheduling|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on project scheduling methodologies (use cases vs. technical tasks) in a web development project. While it touches upon the challenges of aligning business needs with technical implementation, it does not explicitly or implicitly discuss Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, documentation problems, time management difficulties, or low team morale\u2014all indicators of Technical Debt.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on project scheduling strategies, specifically whether to base schedules on use cases or technical tasks. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 10084,
        "title": "Balance between sharing creative control and leading the project",
        "body": "<p>I've been working on a project for almost a year now as the Project Manager. Initially, it was just myself. Over time, several others have been engaged in the project on a much smaller scope.</p>\n\n<p>The project is relatively heavily modularized, primarily to accommodate this type of an environment.</p>\n\n<p>In my experience, I really appreciate when people share creative control. It makes you feel like you're an important part of the project, you're contributions are more than just repetitive to-spec coding, and you get to have a little fun playing around with ideas. As such, I try to grant those I work with a heavy amount of creative control on their parts of the project.</p>\n\n<p>I'm beginning to think this is back-firing on me because there are some tasks, which should be relatively simple, that are turning out to be huge burdens because of the amount of discussion expected. I don't want to be a project dictator but when we are in \"crunch time\" and somebody goes off on a tangent with an idea and reports back that he doesn't think my solution is ideal, I find myself becoming aggravated. I am almost always an <em>extremely</em> laid back person so this is surprising to me. I don't let my professionalism slip and try to hide any negative notions to keep everyone happy.</p>\n\n<p>Many of these issues are more related to \"personal taste\" (think Design) than a technical, provable problem. As Project Manager, I am really dealt the burden of making sure this project is completed successfully. Overall, I just want to find a way to balance letting my fellow programmers have fun and enjoy their work but also move forward faster than a snail's pace. </p>\n\n<p><strong>Can anyone recommend some ways to establish a balance between letting the developers enjoy themselves while continueing to push out a product I feel comfortable delivering?</strong></p>\n",
        "score": 4,
        "creationdate": "2013-10-24T16:11:01.500000",
        "viewcount": 221,
        "tags": "|project-team|motivation|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon challenges in project management and team dynamics within a software development context, it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, documentation problems, time management difficulties, or low team morale\u2014all of which are indicators of Technical Debt. The core issue revolves around balancing creative control and project deadlines, which is a separate management concern unrelated to the research topic.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion does not explicitly or implicitly relate to Technical Debt (TD). It focuses on the balance between creative control and project management, particularly in terms of design preferences and team dynamics. There is no mention of TD indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no clear connection to Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 10126,
        "title": "How do you modify a delivered user story?",
        "body": "<p>If you delivered a user story in a previous sprint and then need to make changes to that feature in the current sprint, what do you do?</p>\n\n<p>Examples:</p>\n\n<ul>\n<li>Change the user interface (UI) of a screen.</li>\n<li>Change a technical detail in how the feature was previously implemented (i.e. refactoring).</li>\n</ul>\n",
        "score": 2,
        "creationdate": "2013-10-29T23:12:21.057000",
        "viewcount": 2416,
        "tags": "|scrum|planning|user-stories|sprint|change-management|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on managing changes to a delivered user story within an Agile framework. While it indirectly touches upon potential technical debt (e.g., refactoring might be needed due to earlier design flaws), it doesn't explicitly describe an existing scenario of technical debt or provide indicators of it.  The question is primarily about Agile process and change management, not about the presence or impact of technical debt itself.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about modifying a delivered user story, which is a common practice in Agile Software Development. However, it does not explicitly or implicitly relate to Technical Debt. There is no mention of poor-quality code, lack of tests, or other TD indicators. The focus is on process rather than addressing TD issues."
    },
    {
        "id": 10705,
        "title": "During a sprint, should we try to achieve 100% user story completion or 100% productivity",
        "body": "<p>We know that during every sprint, the team's primary goal is to achieve 100% completion of user stories which are part of the sprint backlog. But what happens in practice is that, development should be completed 2-3 days prior to sprint end, so that ample time can be spent to complete testing tasks. </p>\n\n<p>Now, due to pressure of completing all user stories, the team can't pull another one since they know they will not able to complete it. Which means, either developers have to analyze next sprint tasks (which still may leave some spare time) or have to sit idle.</p>\n\n<p>Some people may argue that planning was not good. But aren't we following Agile, where estimates may vary from actual (which leads to carry over of user stories) or maybe the scrum team completes all user stories in less time as compared to original plan.</p>\n\n<p>Suppose the team is pulling another user story and didn't complete it. There is argument, it doesn't look good from management perspective that user stories are getting carried over.</p>\n\n<p>Isn't the pressure of completing all user stories, which are pulled in a sprint, somehow decreasing the productivity of the team?</p>\n",
        "score": 15,
        "creationdate": "2014-01-31T07:06:43.903000",
        "viewcount": 5550,
        "tags": "|scrum|agile|planning|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion revolves around the pressure to complete all user stories within a sprint, which implicitly points to potential technical debt if teams rush to meet deadlines. The scenario describes a real-world situation within an Agile context, where the team faces a dilemma between completing all stories and maintaining productivity. The mention of carry-over stories and the pressure to avoid them indicates a potential for shortcuts or poor code quality, which are indicators of technical debt. The discussion is related to ASD, as it explicitly mentions sprints and user stories.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. While not explicitly mentioning 'debt,' the post highlights a scenario where the pressure to complete all user stories within a sprint leads to insufficient time for thorough testing. This suggests a potential accumulation of technical debt due to rushed development and inadequate quality assurance. The discussion is clearly set within an Agile context (mentioning sprints and user stories), and it describes a real-world scenario faced by the team.  The lack of explicit mention of specific TD indicators slightly lowers the relevance rating.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the challenges of achieving 100% user story completion versus productivity in a sprint, which is a common issue in Agile Software Development. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is more about sprint planning and productivity rather than TD, making it a false positive for the study on TD in ASD."
    },
    {
        "id": 10788,
        "title": "Are inefficient/missing tools an impediment and is it the Scrum master's duty to improve them?",
        "body": "<p>In Scrum, the Scrum master's duty is to \"remove impediments\". I think I understand what this means in terms of organizational and coaching issues. I understand that the SM watches the devs' backs and keeps disturbances from outside the team away.</p>\n\n<p>But, similar to <a href=\"https://pm.stackexchange.com/questions/5950/what-is-an-impediment-and-how-to-handle-them-and-internal-improvments-in-scrum\">this question</a>, I don't fully understand what it means with respect to internal and (development) process related issues. </p>\n\n<p>Is it or can it be a Scrum Master's responsibility to:</p>\n\n<ul>\n<li>setup/improve a code review software system?</li>\n<li>setup/improve the continuous integration process?</li>\n<li>provide scripts/macros/helper tools to make the development process easier/more efficient ?</li>\n</ul>\n",
        "score": 1,
        "creationdate": "2014-02-07T14:17:10.207000",
        "viewcount": 286,
        "tags": "|scrum|scrum-master|process-improvement|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions improving development processes within a Scrum framework (meeting criterion 4), it primarily focuses on the Scrum Master's role in addressing tool-related impediments.  It does not describe an existing scenario with real-world examples (failing criterion 2) and lacks a definition of a Technical Debt indicator (failing criterion 3). The question is hypothetical and advice-seeking, lacking a description of a lived experience with technical debt.  Although inefficient tools *can* contribute to technical debt, this connection is not explicitly made in the post.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the role of a Scrum Master in improving tools and processes within a Scrum framework. While it touches on aspects of Agile Software Development, it does not explicitly or implicitly address Technical Debt. The discussion is more about the responsibilities of a Scrum Master rather than any specific issues related to Technical Debt, such as poor-quality code or lack of documentation. Therefore, it does not meet the inclusion criteria for discussions related to Technical Debt in Agile Software Development."
    },
    {
        "id": 10804,
        "title": "How to monitor team members activity and effectiveness?",
        "body": "<p>I would like to measure the effectiveness and efficiency of my team members.  I'd like the measurement to be relatively objective and transparent, and I believe that some form of software would fulfill those objectives. </p>\n\n<p>How could I search for and evaluate such software?  What <strong>kinds</strong> of software incorporate these kinds of features\n(While software recommendations are out of scope because they change frequently, the underlying requirements should be more stable.) </p>\n\n<p>Is there software that might:\n - Diagram activity over the past year\n - Facilitate peer evaluation?\n - Measure improvement?</p>\n\n<p>Are there non-software procedures that would assist?</p>\n",
        "score": 0,
        "creationdate": "2014-02-10T08:53:18.243000",
        "viewcount": 1513,
        "tags": "|team-management|team|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on measuring team member effectiveness and efficiency using software, without mentioning Technical Debt or Agile Software Development.  While it indirectly touches upon team performance, which can be impacted by TD, there's no explicit or implicit connection to either TD or ASD. The question is primarily about project management tools and techniques, not about addressing technical debt within an agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on monitoring team members' activity and effectiveness, which does not directly relate to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the discussion does not describe an existing scenario based on lived experience, nor does it relate to ASD practices or methodologies. Therefore, it does not meet the inclusion criteria for the study."
    },
    {
        "id": 10927,
        "title": "Best way to deal with developers whose work is always unsatisfactory",
        "body": "<p>The problem is not in experience, </p>\n\n<p>The developers have all the necessary resources to work in a good dev environment (time, books, assistance, team leads, technical leads, senior devs, project managers).</p>\n\n<p>However, there are always serious problems in their work and I am forced to assign senior devs to check and fix the errors. </p>\n\n<p>I have tried to say them directly about that, but this an inefficient way to deal with the problem.</p>\n\n<p>Bugs are too specific to assign and wait for the solution as the problem lies in overall approach to software development process. </p>\n\n<p>Anyone can help to apply some methods for efficiently solving the problem?</p>\n\n<h1>Additional information from comments</h1>\n\n<blockquote>\n  <p>One of the major mistake they do is not apparent. If QA tests the system, all the features work right and in accordance with requirements. But, the performance sucks, which has its deep roots in code. When we analyze the code, we find that there are scripts which take much time to run, plugins which were copy-pasted without optimizing etc. Usually, we leave the devs complete freedom in implementation stage if they are not junior anymore\n  (<em>from a clarification in the comments</em>)</p>\n  \n  <p>most of the functional and non-functional requirements are well documented and daily meetings are held so that everyone understands how the system should behave. Most problems arise when the software is already in overall system testing stage or in production. Then, while analyzing we find that the dev has used short, but inefficient way to obtain a feature OR plugins were used which were not customized for the current project. It comes out that it is not a bug but insufficient attention and responsibility, which becomes a trend if I do not fix that.</p>\n</blockquote>\n",
        "score": 6,
        "creationdate": "2014-02-21T13:25:12.517000",
        "viewcount": 773,
        "tags": "|team-management|",
        "answercount": 9,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria.  It implicitly describes technical debt through poor-quality code (inefficient scripts, unoptimized plugins), lack of attention to performance (performance issues only discovered in later stages), and difficulties in time management (senior devs having to fix errors). The problem is presented as an existing scenario based on lived experience.  The comments provide further detail supporting the presence of technical debt, specifically highlighting the developers' use of 'short, but inefficient' methods and uncustomized plugins. While Agile methodology isn't explicitly mentioned, the description of daily meetings and documented requirements suggests an Agile-like environment. The lack of explicit mention of Agile is the reason for classifying it as 'Good' rather than 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it describes issues with poor-quality code, such as performance problems due to inefficient scripts and unoptimized plugins, which are indicators of TD. The scenario is based on lived experience, detailing real-world challenges faced by the team. The discussion implicitly defines TD indicators like inefficient code and lack of responsibility in development practices. It is related to Agile Software Development (ASD) as it mentions daily meetings, a common practice in agile methodologies. However, the discussion lacks depth in exploring solutions or insights into addressing the TD, which affects its relevance rating."
    },
    {
        "id": 11204,
        "title": "How can the economic efficiency of a scrum team be measured?",
        "body": "<p>I'm given the task to develop a measurement on how efficient our team is within our current development process (scrum). The measurement has to be done for the complete team not for individuals.</p>\n\n<p>My idea was to use the count of team members and velocity. But because velocity is a per team measurement the result will not be something useful.</p>\n\n<p>Any ideas?</p>\n",
        "score": 1,
        "creationdate": "2014-03-26T14:23:14.800000",
        "viewcount": 237,
        "tags": "|scrum|measurement|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Scrum (an Agile methodology), it does not address Technical Debt either explicitly or implicitly.  The question focuses on measuring team efficiency in a general sense, not on aspects related to code quality, maintainability, or other indicators of Technical Debt. There is no mention of code quality, lack of tests, duplicated code, or any other indicator of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on measuring the economic efficiency of a scrum team, which is related to Agile Software Development (ASD). However, it does not address Technical Debt (TD) explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about team performance metrics rather than TD in ASD."
    },
    {
        "id": 11479,
        "title": "Is it correct to split user stories by user types?",
        "body": "<p>I have two user account types: free and premium. Free users can upload one file per day. Premium users can upload unlimited numbers of files per day.</p>\n\n<p>Is it correct to split user stories by user types, as in the examples below?</p>\n\n<ul>\n<li><blockquote>\n  <p>As a Free User I can upload 1 file per day.</p>\n</blockquote></li>\n<li><blockquote>\n  <p>As a Premium User I can upload unlimited files per day.</p>\n</blockquote></li>\n</ul>\n",
        "score": 0,
        "creationdate": "2014-05-05T13:11:49.413000",
        "viewcount": 144,
        "tags": "|user-stories|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions user types and their functionalities, it does not relate to Technical Debt.  There is no mention of code quality, development challenges, or any indicators of technical debt. The focus is purely on user story decomposition within an Agile context, lacking the crucial element of technical debt for inclusion in the study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on splitting user stories by user types, which is a topic related to Agile Software Development. However, it does not address Technical Debt explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or any other indicators of Technical Debt. The discussion is purely about user story structuring, not about challenges or issues that could be classified as Technical Debt."
    },
    {
        "id": 11489,
        "title": "Can Quality be an adjustable constraint of an agile process?",
        "body": "<p>When defining the constraints of a project, the classical Iron Triangle defines three concurrent constraints: Resources, Scope and Time. Some more complex models (see <a href=\"http://en.wikipedia.org/wiki/Project_management_triangle#Evolution_of_the_Project_Constraint_Model\" rel=\"nofollow\">the Project Constraint Model</a>) add Quality to the above list. </p>\n\n<p>I understand that view in a classical waterfall view, where quality is a separate process. It makes perfect sense at some level when QA team is some independent entity. The QA team spend time to test product, count defects or missing features and ask for product changes to development team.</p>\n\n<p>But I wonder if it is meaningful to see Quality as an adjustment variable inside an Agile team. As I understand it, Quality should be on par with Velocity. Some structural property of a team that you can measure and try to improve but never really control.</p>\n\n<p>In the past I've seen managers trying to use it as a lever and that lead to unpredictable results. In some cases trying to lower Quality lead to higher Costs, Resources and Development times (defects were caught later in the process, and that has a well known cost). I've also seen exactly the opposite: well meaning teams trying to get higher Quality which translated to heavier processes (more code reviews for instance, or more tests written), and more complex definitions of done... but without any observable positive relationship with customer value reached in the end.</p>\n\n<p>In the end I believe Quality is not a true adjustment variable of Agile process inside of a team, as you can neither control it nor measure it, but merely something like Velocity that can be used for it's predictive power (how many bugs will there be in the final product?) but not really use as an adjustment variable.</p>\n\n<p>Is Quality a legitimate constraint in Agile teams? How should it be measured? Can it be used as an adjustment variable and how?</p>\n",
        "score": 0,
        "creationdate": "2014-05-06T10:06:57.810000",
        "viewcount": 1306,
        "tags": "|agile|quality|process-controls|constraints|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon quality in software development within an Agile context, it does not explicitly or implicitly address Technical Debt.  It focuses on the role of quality as a constraint in project management, exploring its measurability and controllability within Agile methodologies. There is no mention of indicators of technical debt such as poor code quality, lack of tests, duplicated code, etc.  The discussion is primarily theoretical and lacks real-world examples to support its claims.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion primarily focuses on the concept of quality as a constraint in Agile processes, comparing it to velocity and other project management constraints. While it touches on issues related to quality, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the discussion does not describe an existing scenario based on lived experience, but rather explores theoretical considerations of quality in Agile. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 11639,
        "title": "Small firm with 4 developers and 2 project managers in need of some guidance for project workflow",
        "body": "<p>I work as a developer in a small IT firm with 4 developers and 2 project managers.\nWe currently implement some sort of traditional project management, in which the workflow for a given project is as follows:</p>\n\n<ol>\n<li>Project manager gathers functional requirements with client</li>\n<li>Lead developer analyses the requirements and puts estimated execution times on these requirements.</li>\n<li>Project manager calculates project price based on estimated execution time + management overhead + some margin for error.</li>\n<li>The client agrees to the project price and is promised a deadline.</li>\n<li>The project gets developed and delivered.</li>\n<li>The client notifies us in case of bugs / need for additional features/ ...</li>\n<li>Eventually, the bug notifications/feature requests fade out.</li>\n</ol>\n\n<p>Every project we make is tailor made to the specific needs of our client. This means that task estimates are sometimes off (it's hard to estimate a task you've never done before) or that certain technical issues only arise when we are in the middle of development. This frustrates our project managers greatly, as this usually means we overshoot our estimated cost of development and our profit margin for the project slinks.</p>\n\n<p>However, the greatest frustration originates from missing deadlines which were promised to clients. This is because we have, at any given time, always 3 or more projects in active development. Next to that, the developers are often called directly by clients for questions/technical issues/emergencies. There's also the extra overhead when tasks are shifted from one developer to another, which then have to be explained to the developer that receives the task.</p>\n\n<p>Every week, one of the project managers assigns tasks to the developers that need to be finished that week to meet the deadlines. Of the 38 assignable work hours per developers, 4 hours are left unassigned to account for unforeseen events. There's also a new developer that just joined us three weeks ago, and he needs some technical help from time to time which also, on average, takes about 2 to 3 hours of my time every week.</p>\n\n<p>In conclusion, these 4 hours have so far never been sufficient. Communication with management, high priority bugs, ... takes longer than 4 hours every week. Management blames the developers for being unable to prioritize and says we should put more effort in making accurate estimates and actually meeting our deadlines.</p>\n\n<p>My question is this: what is the right approach here? How can we better estimate the scope and duration of a project and effectively set and meet its deadlines? What needs to change?</p>\n\n<p>Thank you in advance.</p>\n",
        "score": 6,
        "creationdate": "2014-05-26T17:10:49.667000",
        "viewcount": 556,
        "tags": "|planning|estimation|methodology|deadline|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario in an Agile context (small team, iterative development, project managers, sprints). It implicitly points to technical debt through indicators like inaccurate estimates, missed deadlines, and the need for constant bug fixes and feature requests. The author describes the challenges of managing multiple projects and the impact of context switching, which are common issues in ASD that can lead to technical debt accumulation. The question is not explicitly about TD, but the described situation clearly indicates its presence.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in a small IT firm using a traditional (non-Agile) project management approach.  While it doesn't explicitly mention 'technical debt,' it implicitly describes several indicators: inaccurate task estimations leading to cost overruns and missed deadlines (time management difficulties), frequent context switching between projects due to client calls and task reassignments (low team morale and inefficient workflow), and the need for a new developer to receive technical help (poor knowledge transfer and potential code quality issues). The lack of a formal process for handling unforeseen events also points to a lack of robust planning. Although not explicitly Agile, the problems described are highly relevant to the challenges of managing technical debt within a software development context and could benefit from Agile practices to mitigate these issues.  The discussion focuses on improving estimations and meeting deadlines, which are directly related to managing technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion does not explicitly or implicitly relate to Technical Debt (TD). It focuses on project management challenges, such as task estimation, deadline management, and communication issues, without mentioning poor-quality code, lack of tests, or other TD indicators. Additionally, there is no mention of Agile Software Development (ASD) practices or methodologies, making it unrelated to the ASD context required by the inclusion criteria."
    },
    {
        "id": 11771,
        "title": "How to combine continuous delivery cycle with iterations?",
        "body": "<p>I'm the leader of a small team (a few programmers, plus product manager) practicing continuous delivery. The development stages for features are:</p>\n<ol>\n<li><strong>Coding</strong>: A programmer prepares a branch with the feature, up to a specification. The feature is reviewed by Product Manager at the end of this stage.</li>\n<li><strong>Code review</strong>: Implemented with merge requests. A fellow programmer looks at the code, points out issues, programmer works to fix them. When everything is OK, the feature is integrated to main development branch.</li>\n<li><strong>Deployment</strong>: after passing the automated tests suite, the contents of main branch gets pushed to production servers. This currently happens twice a week.</li>\n</ol>\n<p>For planning our work, we're using 2-week iterations - Product Manager proposes feature to work on, we estimate them, and based on that allocate them to programmers for the iteration. My questions are:</p>\n<ol>\n<li><p><strong>During an iteration, what should we commit to</strong>? Right now we're saying that by the end of iteration, the coding (stage 1) has to be finished. This is because there might be some delay between coding and review (since the reviewer is also working on something).</p>\n<p>I'm a bit hesitant to include all 3 stages as required to finish, because this means by the end of iteration, everyone is working on code review, instead of the features following their development cycles unconstrained.</p>\n</li>\n<li><p>How much should be planned regarding <strong>delivery date</strong>? With the current setup, we can only say that the feature should be deployed <em>sometime during the next 3 weeks</em> (iteration + a window for code review and deployment). Can we do better? Should we?</p>\n</li>\n<li><p>Because of the above: how much should we plan regarding <strong>work ordering</strong>?   Should we, for instance, say during which days which features will be worked on, and reviewed? Or specify a strict order in which the features will be worked on during an iteration? Or give the order as priorities, but allow more freedom?</p>\n<p>Again, I don't want to constrain the programmers too much here. Detailed up-front planning doesn't sound very useful for me, and the actual ordering of work is something I'd rather give freedom at as well (perhaps with the priorities as a soft guideline). But I'm not sure if that makes the delivery date much more certain.</p>\n</li>\n</ol>\n",
        "score": 3,
        "creationdate": "2014-06-19T09:08:10.117000",
        "viewcount": 330,
        "tags": "|agile|planning|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions continuous delivery and iterations, which are relevant to Agile, it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, documentation problems, or any other indicators of technical debt. The post focuses on process improvement within an Agile framework, not on addressing existing technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the integration of continuous delivery with iteration planning in Agile Software Development. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The questions are about workflow and planning rather than TD management. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 11902,
        "title": "Calculating a running sum of subtask cost amounts",
        "body": "<p>How can a Summary task reflect a running sum of subtask input amounts?\n<img src=\"https://i.stack.imgur.com/b4wwM.jpg\" alt=\"subtasks to sum\"></p>\n",
        "score": -1,
        "creationdate": "2014-07-08T19:35:20.567000",
        "viewcount": 14349,
        "tags": "|ms-project|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on calculating a running sum of subtask costs within a project management context. While it mentions 'subtasks' and 'amounts', there is no mention or implication of technical debt, poor code quality, agile methodologies, or any other indicators of technical debt in software development.  The question is purely about project cost tracking and lacks any connection to the criteria for inclusion in the study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about calculating a running sum of subtask costs, which does not relate to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators or ASD context, making it irrelevant to the study's criteria."
    },
    {
        "id": 11980,
        "title": "How to track and manage tooling issues?",
        "body": "<p>In every complex project, we use a lot of external dependencies and tooling. Of course, they have bugs.</p>\n\n<p>Thanks to Github and the like, it is very easy to fork a project and track issues in libraries dependencies so that's not the scope of this question.<br>\nThe tooling however, can me much more complex to inspect, debug, and submit. Let's restrict here to the Open Source tooling.</p>\n\n<p>If the tool is only used for development and testing purposes, the priority for fixing these annoying bugs is quite low. That's why often, we don't even report the issue as soon as someone found a workaround.</p>\n\n<p>This is bad. We should keep track of the tooling issues as it explain a lot about the life of the project and having them somewhere show everyone that we <em>can</em> fix it, and it <em>will</em> be some value in these fixes. But in the other hand we can't put these issues in the same bucket that the project because they are unrelated and will pollute our issue tracker.</p>\n\n<p>Happiness of my team is one of my top priority, and I cry inside when I see them having to document complex rituals for random situations involving specific conditions met once a week or less.</p>\n\n<p>How do you handle the issues related to your tooling ? How do you prioritize these bugs ?</p>\n\n<p>I realize that my question is quite vague, but I hope it's clear anyway. I will be happy to improve it if you see some flows.</p>\n",
        "score": 3,
        "creationdate": "2014-07-18T14:01:59.540000",
        "viewcount": 348,
        "tags": "|planning|software-development|time-management|quality-management|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where tooling issues cause problems for the team, leading to workarounds and complex rituals. This implicitly indicates technical debt. The author mentions the impact on team happiness, which is a common indicator of TD. The context is within a software development project, which aligns with Agile principles. While not explicitly mentioning Agile, the focus on team happiness and iterative development suggests an Agile environment. The discussion is relevant to the study, although it could be more explicit about the Agile context.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt. The author describes \"annoying bugs\" in open-source tooling used in development, leading to workarounds and complex, poorly documented rituals.  This points to a lack of quality in the development process and the accumulation of technical debt. The context is implicitly related to Agile, as the focus is on team happiness and efficient workflow, common concerns in Agile development. While the discussion doesn't explicitly mention Agile methodologies, the emphasis on team morale and the desire for improved processes aligns with Agile principles. The author's description of the situation provides a real-world example, fulfilling the criteria for inclusion.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on managing tooling issues and prioritizing bugs in open-source tools used for development and testing. While it mentions team morale and documentation challenges, it does not explicitly or implicitly relate to Technical Debt (TD) in Agile Software Development (ASD). The discussion lacks references to TD indicators or an ASD context, making it a false positive based on keyword relevance."
    },
    {
        "id": 12091,
        "title": "How can we stop developers from working on stories that are not planned into the current sprint?",
        "body": "<p><strong>ORIGINAL QUESTION</strong></p>\n\n<p>We carefully plan out a sprint and decide which stories should be worked on however some developers are working on stuff outside of this planned work.</p>\n\n<p>This is undermining the whole process. </p>\n\n<p>What techniques can we use to encourage/enforce developers to stick to the planned stories?</p>\n\n<p><strong>UPDATES:</strong> </p>\n\n<ul>\n<li>Having talked to the developers we know they are working on the stories because they find them interesting or consider them important. </li>\n<li>We have tried no techniques so far except asking/telling the developers not to. </li>\n<li>Developers are working on both planned and 'personal' stories in parallel.</li>\n<li>The planned stories are sometimes completed but often not.</li>\n<li>The non-planned stories being worked on are legitimate pieces of work, just ones not prioritised into the current sprint. </li>\n<li>The extra tasks being worked on are not refactoring. We consider refactoring to be part of a story, not a separate story in itself. <a href=\"http://xprogramming.com/articles/refactoring-not-on-the-backlog/\" rel=\"noreferrer\">http://xprogramming.com/articles/refactoring-not-on-the-backlog/</a></li>\n<li>It is only a small number of developers in the team that are doing this, and they are a mixture of experienced and junior developers. </li>\n<li>We have contractors on the team however it is the permanent staff\nthat are going off-piste.</li>\n<li>The team has been working together for a few years although there are some new members of the team.</li>\n<li>We recently moved from Kanban to Scrum. We are in our 2nd Sprint. The developers in question have a history of going off-piste. I guess the original question might have been better worded: \"In the Scrum methodology, what techniques can we use...?\"</li>\n<li>The issue has been raised in the retrospective and the problem persists</li>\n</ul>\n",
        "score": 13,
        "creationdate": "2014-08-06T16:30:39.480000",
        "viewcount": 4301,
        "tags": "|scrum|agile|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where developers are working on unplanned tasks, which can be seen as a form of technical debt accumulation due to deviation from the planned sprint. The context is clearly within an Agile (Scrum) environment, as indicated by the mention of sprints and retrospectives. The updates clarify that the extra work is not refactoring, but legitimate tasks not prioritized, which implicitly suggests a potential issue with prioritization and planning, a common source of TD. While not explicitly using the term technical debt, the scenario and its implications align with the concept.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development (developers not sticking to planned sprint stories, planned stories not being completed), it does not explicitly or implicitly refer to Technical Debt.  The problem described is primarily a project management and team workflow issue, not a symptom of accumulated technical debt. There's no mention of code quality, lack of tests, duplicated code, or other indicators of technical debt.  Although the context is Agile (Scrum), the core issue is unrelated to technical debt.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through time management difficulties and challenges in software development, as developers are working on unplanned stories, which undermines the sprint planning process. It describes an existing scenario based on lived experience, as the team is facing real issues with developers not adhering to the planned sprint work. The discussion is related to Agile Software Development, specifically within the context of Scrum, as the team recently transitioned from Kanban to Scrum and is in their second sprint. However, the discussion lacks explicit mention of TD indicators like poor-quality code or lack of tests, which slightly reduces its depth in addressing TD."
    },
    {
        "id": 12303,
        "title": "Does it make sense to reopen closed User Stories in a Scrum project",
        "body": "<p>I was asked to adjust our ticket-workflow and I don't know if it's a good route that we're taking here. So I'd like to ask for your opinions.</p>\n\n<p>Our project is being developed based on a Scrum process with weekly sprints. As project management we use JIRA + Agile. We're around 10 people working on that project. However, around 50% are working from remote.</p>\n\n<p>Our current workflow of issues is:</p>\n\n<ol>\n<li>[Product Owner] Open </li>\n<li>[Developer] In Development </li>\n<li>[Developer] In Code Review</li>\n<li>[Tester] In Testing </li>\n<li>[Product Owner] In Acceptance </li>\n<li>[Product Owner] Done</li>\n</ol>\n\n<p>Currently, if a ticket / user story is marked as done, the code changes get merged into the master branch. We also at the moment can't reopen a closed (Done) ticket. If there is a defect which - maybe directly - can be connected to a previously closed ticket, we create a new one. However, we had a discussion on adding the possibility to reopen a ticket.</p>\n\n<p>From your point of view, does this fit within a Scrum-process? Does it make sense to reopen a closed / into master-branch integrated ticket? Should this only be applicable for tickets from the current Sprint or release? What are the advantages and disadvantages of such an approach?</p>\n",
        "score": 7,
        "creationdate": "2014-09-11T14:14:18.623000",
        "viewcount": 9501,
        "tags": "|scrum|jira|scrum-of-scrums|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a Scrum process and potential issues with the workflow (which could indirectly relate to technical debt if defects are consistently arising from previously 'done' user stories), it does not explicitly or implicitly discuss technical debt itself.  The core of the discussion is about workflow management within Jira and Scrum, not the presence or management of technical debt. There is no mention of code quality, lack of testing, duplicated code, or other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on the workflow and process management within a Scrum project, specifically regarding the reopening of closed user stories. While it mentions Agile Software Development (ASD) and uses tools like JIRA, it does not explicitly or implicitly address Technical Debt (TD) or any indicators of TD such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about process optimization rather than addressing or identifying TD in ASD."
    },
    {
        "id": 12504,
        "title": "What is the recommended practice for adding and organizing technical debt for a project?",
        "body": "<p>I am new to software engineering and looking for someone with agile experience to help me understand what the recommended practice is and why. If this question can be related to a better site please note that site please.</p>\n",
        "score": 3,
        "creationdate": "2014-10-21T16:56:51.777000",
        "viewcount": 141,
        "tags": "|software-development|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the title mentions 'technical debt', the body lacks any description of an existing scenario or real-world example of technical debt. It's primarily an advice-seeking question without any practical context or lived experience, thus failing to meet inclusion criteria 2 and 3.  There is no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is a general advice-seeking question without any real-world context or practical examples. It does not describe an existing scenario or provide any indicators of technical debt. Additionally, while it mentions agile experience, it does not relate to a specific scenario in Agile Software Development. Therefore, it does not meet the inclusion criteria."
    },
    {
        "id": 12581,
        "title": "Test capacity prohibiting stretch goals",
        "body": "<p>In my current team of 3 dedicated testers and 3 dedicated developers we often find ourselves in a scenario towards the end of our sprint (usually the last 2-4 days of our 2 week sprint) where the developers have nothing to do yet cannot commit to any stretch goals because the testers are at full capacity testing the code written in the first half of the Sprint.</p>\n\n<p>We have on occasion been asked to just commit to development work on a particular story but this feels wrong as it isn't potentially shippable at the end of the Sprint and we end up having a test only task for this story in the subsequent sprint. We have also tried asking the developers to test (this hasn't gone down well), but in any case the stretch task (based on the estimates) still won't fit into the Sprint.</p>\n\n<p>I have a feeling that this is a common problem in SCRUM but I can't any solutions to this. I would appreciate if anybody has any experience in dealing with this situation.</p>\n",
        "score": 5,
        "creationdate": "2014-11-07T09:26:49.493000",
        "viewcount": 326,
        "tags": "|scrum|agile|team-capacity|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in a Scrum team where testers' capacity limits the team's ability to take on stretch goals.  This implicitly points to a technical debt indicator: insufficient testing capacity leading to a bottleneck and preventing the team from completing additional work. The discussion explicitly mentions a Scrum framework, fulfilling the ASD criterion. While it doesn't explicitly define 'technical debt', the described bottleneck is a clear consequence of it. The lack of sufficient testing capacity is a common indicator of technical debt, making this a relevant discussion for the study.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of time management difficulties and challenges in software development, specifically the inability to commit to stretch goals due to testing capacity issues. It describes an existing scenario based on lived experience in a SCRUM team, which is a form of Agile Software Development. The TD indicator is the imbalance in workload between developers and testers, leading to inefficiencies and potential delays. However, the discussion lacks depth in exploring the TD implications or solutions, which affects its relevance rating."
    },
    {
        "id": 12758,
        "title": "How can we continuously integrate new features when the PO only determines whether a feature is \"done\" at the end of each Sprint?",
        "body": "<p>My team is having an issue with integrating software product features. Specifically, when do features get pull requested into our <em>integration</em> branch of code?</p>\n\n<p>Currently our understanding is:</p>\n\n<ul>\n<li>The Product Owner is the only person who can say that a feature or User Story is \"done\".</li>\n<li>The Product Owner makes his decision on whether a User Story is \"done\" at the end of sprint, during the Sprint Review Meeting.</li>\n</ul>\n\n<p>With the points above, it appears that pull requests for our \"done\" features or User Stories should occur at the end of our sprints. But how can this be the case?</p>\n\n<p>If we merge several features together after we get the Product Owner's approval, it may be the case that the features conflict or break each other. Now the features are no longer \"done\", additional work to resolve conflicts must be done, etc.</p>\n\n<p>How can we continuously integrate our new features (allowing us to do realistic integration testing) while retaining the fact that the Product Owner is the final say of whether or not a feature is \"done\"?</p>\n",
        "score": 10,
        "creationdate": "2014-12-04T19:28:09.537000",
        "viewcount": 2161,
        "tags": "|scrum|software-development|product-owner|definition-of-done|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where the team faces challenges with continuous integration due to the Product Owner's definition of done at the end of the sprint. This implies a time management issue and potential for integration conflicts, which are indicators of technical debt. The context is clearly within an Agile Software Development environment, as it mentions sprints, product owner, and user stories. While it doesn't explicitly use the term technical debt, the described situation is a common manifestation of it in agile teams.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions integration challenges in software development, it does not explicitly or implicitly refer to Technical Debt.  The core problem is about the timing of integration and the Product Owner's approval process, not about code quality, lack of testing, or other indicators of TD.  There's no mention of poor code quality, lack of documentation, or other symptoms of technical debt. The focus is on process improvement within an Agile framework, not on addressing existing technical debt.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of potential conflicts and broken features when merging code, which are indicators of TD. It describes an existing scenario based on the team's experience with integrating features in an Agile context, specifically mentioning sprints and the role of the Product Owner. The discussion highlights a challenge in time management and integration testing, which are relevant to TD. However, it lacks explicit mention of TD or detailed insights into the consequences of these issues, which slightly reduces its depth."
    },
    {
        "id": 14106,
        "title": "How to repay technical debt still delivering features?",
        "body": "<p>The picture I saw far too many times over my career. A team of developers in a company driven by non-technical management, practising scrum, severely pressured to deliver points and features by certain deadline therefore having no chance to concentrate on quality or dealing with technical debt. Not many developers if at all understand what is going on in depth of code, tests coverage is not sufficient so any attempt of refactoring anything leads to bunch of regressions. It takes more and more time for a frustrated team to add a feature and then even more time to figure out why this feature broke the product in several places and how to fix it without breaking in further.</p>\n\n<p>Management understands that something is not right and hires a new head of dev expecting him to bring improvements resulting in more features delivered quicker. It is usually very difficult to explain to management that it will take time to repay technical debt and that the team will be even slower refactoring rather than delivering features.</p>\n\n<p>What is usually the best strategy with that? Are there any links on success stories? </p>\n",
        "score": 7,
        "creationdate": "2015-01-29T15:02:27.197000",
        "viewcount": 1027,
        "tags": "|scrum|project-team|relationships|negotiation|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion clearly describes a real-world scenario in an Agile (Scrum) environment where a team struggles with technical debt due to pressure to deliver features quickly.  It explicitly mentions poor code quality, insufficient test coverage, and the resulting time management difficulties and team frustration. While it doesn't explicitly define a specific TD indicator, the description of the situation implicitly points to several (poor code quality, lack of tests). The question seeks advice, but the body provides a strong description of an existing problem based on lived experience, fulfilling the inclusion criteria.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions 'technical debt' and describes a scenario where a team is pressured to deliver features at the expense of code quality, leading to regressions and increased time to add features. This scenario is based on lived experience, meeting the inclusion criteria. The discussion also defines TD indicators such as insufficient test coverage and time management difficulties. Additionally, it is set in the context of Agile Software Development, specifically mentioning the use of Scrum. Therefore, it meets all inclusion criteria and provides clear insights into the challenges of managing TD in an ASD environment."
    },
    {
        "id": 14164,
        "title": "Communicating change impact to clients",
        "body": "<p>I am working with a technical client ( means he himself developed that website from  some other developer by his instructions and code is now code is completely messed up ) and he has mentioned in the main document that he wants to change the raw code into a class based code and remove deprecated code and and performance issue of complete website code</p>\n\n<p>However when we make changes the client angrily asks why we are cleaning up the code and pushes us to do only the tasks which they assign.</p>\n\n<p>Actually we are doing only changes in those file but code is interrelated.</p>\n\n<p>Suppose he said to change all mysql statements to PDO (PHP Data Objects as an abstraction layer used for accessing databases).</p>\n\n<p>We have two options. Either we create PDO connections in every page or change the db object from config file. If we change in the config file then it will stop working with all other pages where mysql code is running.</p>\n\n<p>So my question is, how can we tell the customer that the changes we are doing have an impact on overall project so they will take time?</p>\n",
        "score": 2,
        "creationdate": "2015-02-06T05:57:49.927000",
        "viewcount": 635,
        "tags": "|change-management|project-management-style|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where a client's existing website has technical debt (messed up code, deprecated code, performance issues). The need to refactor from raw code to class-based code and replace mysql with PDO indicates a need to address technical debt. The discussion also highlights the challenges of communicating the impact of these changes to the client, which is a common issue in agile development. The scenario is within an agile context, as the team is working on assigned tasks but needs to address underlying issues. The discussion implicitly defines TD indicators such as poor code quality and deprecated code.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It implicitly describes technical debt through references to 'messed up' code, deprecated code, performance issues, and the need to refactor from raw code to class-based code.  The scenario is based on a real-world experience with a client. The post clearly defines a TD indicator (poor-quality code, needing refactoring) and its impact on development time. Although Agile methodology isn't explicitly mentioned, the context of iterative development and client communication strongly suggests an Agile environment. The client's resistance to necessary refactoring highlights a common challenge in managing TD within Agile projects.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion involves challenges in communicating change impacts to a client, but it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on client communication and decision-making regarding code changes, not on TD in Agile Software Development (ASD). There is no mention of agile methodologies or elements, making it unrelated to ASD. Therefore, it is a false positive based on the keywords used."
    },
    {
        "id": 14341,
        "title": "How picky should I get with a team member's quality of work?",
        "body": "<p>I am a web development team leader. One of the team members turns in code that is almost always bloated and inefficient, even though it technically works (although, from time to time it doesn't). I don't want to micromanage, but almost all of the work could be done in a much better way, and I'm concerned about future updates and other people working in his code having a hard time.</p>\n",
        "score": 13,
        "creationdate": "2015-02-24T22:45:55.883000",
        "viewcount": 803,
        "tags": "|quality|team|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario (a team leader's experience with a team member producing inefficient code), implicitly indicating technical debt through 'bloated and inefficient code' that impacts maintainability and future updates.  The context is clearly within a web development team, aligning with ASD. While it doesn't explicitly mention agile methodologies, the team leader role and the concern about future maintainability strongly suggest an agile context. The lack of explicit mention of agile practices slightly lowers the relevance to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it addresses poor-quality code, which is a TD indicator. The scenario is based on the lived experience of a team leader dealing with a team member's inefficient code. The concern about future updates and maintainability implies a TD context. However, the discussion does not explicitly mention Agile Software Development, but the context of a web development team suggests a possible agile environment. The relevance is rated as 'Good' because while it meets the inclusion criteria, it lacks explicit mention of ASD."
    },
    {
        "id": 14345,
        "title": "Any tips on how to 'sell' the necessity of dealing with technical debt to nontechnical stakeholders?",
        "body": "<p>A number of stakeholders do not quite understand the necessity of dealing with technical debt preferring new features on top of not very maintainable code. Development is sometimes seen as kids who just want to play the coolest toys.</p>\n\n<p>Can anyone suggest anything which will make the job of  'selling' the necessity of dealing with technical debt as a main priority?</p>\n\n<p>Any youtube videos, articles, books recommendations and links on success stories would be very appreciated.</p>\n",
        "score": 27,
        "creationdate": "2015-02-25T10:09:34.787000",
        "viewcount": 2448,
        "tags": "|scrum|agile|planning|technical-leader|sales|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions 'technical debt', it primarily focuses on strategies for persuading non-technical stakeholders of its importance, rather than describing an existing scenario of technical debt.  It lacks a description of a real-world example of technical debt and its impact.  Therefore, it does not meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily advice-seeking without providing a real-world scenario or example of technical debt in Agile Software Development. It mentions technical debt but does not describe an existing scenario or provide evidence of TD indicators. Additionally, there is no explicit reference to Agile methodologies or context, making it unrelated to ASD."
    },
    {
        "id": 14360,
        "title": "How to measure the amount of existing technical debt, to track the progress?",
        "body": "<p>It must be a tough question but I still hope to get some insight.</p>\n",
        "score": -4,
        "creationdate": "2015-02-26T10:59:18.090000",
        "viewcount": 187,
        "tags": "|scrum|agile|performance|technical-leader|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "Terrible",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is an advice-seeking question lacking real-world context or practical examples. It does not describe an existing scenario based on lived experience, failing to meet inclusion criteria 2.  While it mentions 'technical debt', it's purely hypothetical and doesn't provide any indicators of TD or relate to Agile Software Development.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is a general advice-seeking question about measuring technical debt without providing any real-world context or examples. It lacks an existing scenario based on lived experience and does not mention Agile Software Development, failing to meet the inclusion criteria."
    },
    {
        "id": 14629,
        "title": "What we should do, if after planning we still have some free time in Sprint (i.e. unused forecasted capacity) and no tasks that will fit in it",
        "body": "<p>A question about Sprint planning. Let's assume, that Team velocity are 20 Story Point (SP). The most prior Stories in Product Backlog are A (12 SP), B (5 SP) and C (4 SP).</p>\n\n<p>It's easy to see, that if we will take all three tasks (21 SP), most likely we will not finish task C. But if we take only A and B (17 SP) we will finish sprint early.</p>\n\n<p>There are two possible solution:</p>\n\n<ul>\n<li>take all three task in current Sprint and hope that we will finish it all</li>\n<li>or plan to take only A and B tasks, and after we will finish them, take task C during Sprint.</li>\n</ul>\n\n<p>It seems, that these two solutions are similar. But, in my opinion, there is a difference. It is motivation.</p>\n\n<p>First solution: it will motivate Team to hurry up. But demotivate, if team will not doing all planned work. By my experience, second case happen more often.</p>\n\n<p>Second solution: I saw, that work usually takes all planned time. And it's not related, how exactly time we allocate to this work. So, if we will plan only two tasks in Sprint, we likely will do this two tasks whole Sprint.</p>\n\n<p>What Scrum say about this? Which way we should use?</p>\n",
        "score": 4,
        "creationdate": "2015-04-09T17:29:10.213000",
        "viewcount": 778,
        "tags": "|scrum|planning|motivation|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within an Agile (Scrum) context, it does not address Technical Debt.  The core of the discussion revolves around sprint planning, task estimation, and team motivation, not issues related to code quality, maintainability, or other indicators of technical debt. There is no mention of poor code quality, lack of testing, duplicated code, or any other implicit indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on sprint planning and team motivation in Agile Software Development, but it does not explicitly or implicitly relate to Technical Debt. There are no mentions of poor-quality code, lack of tests, duplicated code, or other TD indicators. The discussion is about managing team capacity and motivation, which does not align with the criteria for Technical Debt."
    },
    {
        "id": 14692,
        "title": "Should we put internal team tasks into Product Backlog?",
        "body": "<p>Developer Team always has internal tasks (such as environment improvements, process improvements and so on). Sometimes they can be related with current project, sometimes not.</p>\n\n<p>There is no problem, if these tasks are related with current project (for example, make Continuous Integration process for current project). Product Owner will have no objections for adding these tasks to Project Backlog and can set priority for all of them.</p>\n\n<p>But what should we do, if these tasks are common and not related with current project (For example, we want to establish code conventions and use automatic code style checker in our process). Even if we will persuade Product Owner to add this task to Product Backlog, I am sure, he will set priority for this task as small as possible. And it has sense for him, because accomplishment of this task will not give huge benefit for current project. But in other side, it will give quality increase for Developer Team in current and all other projects (PO, of course, absolutely don't care about other projects).</p>\n\n<p>And in general, I think it's not a good idea to add to <strong>Product</strong> Backlog tasks that does not related directly to the <strong>product</strong>.</p>\n\n<p>But if we will not inform Product Owner about these things and not add them to Product Backlog, but doing them during Scrum, then Scrum well lose his transparency (one of three Scrum pillars, as Scrum Guide said).</p>\n\n<p>So, what should we do with this kind of tasks?</p>\n",
        "score": 4,
        "creationdate": "2015-04-16T17:27:09.770000",
        "viewcount": 3415,
        "tags": "|scrum|tasks|product-owner|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion revolves around internal team tasks, such as establishing code conventions and using automatic code style checkers, which are indicators of technical debt. The author describes a scenario where these tasks, while beneficial for the team, are not prioritized by the Product Owner, highlighting a common challenge in Agile development. The discussion is clearly within an Agile context, mentioning the Product Backlog and Scrum. Although the discussion is more about process than a specific instance of TD, it does highlight the challenges of managing TD within an agile framework.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt.  The team wants to improve code conventions and implement an automatic code style checker. This directly addresses code quality, a key indicator of technical debt. The discussion acknowledges the challenge of prioritizing these improvements within the Product Backlog, highlighting a common tension between short-term product delivery and long-term maintainability (a core aspect of technical debt management in Agile). While not explicitly mentioning 'technical debt,' the context strongly implies it. The discussion is based on a real-world scenario faced by the team, and it's clearly related to Agile practices (Scrum). The lack of explicit mention of 'technical debt' prevents it from being classified as 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion revolves around the management of internal team tasks within a Scrum framework, specifically whether such tasks should be included in the Product Backlog. While it touches on process improvements and code conventions, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the discussion lacks a real-world scenario or lived experience related to TD in Agile Software Development (ASD). Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 14722,
        "title": "MS Project: Show annual project cost",
        "body": "<p>I am currently planning a project in MS Project. After allocating all resources and other cost to the tasks I need to present the annual budget of the project (split into manpower and direct cost).</p>\n\n<p>How can I show the project cost per resource per (fiscal) year?</p>\n",
        "score": 0,
        "creationdate": "2015-04-21T09:54:37.950000",
        "viewcount": 2698,
        "tags": "|ms-project|cost-management|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion focuses on using MS Project to manage project costs, specifically visualizing annual budget breakdown. While cost management is indirectly related to TD (e.g., uncontrolled costs can lead to rushed work and technical debt), the post doesn't discuss TD itself, nor does it mention any indicators of TD (poor code quality, lack of tests, etc.).  There is no mention of Agile methodologies. The core topic is project budgeting and reporting, not technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about using MS Project to display annual project costs, which is unrelated to Technical Debt (TD) or Agile Software Development (ASD). It does not mention or imply any TD indicators or ASD methodologies, thus failing to meet any inclusion criteria."
    },
    {
        "id": 14943,
        "title": "Definition of Done or How to really finish tasks?",
        "body": "<p>Sometimes it is hard to close a task. There might come a new information which demands an update of the task. The task remains a long time <em>almost</em> finished. New Versions and baselines allows us to close a milestone but allows thoughts like <em>I fix this in the next release</em>. I'm talking about the tasks staying at 90% in MS Project for much longer time than reaching those 90%.</p>\n\n<p>Nevertheless, PM processes and tools usually demand a point in time when you say <em>I'm done!</em>, e.g. Scrum or EVM.</p>\n\n<p>Fore sure, I know some theory: Tasks should be defined e.g. <a href=\"http://en.m.wikipedia.org/wiki/SMART_criteria\" rel=\"nofollow\">SMART</a>, SCUM demands <em>Definition of Done</em>.</p>\n\n<p><strong>But how to handle this in real life</strong>, incl. documentation and team commitment, taking the usual shortages in time and budget into account?</p>\n",
        "score": 4,
        "creationdate": "2015-05-14T07:02:28.197000",
        "viewcount": 3284,
        "tags": "|scrum|task-management|waterfall|evm|definition-of-done|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in completing tasks and managing time, it does not explicitly or implicitly refer to Technical Debt.  There's no mention of code quality, testing, documentation, or other indicators of TD. The focus is on project management and task completion within a Scrum framework, lacking the technical aspects required for inclusion.  It's primarily an advice-seeking question without real-world examples of TD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions challenges in task completion and references agile methodologies like Scrum, but it does not explicitly or implicitly relate to Technical Debt (TD). The focus is on task management and the definition of done, without addressing TD indicators such as poor-quality code or lack of documentation. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 15069,
        "title": "How to calculate sprint capacity?",
        "body": "<p>Let's say the team works 5 days, and there are 3 developers in the team, and they are working 8 hours per day. So actually it is easy to calculate: 5*3*8=120 hours of work per week.</p>\n<p>But there is something missing: there is no time for testing and code review process at the last day of the sprint. Because it takes some time to test sprint items and Friday night (last day of sprint) works cannot be sent to done.</p>\n<p>So for agile principles, how should I calculate sprint capacity? Should I estimate it at 4 days? If so, what should developers do on the last day?</p>\n",
        "score": 15,
        "creationdate": "2015-06-01T07:10:29.600000",
        "viewcount": 54360,
        "tags": "|scrum|agile|team-capacity|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions time management difficulties (a potential indicator of TD), it primarily focuses on calculating sprint capacity in Agile.  It doesn't describe an existing scenario of technical debt, nor does it explicitly or implicitly define a TD indicator. The problem described is a common Agile planning challenge, not necessarily a symptom of accumulated technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on calculating sprint capacity in an Agile context, but it does not relate to Technical Debt (TD). There are no explicit or implicit references to TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. The question is about planning and time allocation within a sprint, not about managing or identifying TD."
    },
    {
        "id": 15140,
        "title": "Cumulative Flow",
        "body": "<p>This project--developing web-based modules--is currently in its testing phase.  On a daily basis, the team captures testing results and progress using a cumulative flow diagram. The testing phase is only beginning and is scheduled to go out until mid-August.  Based on the data exhibited here, what are your interpretation and findings on the health of this phase so far?  What risks does this chart exhibit? </p>\n\n<p><img src=\"https://i.stack.imgur.com/bdWTD.jpg\" alt=\"enter image description here\"></p>\n",
        "score": 1,
        "creationdate": "2015-06-09T13:13:16.207000",
        "viewcount": 121,
        "tags": "|risk-management|metrics|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a project in its testing phase and uses a cumulative flow diagram (a tool often used in Agile), it does not explicitly or implicitly discuss Technical Debt.  The question focuses on interpreting the health and risks of the testing phase based on the provided chart, without any mention of code quality, development practices, or other indicators of Technical Debt.  There is no mention of shortcuts taken, poor code quality, lack of documentation, or other issues that would constitute Technical Debt. Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on interpreting a cumulative flow diagram related to the testing phase of a project. There is no mention or implication of Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, the discussion does not provide a real-world scenario related to TD in Agile Software Development (ASD). It is primarily seeking advice on interpreting testing data, which does not align with the inclusion criteria for TD in ASD."
    },
    {
        "id": 15261,
        "title": "Agile in enterprise: How to represent the requirements of non-business stakeholders?",
        "body": "<p>I currently work on a large scale software project in a large company.</p>\n<p>We follow an agile approach for development; however, due to the size of the the company there are several stakeholders that normally are not spoken about or simply assumed to be the developers in the Agile process.</p>\n<p>Stakeholders example:</p>\n<ul>\n<li><p>Architecture: Defines enterprise architecture guidelines</p>\n</li>\n<li><p>Development: Defines enterprise development guidelines</p>\n</li>\n<li><p>Product Design: Defines enterprise branding and design guidelines</p>\n</li>\n<li><p>IT Security: defines enterprise IT security guidelines</p>\n</li>\n<li><p>Operations: 24/7h operations support</p>\n</li>\n<li><p>Customer Support: 24/7h client support</p>\n</li>\n<li><p>Rollout: Rollout of the application per client ( client specific configurations )</p>\n</li>\n</ul>\n<p>Should I use User stories?</p>\n<ul>\n<li><p>As IT security, I want to ...</p>\n<p>or Debt tasks?</p>\n</li>\n<li><p>Tech debt - Code needs to be refractored</p>\n</li>\n<li><p>ISO debt - Application must follow ISO1234</p>\n</li>\n<li><p>Rollout debt - Configuration automation</p>\n</li>\n<li><p>Operations debt - Special tool to manage data cache</p>\n</li>\n</ul>\n<p><strong>Pratical example:</strong></p>\n<ul>\n<li>As application management, I want to be able to invalidate the cache, so the application is cleared of corrupt data.</li>\n</ul>\n<p>The above doesn't really make sense to me as a business value user story.\nIt represents more a maintenance required feature.</p>\n<ul>\n<li><p>Is there any common practice on how to integrate the requirements of these stakeholders in user stories?</p>\n</li>\n<li><p>What is the best way to express the requirements from these stakeholders?\nThey are functional yet not business value adding requirements.</p>\n</li>\n</ul>\n",
        "score": 8,
        "creationdate": "2015-06-21T10:01:15.783000",
        "viewcount": 1180,
        "tags": "|agile|user-stories|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly mentions 'Technical Debt' and several examples of it related to different aspects of software development within a large enterprise using an Agile approach.  It describes an existing scenario with practical examples, fulfilling inclusion criteria 1, 2, and 4. While the definition of a TD indicator is implicit rather than explicit, the examples provided clearly illustrate various forms of technical debt (code refactoring, ISO compliance, rollout automation, operations tools). The author's questioning of the best way to integrate these requirements into user stories further strengthens the relevance to Agile practices.  The lack of explicit, detailed explanation of each debt type prevents it from being classified as 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions 'Tech debt' and other forms of 'debt' such as 'ISO debt' and 'Operations debt'. It describes an existing scenario in a large-scale software project within a company using Agile methodologies, thus meeting the criteria for Agile Software Development (ASD). The discussion provides a practical example of a maintenance feature that doesn't fit traditional business value user stories, indicating a real-world challenge in managing non-business stakeholder requirements. However, the discussion lacks depth in exploring the implications of TD on the project, which affects its relevance rating."
    },
    {
        "id": 15431,
        "title": "Is it okay to have a sprint where the team commits to zero story points?",
        "body": "<p>Our two Scrum development teams are located in India. Our shared product owner is permanently relocating to the US, and we're just about to finish our first sprint.  Him and the team suggested delaying the next sprint by a week while he's in transit. The loss of rhythm to the team concerns me, as well as violating one of the core rules of scrum.</p>\n\n<p>I am not a part of the scrum teams, but I am a Certified ScrumMaster and have learned a lot from this site over the years, so I am acting as an agile coach within the organization.</p>\n\n<p>So I was going to suggest they do another sprint anyway but just focus on technical debt and pretend they're doing a sprint where they've committed to zero story points. I know delaying a sprint is not recommended in scrum, as per the <a href=\"http://www.scrumguides.org/docs/scrumguide/v1/scrum-guide-us.pdf\" rel=\"noreferrer\">Scrum Guide</a>, but committing to less so the team can resolve technical debt is something that's recommended in some material I've read.</p>\n\n<p>The product owner prefers the team <em>not</em> work on any product backlog items until he can groom the backlog further. We had planned to conduct a product backlog refinement meeting, but realised that the PO's workload was too high this time around. So is there any danger in committing to zero story points but running the sprint as if it were a real sprint?</p>\n",
        "score": 10,
        "creationdate": "2015-07-09T17:03:59.710000",
        "viewcount": 966,
        "tags": "|scrum|agile|sprint|story-points|",
        "answercount": 6,
        "favoritecount": 0,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses technical debt as a focus for a sprint with zero story points.  It describes a real-world scenario faced by Scrum teams, fulfilling inclusion criteria 1 and 2. While the definition of a TD indicator isn't explicitly stated in the question, the context strongly implies that the team intends to address existing technical debt during this sprint, fulfilling criterion 3 implicitly. The discussion is clearly within the context of Scrum, an Agile methodology, satisfying criterion 4. The minor lack of explicit detail on the nature of the technical debt prevents it from being classified as 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions focusing on TD during a sprint with zero story points. It describes an existing scenario where the team is considering addressing TD due to the product owner's relocation, which is a real-world example. The discussion also defines a TD indicator by suggesting the team focus on resolving TD, supported by the author's role as an agile coach. Additionally, the context is clearly within Agile Software Development (ASD), specifically Scrum, as it discusses sprints, story points, and the Scrum Guide. Therefore, it meets all inclusion criteria and provides actionable insights into managing TD within an ASD context."
    },
    {
        "id": 15796,
        "title": "Varying Sprint cycle in a project",
        "body": "<p>Is it possible to have a project with varying Sprint cycle?\nExample: in a product implementation project initial few sprints could be a month long because of multiple dependencies and lack of clarity but as we move forward the cycle becomes say 2 weeks long.</p>\n\n<p>What all changes in the system (Like Target Process) a PM/Scrum Master has to do?</p>\n",
        "score": 5,
        "creationdate": "2015-08-06T16:02:19.773000",
        "viewcount": 465,
        "tags": "|scrum|agile|sprint|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on adjusting sprint cycle lengths in a project due to initial dependencies and lack of clarity. While it touches upon project management challenges that *could* indirectly relate to technical debt (e.g., dependencies might stem from poor design), it doesn't explicitly mention or implicitly describe any technical debt indicators.  There's no mention of code quality, testing, documentation, or other factors indicative of technical debt. The question is primarily about adapting the Agile process itself, not about addressing existing technical debt within the project.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about varying sprint cycles in a project, which is related to Agile Software Development. However, it does not mention or imply any aspects of Technical Debt, such as poor-quality code, lack of tests, or time management difficulties. The focus is on project management and sprint planning rather than TD indicators. Therefore, it does not meet the inclusion criteria for discussions on Technical Debt in ASD."
    },
    {
        "id": 15933,
        "title": "How to track impediments in SCRUM?",
        "body": "<p>This has been asked several times already but none of the answers fully convince me.</p>\n\n<p>We are an R&amp;D team doing some support from time to time. Most of the support work can be included in capacity of the team so that the Focus Factor can be set accordingly.</p>\n\n<p>We have one \"batman\" that is on support every week and his/her capacity is lowered so that he/she can focus on customer support. </p>\n\n<p>But sometimes \"batman\" he needs a help from other team member, who is a domain expert and needs to fix some particular issue. If the issue is small then there is no problem but what if the amount of work is substantial?</p>\n\n<ul>\n<li>Should we create a new sprint task and estimate it and remove some\nother task from the sprint backlog which has a similar size? </li>\n<li>Should the story points for completing this task be counted as those of the stories that were taken during the planning meeting? In fact we had to remove some item we committed to deliver it so the amount of work done was lower than expected.</li>\n<li>Maybe we should we track the time spent on those instead and try to not remove anything from sprint backlog? In this case we don't have to estimate (which might be incorrect especially for harder bugs), just count time that was\nspent on fixing particular task. The drawback is that using this\napproach the velocity will be lower and if this is very unusual\nsituation only some sprints will be affected.</li>\n</ul>\n\n<p>What is more, even if I could accept estimating the support bug and counting its size together with other tasks taken into the sprint during planning (after all this is the product improvement), I am not convinced we should do the same with non-development tasks (broken build system that developer needs to fix, access to bug tracker was broken and some developer needs to take a look). In this case should we track bugs and non-development separately and differently?</p>\n\n<p>It's clear for me that repeating issues tracking is much easier but <strong>I am particularly interested in the ones that are not happening that often</strong> and have a significant impact on the time the development team can spend on delivering sprint tasks. We had an issue with a system build that took 2 man weeks to solve and it has happened only once; then a big part of the sprint tasks were not delivered in that sprint. How to track such a issues so that our velocity measure will be correct?</p>\n",
        "score": 8,
        "creationdate": "2015-08-18T10:12:05.907000",
        "viewcount": 1112,
        "tags": "|scrum|development-process|process-improvement|impediment|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion revolves around how to handle unexpected support tasks and system issues that disrupt the sprint, which implicitly relates to technical debt. The author describes a real scenario within an Agile (Scrum) context, discussing the impact of these issues on velocity and sprint commitments. The discussion highlights the need to track these issues, which can be seen as indicators of underlying technical debt. The author's concern about the impact on velocity and the need to track these issues, especially those that are not frequent, indicates a concern about the accumulation of technical debt. The discussion is within the context of an Agile team using Scrum, which satisfies the ASD criteria.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions impediments and their impact on sprint delivery,  it does not explicitly or implicitly address Technical Debt.  The focus is on managing support tasks and unexpected issues within a Scrum framework, not on code quality, design flaws, or other indicators of technical debt.  There is no mention of poor code quality, lack of tests, duplicated code, or other symptoms of technical debt. Although the team experienced delays, the root cause is not linked to technical debt.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) implicitly through references to time management difficulties and challenges in software development, such as handling unexpected support tasks and their impact on sprint velocity. It describes an existing scenario based on lived experience, detailing how support tasks can disrupt planned sprint activities. The discussion is set in the context of Agile Software Development (ASD), specifically within a Scrum framework. However, the discussion lacks explicit mention of TD indicators like poor-quality code or lack of tests, which slightly reduces its depth in addressing TD directly."
    },
    {
        "id": 16020,
        "title": "Hardening Sprint - Manna from Heaven or a Witches Brew?",
        "body": "<p>In Dean Leffingwell's Scaled Agile Framework there exists the concept of a <strong>hardening iteration</strong> E.G. after three sprints of two weeks duration, we have a <strong>hardening sprint</strong> of one week.</p>\n\n<p>In this short sprint we can pay back some of the <strong>technical debt</strong> accrued over the previous sprints, ensure more rigorous integration testing is carried out and the set up, tear down procedures are quality reviewed.\nTime can also be factored in for any training requirements that were uncovered over the prior three sprints.</p>\n\n<p>Admittedly, if we have a mature <strong>DOD</strong> on the delivery of a sprint work item there should be a decent level of quality but sticking to the principle that we deliver only what is required to satisfy the criteria of each story will eventually lead to known duplication in the code base. Good developers will naturally want to improve their code base so having a <strong>hardening sprint</strong> will ensure they can concentrate on moving WIP in the main sprints but the address any wider re-factorings periodically.</p>\n\n<p>I recently attended a conference where Rachel Davies of Unruly Software explained that their XP developers have every Friday as <strong>Golden Time</strong> where they are free to re-factor the codebase and learn new technology. That works out at one day in 5 as opposed to the one day in seven by having 3*2 week sprints plus a hardening sprint.</p>\n\n<p>I believe this is a good approach to paying the technical debt in a managed fashion. Technical debt will become more expensive to repay the longer the project continues in the same fashion as a story becomes more costly to change once we have delivered.</p>\n\n<p>I know the idea of a hardening sprint is anathema to agile purists but I think it works well in our pragmatic scrumban approach.</p>\n\n<p>I think the issue is similar to that around the validity of having a Sprint Zero which ruffles a few feathers.</p>\n\n<p>So, Question is:</p>\n\n<p>Is a <strong>Hardening Sprint</strong> a good idea, if not why and how would one address the concerns outlined above?</p>\n",
        "score": 10,
        "creationdate": "2015-08-28T11:13:02.807000",
        "viewcount": 1092,
        "tags": "|scrum|sprint|extreme-programming|",
        "answercount": 3,
        "favoritecount": 0,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions 'technical debt' and describes a real-world experience of using 'hardening sprints' within a Scaled Agile Framework (SAFe) context to address it.  The post details how this approach helps manage technical debt accrued during regular sprints by allocating dedicated time for refactoring, testing, and addressing code quality issues.  It also compares this approach to other methods like 'Golden Time' and acknowledges the potential conflict with pure agile principles. The author's lived experience and the clear connection to Agile methodologies make this an excellent example for the study.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions the concept and discusses strategies for managing it through 'hardening sprints.' It describes an existing scenario based on lived experience, referencing a conference and practices at Unruly Software. The discussion defines TD indicators such as code duplication and the need for refactoring. It is clearly situated within the context of Agile Software Development (ASD), specifically mentioning practices like sprints, DOD, and scrumban. The discussion provides actionable insights into managing TD in an agile context, making it highly relevant."
    },
    {
        "id": 16299,
        "title": "New to Project Management with a new team on a short deadline",
        "body": "<p>I have just been put in charge of a brand new team of a developer and designer, the first of each for our company. I've never had this role before, but I do have some design, development, and management experience.</p>\n\n<p>This company has a been selling its product for over a year now. The development was outsourced and as such, the development process is a new concept to this company. In addition, the design that did exist in the company prior was only graphically focused as opposed to user focused. There is a long list of outstanding bugs and technical debt on the backlog and there is no real design or researched foundation for the product that exists today.</p>\n\n<p>I have a limited amount of time to turn this product into something usable by the clients we have been trying to sell to. What should be the first thing I tackle? How do I handle this role while still trying to figure out this role. How do I facilitate a brand new team in working together? </p>\n",
        "score": 2,
        "creationdate": "2015-09-26T06:39:28.010000",
        "viewcount": 255,
        "tags": "|team-management|planning|software-development|resource-planning|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions \"technical debt\" and describes an existing scenario within a company transitioning to an in-house development team.  While it's an advice-seeking question, the description of the current state\u2014a backlog of bugs, lack of design foundation, and outsourced development\u2014clearly indicates existing TD. The context implies a move towards a more structured development process, suggesting an implicit link to Agile, although it's not explicitly stated. The lack of explicit Agile methodology mention slightly lowers the relevance score.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions a 'long list of outstanding bugs and technical debt on the backlog.' It describes an existing scenario based on the author's lived experience of being newly assigned to manage a team with a short deadline, which is a real-world context. The discussion implicitly defines TD indicators such as poor-quality code and lack of a researched foundation for the product. It is related to Agile Software Development (ASD) as it involves managing a development process and backlog, which are common elements in ASD. However, the discussion lacks depth in addressing specific agile methodologies or practices, which slightly reduces its relevance."
    },
    {
        "id": 16361,
        "title": "What are developers expected to do during testing in the latter half of each Sprint?",
        "body": "<p>When you are using the Scrum framework, a Sprint cycle involves development and QA. At the end of the Sprint the tasks worked upon and tested are showcased and released.</p>\n\n<p>Typically, for a team of 3 to 4 developers there would be 1 QA resource. What are the developers expected to do when QA is happening? Since the number of developers is much higher than the number of QA testers, bug fixes get done very quick and developers are left with nothing to do towards the end of the Sprint.</p>\n\n<p>What is expected of the developers during this QA testing while following Scrum?</p>\n",
        "score": 19,
        "creationdate": "2015-10-02T08:34:37.977000",
        "viewcount": 12745,
        "tags": "|scrum|process|time-management|roles|testing|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Scrum (an Agile methodology), it does not explicitly or implicitly address Technical Debt.  It focuses on the allocation of developer time during QA in a Scrum sprint, a resource management issue rather than a discussion of TD. There is no mention of code quality, lack of testing, or other indicators of TD. The question is primarily about workflow and resource optimization within a Scrum team, not about technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the roles and activities of developers during the QA phase in a Scrum framework. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The question is more about process and role clarification in Agile Software Development (ASD) rather than discussing any aspect of TD. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 16578,
        "title": "what should be part of Sprint 0?",
        "body": "<p>This is our first Agile project and we plan our Sprint 0 to consist of :</p>\n\n<ul>\n<li><p>Release Content Planning : Defining EPICs/MMFs Product Backlog</p></li>\n<li><p>Product Backlog Grooming : Breakup of EPICs into stories (as much as\npossible at that point of time)</p></li>\n<li><p>High Level Design and Environment Setup</p></li>\n<li><p>Develop 1 or 2 critical stories to have basic framework in place</p></li>\n</ul>\n\n<p>Please let me know if we need to have anything else and what do you suggest about the duration of sprint 0</p>\n",
        "score": 8,
        "creationdate": "2015-10-24T14:02:45.123000",
        "viewcount": 4063,
        "tags": "|scrum|agile|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion is related to Agile Software Development (ASD) and mentions planning activities, it does not explicitly or implicitly address Technical Debt.  There's no mention of code quality issues, lack of testing, duplicated code, documentation problems, time management difficulties, or low team morale \u2013 all indicators of TD. The focus is on initial project setup and planning within a sprint zero, which is a common Agile practice but not inherently related to TD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on planning Sprint 0 in an Agile project, which is related to Agile Software Development. However, it does not mention or imply any aspects of Technical Debt, such as poor-quality code, lack of tests, or other TD indicators. The discussion is primarily about project planning and does not provide a real-world scenario related to TD. Therefore, it does not meet the inclusion criteria for discussions on Technical Debt in Agile Software Development."
    },
    {
        "id": 16818,
        "title": "How to manage a schedule across multiple PMs when using a single team for both development & support?",
        "body": "<p>I work for a small company (22 people), whereby the development team works on both new features (40%) and support/maintenance tasks (60%). </p>\n\n<p>We have several account/project managers who prioritise the clients tickets within Jira using a Kanban board, and we have daily stand-ups to discuss the tasks at hand, the progress, and any blockers. </p>\n\n<p>The main frustration for everyone is the lack of visibility when allocating work out to a developer, and this leads to issues with some developers frequently being in high-demand. This often results in individuals getting pulled from one project to another, because PM A and PM B both have deadlines to reach, yet PM A and PM B are not really aware of each others priorities. </p>\n\n<p>Sadly we're not in a position to split the team into 2 teams specialising on development and support; and with 20+ customer accounts to develop/support/maintain it would seem unrealistic to plan a developers schedule too far in advance. This is mainly due to the level of complexity and urgency of the tickets we get through, which can take a developer out for a considerable amount of time.</p>\n\n<p>We've discussed internally about creating a high-level schedule for project work, and the resource needed, but we're stuck on how to progress this further because of the maintenance/support work, which makes up such a huge part of our business.</p>\n\n<p>We've seen some tremendous benefits having introduced a PM methodology like Kanban, and we've seen some huge improvements in customer satisfaction and our overall cycle time. But I think we now need a clearer way of defining our schedule and giving the team visibility on this.</p>\n\n<p>Any advise on how you think we might tackle this would be gratefully received.</p>\n",
        "score": 6,
        "creationdate": "2015-11-23T22:30:42.043000",
        "viewcount": 697,
        "tags": "|kanban|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion describes challenges in managing a software development team and mentions time management difficulties, it does not explicitly or implicitly refer to Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, insufficient documentation, or other indicators of technical debt. The core problem is resource allocation and scheduling across multiple projects, not the quality of the codebase itself.  Although the context is Agile (Kanban is mentioned), the lack of a connection to Technical Debt makes it irrelevant to the study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing schedules and resource allocation in a small company using Kanban. While it mentions challenges like lack of visibility and high demand on developers, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, the discussion does not provide a real-world scenario related to TD in Agile Software Development (ASD), focusing instead on project management and scheduling issues."
    },
    {
        "id": 17051,
        "title": "How to make Release Planning more accurate?",
        "body": "<p>I had an interview with one company. They use Scrum, but don\u2019t like rough estimates during Release Planning. So, they asked me, how to make Release Planning more accurate (they don\u2019t want more than 30 percent of deviations from the plan).</p>\n\n<p>I suggested they do following:</p>\n\n<ol>\n<li><p>Gather requirements.</p></li>\n<li><p>Filter requirements and create scope.</p></li>\n<li><p>Decompose scope to \"nouns\" (deliverable items). <em>- i.e. WBS structure</em></p></li>\n<li><p>Decompose \"nouns\" to \"verbs\" (work needs to be done to implement \"nouns\").</p></li>\n<li><p>Estimate \"verbs\" considering risks.</p></li>\n<li><p>Find \"verbs\" dependencies and put them in a timeline. <em>- i.e. GANT diagram</em> </p></li>\n<li><p>Calculate release date.</p></li>\n</ol>\n\n<p>As you can see, it is more complicated than initial story mapping, and looks more like \u201cheavy waterfall\u201d style, than \u201cagile\u201d style. As I understand Agile philosophy, accuracy of estimation of final release date is not high priority, because \"responding to change over following a plan\".</p>\n\n<p>Going back to the planning list: in Scrum we implicitly did 1-3 steps during initial Release Planning and steps 4-6 during each Sprint Planning. I suggested to do all these steps during Release Planning explicitly.</p>\n\n<p>Despite the fact that this was the first (and only) way I figured to improve the accuracy of a release plan, I don\u2019t really like it because (in my opinion) this kind of planning does not conform to the ideology of Agile.</p>\n\n<p>I understand, that accurate estimates demand more effort and don\u2019t believe in \u201cmiracle\u201d high quality estimation without effort. But maybe you can suggest to me other ways (or some tips) on <strong>how to make Release Planning more accurate</strong> without having complicated heavy waterfall-style planning?</p>\n",
        "score": 8,
        "creationdate": "2015-12-27T20:22:13.877000",
        "viewcount": 1365,
        "tags": "|scrum|agile|planning|estimation|release-planning|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions release planning in Scrum (an Agile methodology), it does not focus on Technical Debt.  The core of the question and answers revolves around improving the accuracy of release planning, not addressing issues of code quality, maintainability, or other indicators of technical debt.  There is no mention of poor code quality, lack of testing, or other implicit indicators of technical debt. The focus is purely on improving the estimation process within an Agile framework, which is outside the scope of this study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on improving the accuracy of release planning within a Scrum framework, which is an Agile methodology. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. The mention of 'heavy waterfall' style planning is more about process methodology rather than TD. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 17143,
        "title": "How to split a User Story that spans multiple sprints?",
        "body": "<p>I have a User Story that contains a bunch of tasks, similar to this:</p>\n\n<blockquote>\n  <p>User Story: <strong>Fix any broken JavaScript in CMS</strong></p>\n</blockquote>\n\n<ul>\n<li>Task: Find and fix broken JavaScript in content</li>\n<li>Task: Find and fix broken JavaScript in code base</li>\n<li>Task: Find and fix broken JavaScript in static files</li>\n<li>Task: Find and fix broken JavaScript in library</li>\n<li>Task: Find and fix broken JavaScript in catalog files</li>\n</ul>\n\n<p>So I have a bunch of tasks to go through some code and files and fix some JavaScript. Let's say that all of the above tasks cannot be completed by me in a 2 week sprint.</p>\n\n<p>How do I split this up into multiple stories? The tasks can be completed in any order and are not dependent on each other at all. So there is no logical way to sub-group them. Would I just do:</p>\n\n<blockquote>\n  <p>User Story: <strong>Fix any broken JavaScript in CMS (part 1)</strong></p>\n</blockquote>\n\n<p>and</p>\n\n<blockquote>\n  <p>User Story: <strong>Fix any broken JavaScript in CMS (part 2)</strong></p>\n</blockquote>\n\n<p>That seems like a poor way to manage this. What is a better approach to this kind of problem where tasks can't be grouped any better but you still need to split the story up?</p>\n",
        "score": 6,
        "creationdate": "2016-01-13T17:24:10.723000",
        "viewcount": 7391,
        "tags": "|scrum|agile|user-stories|tasks|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in managing tasks within a sprint (an implicit indicator of potential technical debt if the tasks represent poorly factored code), it does not explicitly or implicitly define a technical debt indicator.  The core problem is task decomposition within an Agile framework, not addressing existing technical debt. There's no mention of poor code quality, lack of tests, duplicated code, or other indicators of existing technical debt.  The focus is on project management and story splitting, not on addressing pre-existing problems in the codebase.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on splitting user stories in Agile Software Development, which is related to task management and sprint planning. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. The mention of 'broken JavaScript' is not used in the context of TD but rather as a task to be completed. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 17145,
        "title": "How to manage very small, easy tasks in Agile?",
        "body": "<p>Let's say you have a bug on your website. Your developer needs to fix some CSS or something. He estimates it will take him one minute to fix.</p>\n\n<p>What is the best way to manage these kinds of tasks? Do you create a User Story for it and create a task for it? The task is so tiny and minuscule that it's actually more work to create stories and tasks for it than to actually do it. This seems very inefficient, even though it's important to track and manage development of small fixes.</p>\n\n<p>How do you best deal with small, one-off tasks that don't take long to accomplish?</p>\n",
        "score": 9,
        "creationdate": "2016-01-13T17:29:31.777000",
        "viewcount": 2548,
        "tags": "|agile|user-stories|tasks|tracking|bugs|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions task management in an Agile context, it doesn't address Technical Debt.  It focuses on the inefficiency of managing very small tasks, not on issues of code quality, maintainability, or other indicators of technical debt. There is no mention of poor code quality, lack of tests, duplicated code, or any other implicit indicators of technical debt.  The core problem is about process optimization for tiny tasks, not about managing technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on managing small tasks in Agile, specifically how to handle minor bug fixes efficiently. However, it does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about task management in Agile rather than addressing TD issues."
    },
    {
        "id": 17207,
        "title": "Optimistic vs. Pessimistic Burndown Lines - just a Project smell?",
        "body": "<p>Not been here for a while but thought I would jump back with an interesting question. </p>\n\n<p>Are optimistic and pessimistic chart lines on a burnup/down genuinely useful or just a project smell imported to an Agile chart?</p>\n",
        "score": 2,
        "creationdate": "2016-01-20T16:43:32.517000",
        "viewcount": 1391,
        "tags": "|scrum|agile|burn-charts|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion focuses on burnup/down chart lines, specifically optimistic and pessimistic projections. While project management and estimations can indirectly relate to technical debt (e.g., inaccurate estimations leading to rushed work and accumulating debt), this post doesn't explicitly or implicitly discuss technical debt or its indicators.  There is no mention of code quality, lack of testing, duplicated code, documentation issues, time management problems, or team morale.  It lacks a real-world example of technical debt and is primarily a question about project management visualization, not a discussion of existing technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about the use of optimistic and pessimistic lines in burndown charts, which are tools used in Agile project management. However, it does not relate to Technical Debt (TD) as it does not mention or imply any TD indicators such as poor-quality code, lack of tests, or time management difficulties. The question is more about project management practices rather than TD in Agile Software Development."
    },
    {
        "id": 17313,
        "title": "Team consistently over commits",
        "body": "<p>I'm a developer on a small-ish team. 1 DBA, 2 Senior Devs, 2 Juniors, and 1 QA (sometimes, most of the time we do our own QA). No PM at the moment. We do mostly maintenance/upgrades to a large legacy system right now, but will likely split the team soon so a group of us can focus on new product development. </p>\n\n<p>We're a relatively new team that's been together for about 6 iterations now (3 months of 2 week iterations). Although we're using two week iterations, we're not down right time boxing. If a task is in progress, it stays in progress as it was already deemed the highest priority item. The iteration is more of a way of building in a time to retrospect, course correct, groom the backlog, and measure our capacity. It's Kanban with some ceremony stolen from Scrum. </p>\n\n<p>So, this all works fine for this maintenance project, but with the new product development, we're going to have to <em>really commit</em> to getting the tasks done that we say we will. The problem is that the team is consistently overly optimistic during our planning session. We've never gotten all of our stories completed, regardless of the fact that we know exactly how much work we can do, on average. </p>\n\n<p>We're able to consistently complete 13 stories in an iteration, but the team keeps insisting on scheduling 15-18. Any advice on how I can get them to understand the importance of scheduling to our capacity and <em>committing</em> to our stakeholders?</p>\n\n<hr>\n\n<p>I'm sure someone will ask about story size/points. I don't quite trust scheduling to average points yet. The number of points completed in an iteration vary too wildly yet for scheduling purposes. </p>\n",
        "score": 2,
        "creationdate": "2016-01-31T13:20:03.773000",
        "viewcount": 285,
        "tags": "|team-management|estimation|schedule|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario of a team consistently overcommitting in their sprint planning, leading to unfinished tasks.  While not explicitly mentioning 'technical debt', the overcommitment implicitly indicates a potential for accumulating technical debt due to rushed work or cutting corners to meet unrealistic deadlines. The team uses an Agile methodology (Kanban with Scrum elements), fulfilling the ASD criterion. The team's inability to complete committed tasks is a clear indicator of a problem that could lead to TD.  The lack of explicit mention of specific TD indicators slightly lowers the relevance to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through time management difficulties and challenges in software development, as the team consistently overcommits and fails to complete all planned stories. It describes an existing scenario based on the author's lived experience with a real-world example of a team struggling with planning and commitment in an Agile context. The discussion is related to Agile Software Development, as it mentions iterations, Kanban, and Scrum elements. However, it lacks explicit mention of TD indicators like poor-quality code or lack of tests, which slightly reduces its depth."
    },
    {
        "id": 17319,
        "title": "Should a Product Owner be present for all retrospectives?",
        "body": "<p>We have a Scrum Team of a Product Owner and four developers (one of whom is Scrum Master), running one week sprints. As per <a href=\"http://scrumguides.org/scrum-guide.html#events-retro\" rel=\"noreferrer\">Scrumguides.org</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>The Sprint Retrospective is an opportunity for the <strong>Scrum Team</strong> to inspect itself... </p>\n</blockquote>\n\n<p>So that includes the Product Owner.</p>\n\n<p>Following the advice from <em>Agile Retrospectives</em> by Derby/Larsen we're trying to focus our meeting on one specific topic. We have iterations of one week, so we usually cover only one topic each week.</p>\n\n<p>Now, at least half of <strong>our Retrospectives will be very tech-oriented</strong>: talking about how to spread technical knowledge between us and other teams, improving automated testing, trying new tools, et cetera.</p>\n\n<p>Our Product Owner is <em>not</em> very technical at all, and will not be able to contribute all too much in this kind of Retrospective.</p>\n\n<p>Any suggestions on how to deal with this? Do we do <em>those</em> Retrospectives with just the development team? Do we \"need\" to look for ways to include the Product Owner too?</p>\n",
        "score": 7,
        "creationdate": "2016-02-01T07:05:07.207000",
        "viewcount": 1177,
        "tags": "|scrum|product-owner|retrospective|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile (Scrum) and touches upon team dynamics and potential process improvements, it does not directly address Technical Debt.  The focus is on the Product Owner's participation in retrospectives, particularly those with a technical focus.  There's no mention of code quality issues, lack of testing, duplicated code, or other indicators of technical debt. The challenges described relate to team composition and meeting effectiveness, not technical debt itself.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the participation of a Product Owner in Scrum retrospectives, which is a procedural aspect of Agile Software Development. It does not address Technical Debt explicitly or implicitly, as it lacks references to poor-quality code, lack of tests, duplicated code, or other TD indicators. The discussion is about team dynamics and roles in retrospectives, not about managing or identifying Technical Debt."
    },
    {
        "id": 17350,
        "title": "Can planning documents be retroactively produced to fit the product that's been built?",
        "body": "<p>I am currently implementing an Android application and am struggling to do my class and sequence diagrams, predominately due to the fact that the specifications are too abstract and vague. I was thinking of doing the implementation phase and then to reverse-engineer my work to produce the planning documents.</p>\n\n<p>My question is, is this allowed and advisable?</p>\n",
        "score": 1,
        "creationdate": "2016-02-03T13:30:18.737000",
        "viewcount": 104,
        "tags": "|agile|software-development|documentation|waterfall|specification|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development (vague specifications, difficulty creating diagrams), it does not describe an existing scenario of technical debt.  It's primarily an advice-seeking question about a process (retroactively creating documentation) rather than a description of a lived experience with technical debt. There is no mention of Agile methodologies or any indicators of technical debt like poor code quality, lack of tests, etc.  The focus is on documentation, not on the consequences of technical choices.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about the feasibility and advisability of creating planning documents after implementation, which does not directly relate to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the context of Agile methodologies is not present. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 17395,
        "title": "Should stories be properly estimated before being pulled into an ongoing sprint?",
        "body": "<p>There are two common reasons why stories or bugs get pulled into a sprint in Scrum (where I work):</p>\n\n<ol>\n<li>Issue was triaged (usually critical/blocker field issues)</li>\n<li>Sprint was underestimated, and thus items from the backlog get pulled in to keep people busy</li>\n</ol>\n\n<p>In both cases, most items (especially bugs) do not have a story point estimate or time estimate. The first question is: Is it important to have story point estimates on these items <em>before</em> they are brought into an ongoing sprint? And if so, when and how should this estimation take place? We only have sprint planning every 2 weeks (our sprints are two weeks) and I'm assuming it's unproductive to schedule a sprint planning meeting for every bug we bring in.</p>\n\n<p>We use JIRA + JIRA Agile as our tooling to track Scrum sprints. The only functional reason I can think of needing proper estimation for are the reports. Also I worry our velocity will be negatively impacted if we pull in items into the sprint without an estimate.</p>\n",
        "score": 4,
        "creationdate": "2016-02-08T17:13:02.773000",
        "viewcount": 1728,
        "tags": "|scrum|agile|sprint|story-points|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Scrum and sprint planning, it does not explicitly or implicitly address Technical Debt.  The core issue is about sprint management and estimation practices, not code quality or the consequences of technical shortcuts. There is no mention of poor code quality, lack of tests, duplicated code, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the estimation of stories and bugs in a Scrum context, specifically regarding whether they should be estimated before being pulled into a sprint. While it mentions potential impacts on velocity and the use of JIRA Agile, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is more about process management in Agile rather than addressing TD in ASD."
    },
    {
        "id": 17425,
        "title": "How to handle arising tasks we want to address later in Scrum",
        "body": "<p>Considering we're talking about Scrum, </p>\n\n<p><strong>When working on a backlog item and that new out-of-scope minor tasks arise what do you do with them?</strong> (e.g.: ones we don't have time for right now such as minor refactoring or implementing tiny nice to haves)</p>\n\n<p>Do I create orphan tasks to be later assigned to a backlog item with similar other tasks during the sprint planning meeting? Should I create a backlog item (requirement, or user story) with pretty much the same title as the task and assign the task to it?</p>\n\n<p>E.g.: Let's say I create a new task which is \"add a simple caption to a control\". Should I promote it to a backlog items and in this case, what would be the task for that backlog item?</p>\n\n<p>Thanks everyone!</p>\n",
        "score": 1,
        "creationdate": "2016-02-12T00:48:12.043000",
        "viewcount": 378,
        "tags": "|scrum|agile|tasks|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within a Scrum context (meeting an inclusion criterion related to ASD), it primarily focuses on task management strategies for handling minor, out-of-scope tasks that arise during a sprint.  There is no mention or implicit indication of technical debt, poor code quality, or other indicators of technical debt. The question is purely about workflow and prioritization, lacking any description of an existing scenario with technical debt indicators. Therefore, it fails to meet inclusion criteria 1 and 2.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on task management within Scrum, specifically how to handle minor tasks that arise during backlog item work. It does not explicitly or implicitly relate to Technical Debt (TD) as it lacks references to poor-quality code, lack of tests, duplicated code, or other TD indicators. Additionally, it does not describe an existing scenario based on lived experience, nor does it provide evidence of TD in the context of Agile Software Development. Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 17514,
        "title": "Any ideas about how to evaluate a developer's performance?",
        "body": "<p>I introduced Scrum in our development teams some years ago. Since then our performance has increased a lot with a shorter time-to-market and increased quality. The CEO wants me to create a system to measure the individual performance of every developer. Our company is very results and performance oriented and my department resisted these kind of benchmarking for some years. This year we should introduce such a system so that we can start using it next year.\nHave you got any ideas / experience with a system that could work? </p>\n",
        "score": 9,
        "creationdate": "2016-02-24T15:54:06.437000",
        "viewcount": 9211,
        "tags": "|scrum|evaluation|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions improved performance and quality after introducing Scrum (an Agile methodology), it does not focus on Technical Debt.  The post is primarily about evaluating developer performance, not about identifying or addressing technical debt within an Agile context. There is no mention of code quality issues, lack of documentation, or other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about evaluating developer performance in a Scrum environment, which is related to Agile Software Development. However, it does not explicitly or implicitly address Technical Debt or any indicators of TD such as poor-quality code, lack of tests, or time management difficulties. The focus is on performance measurement rather than issues related to TD, making it a false positive for the study on TD in ASD."
    },
    {
        "id": 17567,
        "title": "How should a project manager handle a request for contracted software to produce twice as many reports as specified in the project's requirements?",
        "body": "<p>I have joined a late-phase software project and there is a great deal of disagreement between my management and the client about work items they are claiming to be outstanding. In short, our business requirements document (BRD) describes three reports that the software needs to produce, but the statement of work (SOW) simply says that the software will support \"reporting\". Now the client is asking us to create six additional reports and says that it is covered because the SOW says that the software will be used to produce reports.</p>\n\n<p>My PM training has taught me that the BRD definition of a subject will supersede a SOW definition as the purpose of the SOW is to be abstract and the BRD is concrete. However, management at my company are wavering and agreeing that they can see the client's point of view. I think this is gold plating, pure and simple.</p>\n\n<p>Strictly speaking as a project manager, who is technically correct here? Can the SOW's abstractness be used to redefine BRD scope definition or is the BRD and software requirements specification (SRS) considered the definitive word on in/out of scope items?</p>\n",
        "score": 3,
        "creationdate": "2016-02-29T20:05:53.843000",
        "viewcount": 1831,
        "tags": "|requirements|documentation|scope|contracts|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions project management challenges and scope creep, it does not explicitly or implicitly relate to Technical Debt.  There is no mention of code quality, testing, documentation, or other indicators of technical debt. The core issue is a contract dispute regarding the scope of work, not a problem stemming from technical choices made during development.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about project management and scope definition issues between a BRD and SOW, rather than Technical Debt (TD) in Agile Software Development (ASD). There is no mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no explicit or implicit reference to Agile methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 17701,
        "title": "Should velocity increase with time?",
        "body": "<p>Some scrum masters are concerned with \"bumping up\" a team's velocity during a sprint, as if a higher velocity is better. But points are a relative measure of the work that a team needs to do for feature X; they are not high or low, they're just more or less than some other feature the team arbitrarily chose as a point of reference. What's important is that you know what your velocity is, however many points that is.</p>\n\n<p>If points are effort, you don't make a greater effort with time. You make the same effort, but it is more productive. So a story that was estimated at five points when the team first formed could eventually be estimated as three or two points as the team increases its skills.</p>\n\n<p>Is that correct? I don't see a consensus on whether points measure complexity or effort, but either way it seems to me that as time passes, the perceived effort or complexity of a task will go down and you will be able to fit more of them in a sprint, thus keeping your velocity constant.</p>\n",
        "score": 17,
        "creationdate": "2016-03-12T14:35:34.863000",
        "viewcount": 5585,
        "tags": "|scrum|estimation|story-points|velocity|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion is related to Agile Software Development (specifically Scrum and velocity), it does not address Technical Debt.  There is no mention of code quality, lack of testing, duplicated code, documentation issues, or any other indicators of technical debt. The core topic is about the interpretation of story points and velocity over time, not about the accumulation of technical debt within a project.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the concept of velocity in Scrum, which is a part of Agile Software Development, but it does not relate to Technical Debt. There is no mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is about understanding and measuring velocity, not about addressing or identifying technical debt issues."
    },
    {
        "id": 17721,
        "title": "Do projects ever end early?",
        "body": "<p>When scheduling, I tend to add a lot of reality into the guestimates I am provided with.</p>\n\n<p>I always add in generous amounts of probable <em>sick days</em> for manpower and extra time for integration and bug fixing. (All this based on decades of experience.)</p>\n\n<p>As a result, my projects tend to deliver on schedule. But they never finish earlier than expected.</p>\n\n<p>Now I'm wondering if the projects would deliver earlier if I didn't pad the schedule as much. </p>\n\n<p>Would everything move a little faster if the teams had the incentive to meet deadlines based on the data they provided, as opposed to the padded ones I provide?</p>\n\n<p>Or put another way: Does work expand to fill up available time?</p>\n",
        "score": 29,
        "creationdate": "2016-03-15T09:00:35.777000",
        "viewcount": 8252,
        "tags": "|scheduling|resource-planning|",
        "answercount": 14,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon time management difficulties in software development, a common indicator of technical debt, it lacks explicit or implicit mention of technical debt itself.  There's no discussion of code quality, lack of testing, or other technical aspects that contribute to project delays. The question focuses on scheduling practices and team incentives, not on the presence or impact of technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about project scheduling and time management, questioning whether projects could finish earlier without padded schedules. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or other challenges typically associated with TD. Additionally, there is no reference to agile methodologies or practices. Therefore, it does not meet the inclusion criteria for the study."
    },
    {
        "id": 17923,
        "title": "Any ideas for mixing a kanban with taskboards",
        "body": "<p>I am the PM of a small team of 6 programmers, recently we are trying to go more agile by including in our workflow some principles or techniques of XP, scrum, scrumban and lean. </p>\n\n<p>A very important tool is our kanban, currently we are using github+zenhub for that. Zenhub provides a simple and customizable kanban(similar to trello) fully integrated into github issues. </p>\n\n<p>Our current setup looks like this.\n<a href=\"https://i.stack.imgur.com/cMVsR.png\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/cMVsR.png\" alt=\"enter image description here\"></a></p>\n\n<p>It is some kind of combination of Taskboard Kanban and User story Kanban. But still where the 2,3 column are managed by the PO and PM while the last 3 columns are managed by the team. </p>\n\n<p>The problem is that we have this mixtures of user stories and tasks, and I wonder what\u2019s the typical approach to organize them. Some tasks are part of user stories, while others (non-functional features, chores and refactors) are not. Should they be part of the backlog? How would you improve this kanban?</p>\n",
        "score": 4,
        "creationdate": "2016-04-04T11:42:36.247000",
        "viewcount": 487,
        "tags": "|scrum|kanban|tasks|small-projects|lean|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile methodologies (XP, Scrum, Scrumban, Lean) and uses a Kanban board, it does not explicitly or implicitly discuss Technical Debt.  The focus is on workflow optimization and task management within an Agile framework, not on addressing issues of code quality, maintainability, or other indicators of Technical Debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about integrating kanban with taskboards in an agile context, specifically using tools like Zenhub and GitHub. While it mentions agile methodologies and tools, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on workflow organization rather than TD issues. Therefore, it does not meet the inclusion criteria for discussions related to TD in Agile Software Development."
    },
    {
        "id": 17978,
        "title": "Managing huge experimental decision by a developer",
        "body": "<p>The project which I'm working on was over, but I would like to reflect on managing a huge experimental decision made by one developer during development. This is what happened:</p>\n\n<p>A developer strongly felt that something is not right with the current design of the project. Due to insufficient knowledge, he was unable to express out what is wrong. As we have deadlines, we cannot wait, nor work with him on his research as he cannot convince us what's wrong. </p>\n\n<p>To be constructive, he told us to move on while he conducted his research and experimented huge redesigning works on his branch of the SVN.  A couple of weeks later, he presented to us a working, hugely redesigned (and refactored) project which he's confident of and explained to us everything. We were convinced.</p>\n\n<p>However, as we were changing and adding features based on the old design, it was as good as we were working on 2 separate projects and SVN merging became impossible due to the large difference. We had 2 options then.</p>\n\n<ol>\n<li><p>To work on our copy, which we would have to redesign all our features to the new standard as well as identifying all refactored stuffs.</p></li>\n<li><p>To work on his copy, which we would have to first identify changed features and implement back correctly in his design, followed by the new features.</p></li>\n</ol>\n\n<p>We chose the first option, as the second option would still have to deal with lots of redesigning due to the changed features using obsolete classes and the likes.</p>\n\n<p>Lots of time was spent, and everything felt like double (or perhaps triple) effort. Though it was worth it (we did meet the deadline through more effort), question is, given the circumstances, is there any methodology we overlooked that could have more properly handled such scenario? Or was what we were doing the correct decision and that this is actually a normal / common thing in development?</p>\n\n<p>Note that he wasn't that confident of what he was doing either, so he had to finish everything that he was doing to see it working and confirmed his research before presenting it to us. Admittedly we were all amateur developers, including him, but he kinda instinctively knew what's wrong, but lack the terminologies and experience / knowledge of case studies to convey properly to us prior to his research. There was a chance his instincts could be totally wrong too.</p>\n",
        "score": 5,
        "creationdate": "2016-04-08T21:43:39.517000",
        "viewcount": 181,
        "tags": "|planning|methodology|risk|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in software development where a significant redesign led to substantial integration challenges.  While Agile methodology isn't explicitly mentioned, the implicit pressure of deadlines and the iterative nature of the work suggest an Agile context. The developer's experimental redesign, the resulting merge conflicts, and the time spent resolving them are clear indicators of technical debt incurred due to a lack of communication and collaborative design. The team's decision to refactor their work rather than integrate with the redesigned branch highlights the cost of this debt.  The lack of explicit mention of Agile practices slightly lowers the relevance rating.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it describes a scenario where a developer's experimental redesign led to significant integration challenges, indicating poor-quality code management and time management difficulties. The scenario is based on lived experience, meeting the inclusion criteria. The discussion implicitly defines TD indicators such as the difficulty in merging code due to divergent designs and the extra effort required to meet deadlines. It is related to Agile Software Development (ASD) as it involves iterative development and decision-making under time constraints, although it lacks explicit references to agile methodologies. The relevance is rated as 'Good' because while it meets the inclusion criteria, it lacks explicit mention of agile practices and could provide more depth on the impact of TD on the project."
    },
    {
        "id": 18092,
        "title": "What to do if a member of a team finishes all his sprint tasks ahead of schedule?",
        "body": "<p>I run 1 week sprints, lately my sprints are finishing ahead of schedule (one day before the end of the sprint) for one member of the team. </p>\n\n<p>I know that some PMs wait until the next sprint cycle, however that means losing a day doing no work.</p>\n\n<p>What's the best way to deal with this?</p>\n",
        "score": 1,
        "creationdate": "2016-04-25T10:15:10.110000",
        "viewcount": 3191,
        "tags": "|agile|user-stories|resources|sprint-backlog|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a team member finishing sprint tasks ahead of schedule, which *could* indirectly relate to technical debt if that extra time was spent addressing it,  it doesn't explicitly or implicitly discuss technical debt or its indicators. The post focuses on project management and resource allocation, not on the presence or management of technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about managing team productivity in Agile sprints, specifically when a team member finishes tasks early. It does not relate to Technical Debt, as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on time management within Agile, but without a connection to TD, it does not meet the inclusion criteria."
    },
    {
        "id": 18138,
        "title": "How many hours should the development team spend on skills improvement during work?",
        "body": "<p>For a team of junior web developers, who are very motivated to improve their skills, and applying their new knowledge to the development has produced great results so far. But I am conscious of the time they would be spending on learning during their work hours. What is the ideal balance of allocating them a number of hours for online training/courses in a week so much that it does not affect their deadlines. </p>\n",
        "score": 3,
        "creationdate": "2016-04-28T20:28:18.860000",
        "viewcount": 1054,
        "tags": "|project-management-style|skills|training|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions time management difficulties, a potential indicator of technical debt, it does not describe an existing scenario of technical debt.  It's primarily a question about allocating time for skill improvement, not a discussion of existing technical debt issues within an Agile context. There is no mention of Agile methodologies or any indicators of poor code quality, lack of testing, etc.  The focus is on proactive skill development, not addressing existing problems stemming from technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on time management for skills improvement and training for junior developers. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, there is no mention of Agile Software Development (ASD) practices or context. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 18254,
        "title": "Sales team keep on setting aggressive deadlines",
        "body": "<p>So I had a quick meeting today, my Boss who is leading the sales team has given me one sprint to deliver a shopping list of work for a end client. </p>\n\n<p>I have told him that a week is not enough time to deliver that amount of work and properly test everything. Only in the best case scenario, if everything works fantastically well, it will be delivered.</p>\n\n<p>I am currently facing the following issues:</p>\n\n<ul>\n<li><p>My boss doesn't seem to care and will just set the aggressive deadlines anyway because it's an opportunity to get business in.</p></li>\n<li><p>My boss is not respecting the fact that my team are contractually obliged to work 40 hours a week (UK), he just wants this level of work delivered in a sprint even if it means a lot of overtime.</p></li>\n</ul>\n\n<p>I have warned him about:</p>\n\n<ul>\n<li>Tech debt resulting from very aggressive deadlines and being able to create a contingency in my project management.</li>\n<li>I have repeatedly told him that we can't let clients dictate our sprint cycles this way, but his argument is that if we are not aggressive enough with timeframes we will lose business.</li>\n</ul>\n\n<p>How can I handle this situation.</p>\n",
        "score": 1,
        "creationdate": "2016-05-12T10:38:19.657000",
        "viewcount": 426,
        "tags": "|scrum|project-team|sales|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions 'tech debt' as a consequence of aggressive deadlines imposed by the sales team.  It describes a real-world scenario where the author is facing time constraints leading to potential compromises in quality and testing. While there's no explicit mention of Agile methodologies, the use of 'sprint' implies an Agile context. The author's concerns about the impact on the team's work-life balance and the potential for accumulating technical debt due to unrealistic deadlines are central to the discussion.  The lack of explicit detail on specific Agile practices slightly lowers the relevance rating.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions 'tech debt' resulting from aggressive deadlines. It describes an existing scenario based on the author's lived experience with their boss setting unrealistic deadlines, which is a TD indicator related to time management difficulties. The context is related to Agile Software Development (ASD) as it involves sprint cycles, a key element of agile methodologies. However, the discussion lacks depth in exploring the impact of TD on the development process, which affects its relevance rating."
    },
    {
        "id": 18298,
        "title": "What to do when the backend work is much larger than the frontend?",
        "body": "<p>On past projects, I've seen a common theme. A particular feature will require very simple front end work (eg. make a button on a screen that says \"submit\"), but there will be a large amount of work on the backend. If we have say one backend developer and one front end developer, the backend dev finds themselves often doing work that doesn't get feedback, is behind the front end by several days or more, and so on. </p>\n\n<p>Some solutions would be to either slice the story in a more even vertical between the two types of work, to go less \"in-depth\" with the backend work, or to work to make your developers cross-functional between the back and front end work, but I haven't had a situation yet where that's really a reasonable solution. Is there anything else that can be done?</p>\n",
        "score": 10,
        "creationdate": "2016-05-18T16:29:02.070000",
        "viewcount": 4396,
        "tags": "|scrum|process|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where backend work is significantly larger than frontend work, leading to delays and lack of feedback, which are indicators of technical debt. The context is within an agile team with front-end and back-end developers, thus relating to ASD. The author is describing a situation they have experienced, not a hypothetical one. The imbalance in workload and the resulting delays can be seen as a form of technical debt, although not explicitly stated as such.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in Agile software development where a backend developer is significantly delayed due to a disproportionate workload compared to the frontend developer.  This implicitly points to a technical debt issue: the backend work is likely more complex than initially anticipated, leading to time management difficulties and potentially impacting team morale. While not explicitly mentioning 'technical debt', the description of the problem aligns with the implicit indicators of TD (time management difficulties, potential for poor-quality code due to rushed work). The discussion also implicitly references Agile through the mention of 'stories' and the implied iterative development process.  It lacks explicit mention of Agile methodologies, preventing it from being classified as 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the imbalance of workload between backend and frontend development in a project. While it touches on issues like time management and team dynamics, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no mention of Agile Software Development (ASD) practices or methodologies, making it unrelated to the context required for inclusion. Therefore, it is marked as a false positive."
    },
    {
        "id": 18545,
        "title": "How do I encourage self-learning of Git?",
        "body": "<p>Recently my team transitioned from Perforce to Git. As part of the transition, the developers responsible for the transition wrote documentation and provided links to interactive tutorials to help other developers with understanding Git commands and terminology.</p>\n\n<p>Now that the switch has occurred, it's becoming clear that a majority of people on the team may not have followed the transition's team advice to participate in the interactive tutorials, and I don't know how much of the documentation has been read beyond the simple setup steps. I am relatively new to the overall team but one of my first tasks was to assist with the transition to Git as I have Git experience from prior jobs.</p>\n\n<p>How can I (or team management) encourage people to take the time to learn the new Git material?</p>\n",
        "score": 3,
        "creationdate": "2016-06-24T20:34:18.970000",
        "viewcount": 274,
        "tags": "|software-development|education|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a team transition to Git, which could indirectly relate to technical debt if the lack of Git knowledge hinders development, it does not explicitly or implicitly discuss technical debt itself.  The post focuses on encouraging team members to learn Git, not on addressing existing technical debt stemming from the transition or lack of Git proficiency. There is no mention of code quality, lack of testing, duplicated code, documentation issues, time management problems, or low team morale\u2014all potential indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about encouraging self-learning of Git within a team that has transitioned from Perforce. It does not explicitly or implicitly relate to Technical Debt (TD) as it lacks references to poor-quality code, lack of tests, duplicated code, or other TD indicators. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. The focus is on team learning and adaptation to new tools, not on TD in ASD."
    },
    {
        "id": 18617,
        "title": "In an scaled Scrum with multiple teams, who should be responsible for writing automated system tests?",
        "body": "<p>We have three teams contributing to the same product. Currently our automated system tests are being written by two QA people that see what has been finished in the reviews and then write appropriate tests.</p>\n\n<p>That has been working okay, but we are now pushing towards continuous deployment and need to ensure that the system tests are written during the Sprint so that we can immediately run regression tests. Since none of the teams fully own the feature right now we are unclear on who should be responsible for system testing.</p>\n",
        "score": 4,
        "creationdate": "2016-07-06T08:54:41.993000",
        "viewcount": 880,
        "tags": "|scrum|agile|roles|testing|scaled|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario within an Agile context (scaled Scrum with multiple teams) where the lack of automated system tests during the sprint is causing a bottleneck for continuous deployment. This implicitly points to a form of technical debt related to testing practices. The need to ensure system tests are written during the sprint highlights a time management issue and a challenge in the software development process, which are indicators of TD. The discussion is not hypothetical and is based on the team's lived experience.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions continuous deployment and regression testing, which are relevant to Agile and could indirectly relate to Technical Debt (if lack of system tests leads to issues), it does not explicitly or implicitly describe an existing scenario of Technical Debt.  The post focuses on team responsibility for writing tests, not on the existence or impact of already present technical debt. There is no mention of poor code quality, lack of documentation, or other indicators of TD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of challenges in time management and the need for timely system tests, which can be seen as a TD indicator. It describes an existing scenario in a scaled Scrum environment, which is a form of Agile Software Development. The issue of responsibility for writing automated tests during the Sprint is a real-world problem faced by the teams. However, the discussion lacks explicit mention of TD or detailed insights into the consequences of the current testing approach, which slightly limits its depth."
    },
    {
        "id": 18637,
        "title": "Is a ticket management system necessary for our org?",
        "body": "<p>Our team looks like this</p>\n\n<ol>\n<li>4 developers</li>\n<li>2 testers</li>\n<li>1 Boss (Product owner, CEO etc.)</li>\n<li>A designer</li>\n</ol>\n\n<p>We have tried 4 different boards till now. Assembla, Youtrack, JIRA as scrum and JIRA as Kanban. Every single time, what ends up happening is that the list of tickets grows and becomes pretty large and becomes unapproachable from my perspective. There are about 250 unresolved issues. I would never want to go through that list and pick something out of it.</p>\n\n<p>As a whole team, we have sometimes given up on long lists of issues and we have moved on to create new boards hoping to have a good process. But we have not achieved this at all.</p>\n\n<p>We always go back to something like a simple todo list or an excel sheet till we delete everything and start a new board. A list of 10 items seems far more easier to fathom than say 250. How can we fix this?</p>\n",
        "score": 2,
        "creationdate": "2016-07-11T15:23:25.890000",
        "viewcount": 200,
        "tags": "|jira|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a team struggling with a large backlog of unresolved issues (250), which is a clear indicator of technical debt accumulation. The team's repeated attempts to use different agile boards (Assembla, Youtrack, JIRA) and their eventual reversion to simple todo lists or excel sheets suggest a failure to manage their workflow effectively, which is common in teams with technical debt. The context is clearly within an agile software development environment, as evidenced by the use of scrum and kanban boards. The discussion describes a real-world scenario, not a hypothetical one.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt. The team's inability to manage their issue tracker (250 unresolved issues) and their repeated attempts to restart with new boards suggest a lack of organization and potentially poor code quality or documentation, which are indicators of TD.  The description is based on a real-world scenario, and the team's struggle highlights a challenge in software development. While Agile methodology isn't explicitly mentioned, the use of Scrum and Kanban boards implies an Agile context. The core issue is a management problem related to the accumulation of work, which can be a symptom of underlying TD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about the challenges of managing a ticket system and does not explicitly or implicitly relate to Technical Debt (TD). While it mentions issues with managing a large number of tickets, it does not describe poor-quality code, lack of tests, or other TD indicators. Additionally, there is no explicit mention of Agile Software Development (ASD) practices or methodologies, making it unrelated to the context required for inclusion."
    },
    {
        "id": 18708,
        "title": "Identifying and considering the important factors to calculate a persons Capacity for a Sprint?",
        "body": "<p>My team works in a 3 Weeks sprint, and accordingly we calculate the capacity of Team member based on his or her planned holidays and company Vacations. </p>\n\n<p>But we cannot deny any unplanned / Sick leaves, Unplanned meetings and Training. Different Inter &amp; Intra team communications which may be important for my own project or other teams. Knowledge sharing is an important core value of a growing organisation that encourages open cross team interactions.  </p>\n\n<p>Different Sprint Ceremonies also take some time of the team members during these 3 weeks. What points are important to be considered calculating the Capacity of the Team members considering they spend 8 hrs in the office.</p>\n",
        "score": 5,
        "creationdate": "2016-07-21T04:26:23.303000",
        "viewcount": 620,
        "tags": "|scrum|team-management|sprint|project-management-style|team-capacity|",
        "answercount": 5,
        "favoritecount": 0,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions time management difficulties and unplanned events impacting team productivity, it does not explicitly or implicitly refer to Technical Debt.  There's no mention of code quality, lack of testing, duplicated code, or any other indicators of technical debt. The focus is solely on capacity planning within a sprint, a common Agile practice, but without a connection to technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on calculating team capacity for a sprint, which is related to time management in Agile Software Development. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is more about managing team availability and workload rather than addressing TD in the context of ASD. Therefore, it does not meet the inclusion criteria for discussions related to TD."
    },
    {
        "id": 18724,
        "title": "Can you make a custom timeline?",
        "body": "<p>Can you make  a custom timeline by corporate periods? or add the periods over the dates?</p>\n\n<p>Our company refers to time in Periods where each period has 4 weeks. Is it possible to remove the dates or add the period distinction maybe above the timeline?</p>\n\n<p>Thanks,\nLori</p>\n",
        "score": 0,
        "creationdate": "2016-07-26T15:18:19.387000",
        "viewcount": 580,
        "tags": "|ms-project|gantt|timeline|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is a request for a custom timeline feature, focusing on adapting date display to a company's internal 'Period' system.  There is no mention of Technical Debt, Agile methodologies, or any indicators of poor code quality, lack of documentation, or other issues related to software development.  The question lacks any context related to software development or existing problems, making it irrelevant to the research study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about creating a custom timeline based on corporate periods, which is unrelated to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators or ASD context, making it a false positive based on keywords like 'timeline' that might suggest time management but do not relate to TD in ASD."
    },
    {
        "id": 19829,
        "title": "Can I add columns in MS Project Pro to display time-phased costs?",
        "body": "<p>Can I add columns in MS Project Pro to display time-phased costs? I would like to see a cost column for each year of the project. The year-column would only include costs for that year. I can almost do it by using formulas in custom-cost columns, but the tasks split between years are missed. </p>\n\n<p><a href=\"https://i.stack.imgur.com/yfbfg.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/yfbfg.png\" alt=\"enter image description here\"></a></p>\n",
        "score": 1,
        "creationdate": "2016-08-09T19:33:33.467000",
        "viewcount": 168,
        "tags": "|ms-project|cost-management|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on using Microsoft Project Pro to display time-phased costs. While it mentions time management difficulties implicitly (struggling to display costs across years), it lacks any connection to Technical Debt or Agile Software Development.  There is no mention of code quality, testing, documentation, or any other indicators of technical debt. The problem is purely related to project management software functionality.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about using MS Project Pro to display time-phased costs, which is unrelated to Technical Debt (TD) or Agile Software Development (ASD). It does not mention or imply any TD indicators or ASD context, thus failing to meet any inclusion criteria."
    },
    {
        "id": 19837,
        "title": "How should we balance chores to reduce technical debt with impending deadlines for features?",
        "body": "<p>I'm the Scrum Master on a project with three developers, one QA person, one designer, and me. We work on a project that we inherited about three years ago, a \"portal\" website and a cordova app. We're now planning to scale down the team to a skeleton crew of one developer, aiming to finish up everything critical in the next ~five weeks before we do so.</p>\n\n<p>The project has always struggled with the issue of technical debt we inherited along with the codebase, and now the team would like to see if there is some way we can integrate this work without it getting us \"off track\" on the main features and bugs we want to complete before our five weeks are up. </p>\n\n<p>It's important that the team stay as focused on the features and bugs as possible because they've been working on a few pages of the app now for months and are are excited to be done with it. For their morale I want to make sure we keep that focus, but they also feel strongly that some of these engineering chores should be done.</p>\n\n<p>How should we balance these two things so that the developers still feel they can make progress on the engineering initiatives while remaining focused on finishing the feature set?</p>\n",
        "score": 4,
        "creationdate": "2016-08-10T14:56:18.607000",
        "viewcount": 461,
        "tags": "|scrum|planning|scheduling|prioritization|technical-debt|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses technical debt within an Agile context (Scrum). It describes a real-world scenario where a team is struggling to balance addressing existing technical debt with completing urgent features before a deadline.  The Scrum Master's concern for team morale further highlights the lived experience. The post clearly defines a TD indicator (inherited poor-quality code leading to engineering chores) and its impact on the project. The Agile methodology (Scrum) is explicitly mentioned.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions the inherited technical debt in the codebase. It describes an existing scenario based on the lived experience of a Scrum Master managing a project with a team facing TD issues. The discussion implicitly defines TD indicators such as poor-quality code and time management difficulties, as the team struggles to balance feature development with addressing TD. It is clearly set in the context of Agile Software Development (ASD), as evidenced by the mention of the Scrum Master role and the agile team structure. The discussion provides clear and actionable insights into managing TD within an agile framework, making it highly relevant to the study."
    },
    {
        "id": 20042,
        "title": "How to sucessfully introduce/initiate IT projects in a non-IT org.?",
        "body": "<p>I've been working in an old-fashioned company that has a small IT department and zero experience with project management. I'm having trouble finding the right approach to present IT solutions, transform these solutions into projects and manage them in a way the stakeholders will understand.</p>\n\n<p>The main trouble at the moment has been that every project I propose is not well-received, since it will <strong>cost money</strong>, <strong>time</strong>, <strong>resources</strong> and people will need to be trained in their own jobs (<em>e.g.</em> if I want to introduce a Help Desk solution to our spreadsheet-oriented Help Desk dept.) - and no one likes learning how to do their own job again.</p>\n\n<p>What I'm trying to do presently: show the solution and why it would be good; estimate how long it would take to implement; how many resources the project would need; and how much it would cost (person/hour + software costs + etc). But I'm having trouble to exemplify how much we would \"profit\" in the long term. Remember, these are non-TI people, so arguing that (e.g.) it's more secure having databases than spreadsheets is not a strong argument, and I don't know how to make it appear strong, so I'm trying to talk in money.</p>\n\n<p><em>Example:</em> employee A does task X in 2 hours, which is very long, with an IT solution he would take fair less, but I can't precisely estimate he will take 30 minutes - if I could, it would be easier to present the long-term profit to the stakeholders in financial values. He could take 30 minutes, or 15, or 1 hour and 10 minutes - all would present benefits in the long-term, financially speaking, but I can't be precise on how much.</p>\n\n<p>What would be the best way to approach this scenario? Introduce and initiate IT projects successfully, all while communicating the benefits from these in a way non-IT people can understand.</p>\n",
        "score": 4,
        "creationdate": "2016-09-08T23:22:47.910000",
        "viewcount": 163,
        "tags": "|planning|initiation|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions resource constraints, time management difficulties, and the cost of implementing IT solutions\u2014all potential indicators of technical debt\u2014it does not describe an existing scenario of technical debt.  It's primarily a request for advice on how to present and sell IT projects to non-technical stakeholders. There is no mention of Agile methodologies or any existing software development processes, thus failing to meet inclusion criteria 2 and 3.  The focus is on project initiation and stakeholder management, not on addressing existing technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about introducing IT projects in a non-IT organization and does not explicitly or implicitly relate to Technical Debt (TD). It focuses on project management challenges and stakeholder communication rather than issues like poor-quality code, lack of tests, or other TD indicators. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices, making it irrelevant to the study's focus on TD in ASD."
    },
    {
        "id": 20142,
        "title": "How to convince my boss to let go an ineffective programmer",
        "body": "<p>I was hired as a project manager / senior programmer to manage an internal group of programmers in a company. I'm responsible for coordinating 12 programmers.</p>\n\n<p>My boss has no programming background, how can I convince him to let go of an ineffective programmer? My boss's argument is that the programmer knows that he is not very good, but because of that he is cheap.</p>\n\n<p>Most of his code must be cleaned up. Today I found code he committed which was filled with difficult-to-understand and outright misspelled content (which would increase cost of maintenance of the code later on):</p>\n\n<pre><code>public static bool isDivisibleBy(this int num, int numnum)\n    {\n        var tmp = (float)num / (float)numnum;\n        var res = tmp.ToString();\n\n        if (res.Contains(\".\"))\n            return false;\n        else\n            return true;\n    }\n\n    public static int reminder(this int num, int numnum)\n    {\n        var absNum = Math.Abs(num);\n        var absNumnum = Math.Abs(numnum);\n\n        //speedup\n        if (absNum.isDivisibleBy(absNumnum))\n        {\n            return 0;\n        }\n        else\n        {\n            var tmp = absNum / absNumnum;\n            var tmp2 = absNum - (absNumnum * tmp);\n\n            var tmp3 = tmp - tmp2;\n\n            //sign\n            if ((num &gt; 0 &amp;&amp; numnum &gt; 0) || (num &lt; 0 &amp;&amp; numnum &lt; 0))\n            {\n                return Math.Abs(tmp3);\n            }\n            else\n            {\n                return Math.Abs(tmp3) * -1;\n            }\n        }\n\n        return 0;\n    }\n}\n</code></pre>\n",
        "score": 0,
        "creationdate": "2016-09-20T21:50:26.573000",
        "viewcount": 303,
        "tags": "|team-management|project-team|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion presents a real-world scenario where a project manager is dealing with an ineffective programmer whose code is of poor quality, including difficult-to-understand and misspelled content. This directly relates to technical debt. The context is within a team of 12 programmers, implying an agile environment. The code example provided serves as a clear indicator of the technical debt being created. While the focus is on personnel management, the underlying issue is the technical debt being introduced by the programmer.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario of poor-quality code (difficult-to-understand, misspelled code that increases maintenance costs) within a team, implicitly indicating technical debt. The example code snippet serves as a clear indicator of the debt. While Agile methodology isn't explicitly mentioned, the context of a project manager managing a team of programmers strongly suggests an Agile or similar iterative development environment. The focus is on the consequences of retaining an ineffective programmer, which indirectly relates to the management of technical debt within a team.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions poor-quality code, which is a potential indicator of technical debt. However, it does not explicitly or implicitly relate to Agile Software Development (ASD). The focus is on convincing a boss to let go of an ineffective programmer, without any context or reference to agile methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 20198,
        "title": "Scrum when reaching goal beforehand",
        "body": "<p>So I've been trying to read about what we should do if the Sprint goal is reached beforehand and from what I've understand there are 2 options:</p>\n\n<ul>\n<li>Take in new tasks and change scope</li>\n<li>End sprint beforehand (doesn't sound viable)</li>\n</ul>\n\n<p>But both options doesn't seem very good when you work in a team. To make an example: </p>\n\n<p>Lets say you have 3 team members working on multiple different stories. By halfway through the sprint there is no more new tasks, 2 members are sitting at some tasks that still goes on but 1 member has no more task to start. Now if we take new tasks in so the member doesn't run out of tasks the scope will change and we could continue to do this but we'll never reach a completed sprint. If we don't take new tasks in the sole member will have to help the 2 others (might not be possible) or work outside the sprint (not recommended either) because we can't end it while 2 members still are working.</p>\n\n<p>So how would you guys recommend handling running out of task beforehand but only for some team members?</p>\n",
        "score": 4,
        "creationdate": "2016-09-28T06:22:09.777000",
        "viewcount": 195,
        "tags": "|scrum|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within a Scrum (Agile) context, it does not address Technical Debt. The core issue is team workload management and task allocation during a sprint, not code quality, maintainability, or any other indicators of technical debt.  There is no mention of poor code quality, lack of testing, duplicated code, or any other implicit indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on managing sprint goals and task allocation in Scrum, which is an Agile methodology. However, it does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is about sprint management and does not address TD in the context of Agile Software Development."
    },
    {
        "id": 20212,
        "title": "How to show planned project approach to the client?",
        "body": "<p>I've came to a situation where the client asks me the next two things:</p>\n\n<ol>\n<li><p>Give me your project plan of how you would approach this project to make sure I have a result at the end of a specific month.</p></li>\n<li><p>Elaborate how you would analyze the existing code for the front-end and the back-end to make sure you understand what the previous programmers have done.</p></li>\n</ol>\n\n<p>This is from a freelance perspective where I \"act\" both as a PM and as a programmer.</p>\n\n<p>What kind of answer should I provide to the client? We are at the phase where he is interested in my services and wants to know how would I do it.</p>\n",
        "score": 0,
        "creationdate": "2016-09-29T13:05:35.627000",
        "viewcount": 120,
        "tags": "|software-development|clients|small-projects|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions analyzing existing code, which could indirectly relate to discovering technical debt, it primarily focuses on project planning and client communication.  There is no mention of Agile methodologies or any specific indicators of technical debt. The question is primarily about how to present a project plan to a client, not about addressing technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about how to present a project plan and analyze existing code for a client from a freelance perspective. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on client communication and project planning rather than addressing TD in an ASD context."
    },
    {
        "id": 20239,
        "title": "Story Decomposition Granularity",
        "body": "<p>We are having a hard time meeting Sprint comits, one reason I suspect is that we are not doing a good job estimating and one of the causes of this is that we don't do a good job decomposing the story down to a sufficient level of granularity to fit within the sprint.</p>\n\n<p>I see a lot of comments on Agile that it is critical to have granular stories that are small enough to fit in the sprint, but I have not found any recommendations or best practices for HOW to decompose a story to the correct level of Sub-Task granularity.</p>\n\n<p>Does anyone have good practices or heuristics as to what is the \"right\" level of granularity?</p>\n",
        "score": 12,
        "creationdate": "2016-10-04T21:03:24.527000",
        "viewcount": 2301,
        "tags": "|agile|story-points|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions difficulties meeting sprint commitments, which could be indirectly related to technical debt, it primarily focuses on story decomposition and estimation in Agile.  There's no explicit or implicit mention of technical debt indicators like poor code quality, lack of tests, or duplicated code. The question is primarily seeking advice on Agile practices, not addressing an existing scenario of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on story decomposition and estimation challenges in Agile Software Development. While it mentions difficulties in meeting sprint commitments, it does not explicitly or implicitly relate to Technical Debt indicators such as poor-quality code, lack of tests, or documentation issues. The discussion lacks a real-world scenario describing TD and does not define any TD indicators. Therefore, it does not meet the inclusion criteria for discussions on Technical Debt in ASD."
    },
    {
        "id": 20358,
        "title": "JIRA: how to have many Kanban boards for one project",
        "body": "<p>Here is the situation:\nI have one project with several issues relating to tasks our team has to complete. We (currently) have two \"categories\" of tasks to complete. Let's call them: \"Environment Setup\" and \"Technical Debt Removal\". I want a way to track whether tasks are completed, and who is working on what.</p>\n\n<p>I have issues in my project that either relate to one or the other, not both.</p>\n\n<p>I would like to have two separate Kanban boards to track the work on these two things independently.</p>\n\n<p>How do I do this?</p>\n\n<p>I have tried to create several boards within the project but this doesn't work, since all the issues show up in both.</p>\n",
        "score": 2,
        "creationdate": "2016-10-20T15:54:28.260000",
        "viewcount": 1494,
        "tags": "|jira|tasks|task-management|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion explicitly mentions Technical Debt Removal as a category of tasks, which is a clear indicator of TD. It also describes a real-world scenario within an Agile context, using Kanban boards for task management. The user is trying to manage different types of tasks, including TD, within a project, which aligns with the study's focus. While the discussion is not deeply detailed, it provides sufficient evidence to be considered relevant.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly mentions \"Technical Debt Removal\" as a category of tasks within a project.  It describes a real-world scenario of managing tasks in an Agile context (implied by the use of Kanban boards and JIRA). While it doesn't detail specific code quality issues, the categorization of tasks into 'Technical Debt Removal' clearly indicates the presence of TD. The question focuses on project management within an Agile framework, making it relevant to the study.  The lack of explicit detail on the nature of the technical debt itself slightly lowers the relevance rating.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing Kanban boards in JIRA for task tracking, specifically for 'Environment Setup' and 'Technical Debt Removal'. While 'Technical Debt Removal' is mentioned, the discussion does not provide any real-world scenario or lived experience related to Technical Debt. It is focused on a tool usage question rather than discussing Technical Debt indicators or challenges in Agile Software Development. Therefore, it does not meet the inclusion criteria for discussions on Technical Debt in ASD."
    },
    {
        "id": 20397,
        "title": "What is unique about application development projects?",
        "body": "<p>I'd like to understand the difference, from a project-management perspective, between application development and other, non-application development.</p>\n",
        "score": -2,
        "creationdate": "2016-10-27T13:57:17.587000",
        "viewcount": 324,
        "tags": "|agile|communication|pmp|ms-project-2010|pmi-framework|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "Terrible",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion is a general inquiry about project management differences between application development and other fields. It does not mention Technical Debt, Agile methodologies, or any indicators of TD.  There is no description of an existing scenario or lived experience related to software development challenges. Therefore, it fails to meet the inclusion criteria.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is unrelated to Technical Debt (TD) or Agile Software Development (ASD). It focuses on understanding the differences in project management between application development and other types of projects, without mentioning TD indicators or ASD context. Therefore, it does not meet any inclusion criteria."
    },
    {
        "id": 20578,
        "title": "Methodology for Deciding Between Building on Existing Code or Starting New",
        "body": "<p>This is a question about assessing the cost/benefit or ROI of a prospective project.</p>\n\n<p>I'm working in 6-8 old years software project. It has a lot of issues and also failures plus some failed people on its way.\nRight now after raising the project (software application) from the dead, when the new requirement comes, the developers are looking in the code (not in the working features in terms of usage) the corresponding code.\nThere are ideas of creating, rewriting the project from the beginning.\nI wonder if there is a sense from your point of view to look in the old code something that corresponds the new requirement for the current application?\nBecause if it is different, then the developers are getting back to the requester, describing what they found in the code, and once again discuss requirement.</p>\n\n<p>In one side it fosters requirements engineering and requirements gathering process, on the other hand it may be waste or unnecessary extension of the time. Because it may be better and faster start from scratch with the new code for the new feature. And especially if the new system or rewriting the system can be the case.</p>\n\n<p>While there may be opinions on this subject, it would be helpful to find a methodology so I could recommend whether the stakeholders are better off continuing to invest in the old code or build from scratch?</p>\n",
        "score": -4,
        "creationdate": "2016-11-24T14:12:48.583000",
        "viewcount": 121,
        "tags": "|software-development|requirements|product-management|development-process|technical-debt|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The post describes an aging software project with \"a lot of issues and failures,\"  developers struggling to understand the existing codebase, and a consideration of rewriting the system from scratch. This indicates challenges related to code quality, maintainability, and potentially lack of documentation \u2013 all indicators of technical debt. The context is an existing project, fulfilling criterion 2. While the post doesn't explicitly mention 'technical debt,' the description of the problems strongly suggests it as a significant factor in the decision-making process. The discussion is related to an existing software project, and the challenges described are directly relevant to the decision of whether to continue working on the existing codebase or start anew.  The Agile context is not explicitly stated, but the iterative nature of evaluating new requirements against the existing codebase hints at an Agile approach.  Therefore, it meets the inclusion criteria, although it could benefit from more explicit mention of Agile methodologies for a higher relevance rating.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it involves assessing the cost/benefit of working with existing code that has 'a lot of issues and failures,' which implies poor-quality code and potential TD. The scenario is based on lived experience, as the author describes their current situation with an old software project. The discussion implicitly defines TD indicators such as poor-quality code and time management difficulties. However, the discussion does not explicitly mention Agile Software Development (ASD), but the context of iterative decision-making and requirements gathering suggests an agile approach. Therefore, it meets the inclusion criteria but lacks explicit mention of ASD, making it 'Good' rather than 'Excellent.'"
    },
    {
        "id": 20717,
        "title": "Is it unrealistic to develop a software project and get reliability not just by what you see on screen?",
        "body": "<p>In the software industry, not in all cases but true for many, you usually report to a manager who has no advanced knowledge about the underlying technology used in a software project.</p>\n\n<p>Usually this drives managers to value your work based on what they see on the screen rather than what's really required to get the project done. You're chained to <em>show something to them</em> and forced to work on poor design decisions to just get an <em>ok, keep doing</em>.</p>\n\n<p>My concern is if it's actually unrealistic to think that more involved and engaged stakeholders shouldn't value you on what they see <em>on screen</em>, but by the actual already achieved project goals, either if they might have an impact on the UI or not.</p>\n\n<p>In fact, when projects require not so useful demos, overall cost is increased, because preparing a project to work with quality requires testing, debugging and even last hour modifications that might be thrown away once the demo is done. Finally, there's a timing debt associated with this kind of project management that impacts on you because they delay their own timings without modifying them (wasted time is lost forever).</p>\n\n<p>In the other hand, I'm not arguing that we should hold them 2 years until they can see something on the UI. IMO, I would say that <em>agile project management</em> with approaches like <em>Scrum</em> already define the <em>sprint demo</em>, but based on my experience, stakeholders don't want to get involved in regular project management, but they just want a global feedback with a demo that should look like a final product in terms of quality.</p>\n\n<h2>Side note</h2>\n\n<p>I want to be sure that no one could understand that my question is arguing that I shouldn't demo the UI. Furthermore, I'm not against showing it very often. But as some have already said in their own answers, sometimes it takes time to see some change on the UI while some other details are being implemented, fixed or improved.</p>\n\n<p>So, that's why my question is about if it's unrealistic to get reliability <strong>not just by</strong> what you see on screen. Thus, it's implicit that UI demos are required. End-user feedback is crucial to succeed on delivering a good project, because after all the project is for the user.</p>\n",
        "score": 4,
        "creationdate": "2016-12-14T21:02:54.660000",
        "viewcount": 318,
        "tags": "|software-development|software|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The author describes a scenario where pressure to deliver visually appealing demos leads to poor design decisions and wasted time ('timing debt'). This is a clear indicator of technical debt, stemming from prioritizing visual progress over underlying code quality within an Agile (Scrum) context. While the author doesn't explicitly use the term 'technical debt', the description of the consequences aligns with its characteristics. The scenario is based on lived experience, fulfilling the inclusion criteria.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses issues like poor design decisions and timing debt due to management practices that prioritize visible progress over quality. It describes an existing scenario based on lived experience, highlighting challenges faced in software development. The discussion also relates to Agile Software Development (ASD), mentioning agile project management and Scrum. However, the discussion lacks depth in explicitly defining TD indicators, which affects its relevance rating."
    },
    {
        "id": 20796,
        "title": "Should we cancel the Daily Stand-Up if we have another meeting during the day?",
        "body": "<p>The Scrum Master for my team cancels the daily stand up if we have another meeting that day, like Backlog Refinement (formerly Backlog Grooming) or some other planning meeting.</p>\n\n<p>I don't think it's a good idea, but can't find any precedents online. Is canceling the stand-up like this a good idea?</p>\n",
        "score": 14,
        "creationdate": "2017-01-08T23:29:55.100000",
        "viewcount": 8013,
        "tags": "|scrum|meetings|daily-scrum|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion focuses on the cancellation of daily stand-ups due to scheduling conflicts with other meetings. While it touches upon Agile methodology (Scrum), it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality, lack of testing, duplicated code, documentation issues, time management problems, or low team morale \u2013 all indicators of Technical Debt. The core issue is meeting management, not technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about the practice of canceling daily stand-ups in Scrum, which is a part of Agile Software Development. However, it does not relate to Technical Debt, either explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is solely on meeting practices within Scrum, making it irrelevant to the study on TD in ASD."
    },
    {
        "id": 21058,
        "title": "Scrum: what to do if team member finishes their work early but can't help with other tasks",
        "body": "<p>...is not able to help the remaining member of the team with his tasks since he is not suitable for it?</p>\n\n<p>Currently, in this scenario I allocate a new item from the backlog that my scrum member is more suited to doing and leave the remaining item for the colleague who is still behind. This is with the full consent of the development team.</p>\n\n<p>Is this the correct approach?</p>\n",
        "score": 4,
        "creationdate": "2017-02-15T16:14:41.613000",
        "viewcount": 5685,
        "tags": "|scrum|agile|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within a Scrum (Agile) context, it does not address Technical Debt.  The question focuses on task allocation and resource management when a team member finishes their work early, a common Agile operational challenge but not directly related to TD. There is no mention of code quality, lack of documentation, or other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about team management in a Scrum context, specifically handling situations where a team member finishes their work early. It does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. The scenario is real-world and related to Agile Software Development (ASD), but it does not address TD, making it a false positive based on the protocol criteria."
    },
    {
        "id": 21202,
        "title": "The development teams can't deliver successful sprints",
        "body": "<p>We have 2 (50% distributed) scrum teams, that have been doing scrum for just over a year.\nSince almost the whole time, the teams' painful point is environments instability, from all perspectives: smoke tests failing and need to be looked at, things break and need to invest time into fixing them, things are deployed from other teams (we work in a global project) that broke our code and so on. All these are not the teams' problems, though they intermittently impede our teams. Otherwise, the teams state that are very happy and constantly improve.</p>\n\n<p>So, despite our velocity been estimated correctly (say 50), and if everything goes well we can deliver that, we are often called to fix our environments, do investigation, do root cause analysis etc. Therefore we end up not delivering successful sprints. <strong>We cannot gauge this downtime since sometimes takes up 1 person - 1 hour, sometimes 4 persons - 2 days to investigate and fix. This is completely random.</strong></p>\n\n<p>This problem keeps being raised in retrospectives, the management is aware, and the response is that \"we are aware of these and agreement has been made to improve on such and such...\", and that \"we are moving towards improving the whole process by doing X,Y,Z\". In discussions between the scrum master and the development manager, the development manager almost refuses that these problems are the reason why the team is not delivering successful sprints, and that given good coordination, the team should still be delivering anything that they committed to. Committing to less <em>might</em> mean that the team is delivering everything and runs out of things to do in the sprint, whereas over-committing <em>might</em> end up not delivering everything. Also, under-committing has been proved to raise the manager's eyebrow as \"the team must always have things to do\", and \"under-committing\" is not the solution.</p>\n\n<p>What do you think are possibles fixes to this process so that the team can effectively commit and deliver within this environment?</p>\n",
        "score": 7,
        "creationdate": "2017-03-05T13:44:02.093000",
        "viewcount": 1929,
        "tags": "|scrum|agile|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario in an Agile (Scrum) environment where environmental instability leads to inconsistent sprint delivery.  This instability is an implicit indicator of technical debt, manifesting as time wasted on fixing broken environments, investigating issues, and performing root cause analysis. The author's frustration highlights the impact on team velocity and sprint success, directly relating to a lived experience within an Agile framework. While the discussion doesn't explicitly label the instability as 'technical debt', the description strongly implies it. The lack of a precise quantification of the debt is the reason for classifying it as 'Good' rather than 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through indicators such as environment instability, failing tests, and time management difficulties. It describes an existing scenario based on lived experience, as the author discusses real challenges faced by their scrum teams. The discussion is related to Agile Software Development, specifically mentioning scrum teams and sprints. However, the discussion lacks depth in exploring specific TD indicators or solutions, which affects its relevance rating."
    },
    {
        "id": 21223,
        "title": "Does it make sense to require developers to write a \"business value add\" section in each issue?",
        "body": "<h1>Background</h1>\n\n<p>In our company we demand that engineers write a brief one liner section in each ticket they work on (from jira/github/gitlab etc) that explains the \"business requirement\".. the logic of that is explained here (text copied from our \"issue protocol\" document verbatim):</p>\n\n<blockquote>\n  <h1>Business Value add</h1>\n  \n  <p>The software projects we work on must always\n  ultimately serve a business need. Simply put b/c at the end of the\n  day, someone should be paying for the development of these tasks.\n  Therefore, it's very important to express the value add of the task in\n  a language that non-technical person can understand and appreciate.</p>\n  \n  <p>Think about it in the following scenario: we bill the client per issue\n  (ie in the monthly invoice we add the issue number and description in\n  a spreadsheet). For the client to know where their money is going,\n  they should be able to read the issue business requirement and\n  immediately understand it. This isn't the job of the PM on the\n  project, this is the job of the engineer working on the issue as\n  they're the one most familiar with it. If you need help expressing the\n  business value of the technical work you're doing, contact your PM and\n  they can give you a hand.</p>\n  \n  <h2>Business Value add instructions</h2>\n  \n  <h3>Must be a one liner</h3>\n  \n  <p>don\u2019t write a\n  whole detailed description of the requirement and the reason behind it\n  and the background etc. Simply state the business value of what the\n  task is about. </p>\n  \n  <h3>Must be a parent task</h3>\n  \n  <p>No need to write business requirements for\n  subtasks. The business requirement for the subtasks can be inferred\n  from the parent task</p>\n  \n  <h3>Must explain the business value add, not just describe a problem</h3>\n  \n  <p>People don\u2019t pay engineers to report a problem. They pay them to fix\n  it. That\u2019s why the business value add section should simply state the\n  value added by doing it.</p>\n  \n  <p><em>Bad example</em> Users won't be able to successfully checkout using valid\n  credit cards.</p>\n  \n  <p><em>Good Example</em>  Fix bug preventing using from successfully checking out\n  by using valid credit cards</p>\n  \n  <h3>Must use the imperative mood</h3>\n  \n  <p>This is best explained <a href=\"https://chris.beams.io/posts/git-commit/#imperative\" rel=\"noreferrer\">here</a>. Similar to\n  the git commit messages, business value should be written in\n  imperative mood, which is \u201cspoken or written as if giving a command or\n  instruction\u201d. A few examples: Clean your room Close the door Take out\n  the trash Please see above link for more thorough explanation</p>\n</blockquote>\n\n<p>I have used this policy with several teams/startups with mixed results. But I was going over the book <a href=\"http://rads.stackoverflow.com/amzn/click/0735679665\" rel=\"noreferrer\">Software Requirements</a> and it showed this image:</p>\n\n<p><a href=\"https://chris.beams.io/posts/git-commit/#imperative\" rel=\"noreferrer\"><img src=\"https://i.stack.imgur.com/F1lNS.jpg\" alt=\"enter image description here\"></a></p>\n\n<p>and it shows \"business requirements\" as high level business objectives that belong in the vision and scope document, rather than \"functional requirements specification\" doc. </p>\n\n<h1>Question</h1>\n\n<p>Does it make sense to ask engineers to put a Business Value Add section in <em>each</em> issue they work on? Let's assume that engineers aren't trained for that kind of documentation (from my own experience, it's a hit or miss chance that engineers will be able to properly write a business requirement section, most of the time they do it just as getting through the motions and they don't really do a good job) then the next question is: does it make sense for <em>anyone</em> to write a business requirement section for <em>each</em> issue.. be it a BA or a PM etc?</p>\n\n<h2>Update</h2>\n\n<p>I just wanted to clarify something. Basically I guess my question makes more sense if given the context that the engineers doing the work are <em>not</em> from the same organization that's paying for the work. Classic example: entrepreneur outsources software work to a software shop, and pays them. The question I get all the time from such entrepreneurs is: where is all my money going? By requiring that the outsourcing company fill in the business value add section (and this is why it doesn't have to be an engineer doing it.. it could be the PM/BA from the outsourcing company), then the client gets a lot more visibility on where they're money is going, and I think that's fair (it better be, the client can simply make that a requirement when signing the contract).</p>\n",
        "score": 6,
        "creationdate": "2017-03-09T04:20:23.717000",
        "viewcount": 291,
        "tags": "|methodology|documentation|business-analyst|business-process-mapping|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon aspects of software development processes and potential challenges (like unclear requirements), it does not directly address Technical Debt.  The focus is on improving communication and transparency between clients and developers regarding the business value of tasks, not on code quality, maintainability, or other indicators of technical debt.  There is no mention of poor code quality, lack of tests, duplicated code, or other implicit indicators of technical debt. The context is primarily about project management and client communication, not technical debt within an agile framework.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about the practice of requiring developers to write a 'business value add' section in issue tracking systems. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. The focus is on business communication and documentation practices rather than TD in ASD."
    },
    {
        "id": 21388,
        "title": "How should a Scrum Master handle high cycle times from individuals on a team?",
        "body": "<p>As a Scrum Master / Agile Coach, what is the correct approach for dealing with Engineers in a team who take longer than the rest of the team to complete their tasks.</p>\n\n<p>Since we are using Kanban we aim for between 5 and 7 days average cycle time i.e. when they pick up a ticket to when they push it to done it should be between 5 and 7 working days.</p>\n\n<p>Thus far I have simply made this information available to them with dashboards. </p>\n",
        "score": 4,
        "creationdate": "2017-04-03T10:25:39.180000",
        "viewcount": 1299,
        "tags": "|scrum|agile|software-development|kanban|development-process|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions cycle time, a key indicator that *could* relate to technical debt (if the long cycle times are due to poor code quality or other debt-related issues), it does not explicitly or implicitly define any technical debt indicators.  The post focuses on cycle time management within a Kanban system, without linking it to code quality, lack of documentation, or other factors indicative of technical debt.  There's no description of an existing scenario based on lived experience; it's primarily a question seeking advice.  Therefore, it fails to meet inclusion criteria 1, 2, and 4.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is related to Agile Software Development (ASD) as it involves a Scrum Master and Kanban methodology. However, it does not explicitly or implicitly address Technical Debt (TD) or any TD indicators. The focus is on managing cycle times and team performance, which does not align with the criteria for TD discussions. Therefore, it is a false positive based on the keywords related to ASD but lacks relevance to TD."
    },
    {
        "id": 21399,
        "title": "How does a \"rockstar\" performer integrate into an Agile team?",
        "body": "<p>I have this issue for a while now: \"rockstars\" (e.g. a contractor or freelancer, who's very good technically) tend to be quite independent and reject any form of process. Many of them don't have the patience to learn about the process, as they focus on building things and are driven by tangible results.</p>\n\n<p>But on the other hand, many of them don't work well in a team, as they feel restrained by the team, rules, even Agile frameworks (not even mentioning Scrum, because Scrum seems to be the devil for these guys).</p>\n\n<p>My question is: <strong>how do you use Agile to make sure you keep these guys in the company?</strong> They are mostly very talented individuals, but how can you use the tools Agile offers to help them have their freedom but also work with others?</p>\n\n<p>*I do realise this is more of a people / group dynamics question but I find that many issue come from creating an Agile team, rather than using the right practices with people that have no issue with using Agile.</p>\n",
        "score": 3,
        "creationdate": "2017-04-05T02:54:22.580000",
        "viewcount": 1180,
        "tags": "|agile|team|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon team dynamics and challenges in integrating individual contributors into an Agile team, it does not explicitly or implicitly address Technical Debt.  The focus is on managing the behavior and integration of high-performing individuals, not on code quality, processes, or any indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on integrating 'rockstar' performers into Agile teams, which is more about team dynamics and people management rather than Technical Debt (TD). There is no mention of TD indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is related to Agile Software Development (ASD) but does not address TD explicitly or implicitly. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 21409,
        "title": "When should I use user stories and when just tasks?",
        "body": "<p>I'm not sure if it makes sense to always write user stories, even for issues like refactor or backup.</p>\n\n<p>In your opinion in which of the following situations, it's better to write user stories than tasks:</p>\n\n<ul>\n<li>features</li>\n<li>bug fixes</li>\n<li>additional tests</li>\n<li>refactor</li>\n<li>documentation</li>\n<li>continuous integration</li>\n<li>integration (GitHub with Slack, Jira with Slack...)</li>\n<li>error handling</li>\n<li>vulnerabilities fixes</li>\n<li>deployment</li>\n<li>performance improvement</li>\n<li>research</li>\n<li>import of data from another system</li>\n<li>appearance improvement</li>\n<li>portability improvement</li>\n<li>SEO improvement - database backup</li>\n</ul>\n\n<p>Of course it's fine when I can write a user story to a feature and within this US tasks like UX, backend, frontend, refactor, research, SEO...</p>\n\n<p>However sometimes after completing a user story we want to refactor, improve performance, improve appearance...</p>\n",
        "score": 1,
        "creationdate": "2017-04-05T14:08:41.110000",
        "viewcount": 2479,
        "tags": "|scrum|user-stories|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions refactoring and performance improvement, which can be related to technical debt, it primarily focuses on the choice between user stories and tasks in Agile methodologies.  There's no description of an existing scenario with real-world examples of technical debt, nor is there a defined technical debt indicator. The core of the discussion is about Agile project management, not the existence or management of technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the use of user stories versus tasks in Agile Software Development, but it does not explicitly or implicitly relate to Technical Debt. There are no mentions of poor-quality code, lack of tests, duplicated code, or other TD indicators. The discussion is more about project management practices rather than addressing issues related to Technical Debt."
    },
    {
        "id": 21467,
        "title": "How do you handle the relationship and responsibilities of `Product Owner` and `Scrum Master`?",
        "body": "<p><strong>BACKGROUND</strong></p>\n\n<ul>\n<li>Onboarded with small startup ~15 people (40% Tech, 40% Sales, 20%\nOperations).  </li>\n<li>Everyone on team is onboard to start formalizing Scrum processes</li>\n<li>CEO drives vision of product, CTO executes on product, Operations formalizes Scrum process</li>\n</ul>\n\n<p><strong>QUESTION</strong></p>\n\n<ol>\n<li>How do you handle the relationship and responsibilities of <code>Product Owner</code> and <code>Scrum Master</code> when the CEO drives the vision of the product, the CTO is only worried about creating/executing on sprints, and the Ops team is tasked with collecting and formalizing requirements (obtained from sales &amp; customer success teams) while officiating the Scrum process?</li>\n</ol>\n\n<p><em>NOTE: The CEO specifically wants the Ops team to carry the majority of the responsibility for running the Scrum process (the CTO is in agreement). The CEO primarily wants to check in and help with User Story inputs (as the CEO is typically working with clients on partnerships and often receives feature requests).</em></p>\n",
        "score": 3,
        "creationdate": "2017-04-13T16:02:17.907000",
        "viewcount": 956,
        "tags": "|scrum|agile|scrum-master|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Scrum and a startup environment, it does not address Technical Debt (TD) either explicitly or implicitly.  The focus is entirely on organizational roles and responsibilities within a Scrum framework, not on code quality, development challenges, or any indicators of TD. There is no mention of poor code quality, lack of testing, duplicated code, or any other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the roles and responsibilities of the Product Owner and Scrum Master within a startup's Scrum process. It does not address Technical Debt (TD) explicitly or implicitly, nor does it describe any existing scenario related to TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is related to Agile Software Development (ASD) but lacks any connection to TD, making it a false positive based on the research protocol."
    },
    {
        "id": 21575,
        "title": "How can we fix Sprint Planning meetings that are unproductive?",
        "body": "<p>Currently, we have split \"Sprint Planning Meeting\" into two parts:</p>\n\n<ol>\n<li><p>SPM1 - This we do at the first day of the sprint. Product owner discusses the stories that have come into the current sprint from Backlog. All stories are already discussed in Backlog so we don't have much here. Mostly we discuss if something was pending or not clear in backlog. Post this meeting, PO makes sure that team has 100% clarity about the stories.</p></li>\n<li><p>SPM2 - This is a purely technical discussion. We don't include PO here. We break stories into the testable task so that team member gets broad overview what needs to be executed, what is expected of each task, facilitate parallel development. </p></li>\n</ol>\n\n<p>The problems we are facing:</p>\n\n<ol>\n<li>SPM1 Problem - There are fewer things to discuss. The team is not convinced on exact agenda of the meeting, they say why don't we discuss complete thing in Backlog only. (We have two backlogs in a sprint). The rest dependencies they suggested can be discussed via email etc.</li>\n<li>SPM2 Problem - We struggle with creating tasks from stories. We don't have clear idea to what depth things should be discussed. Should discussion include which code layer i.e BL,DAL,UI, what code would be put OR just how different systems would connect with each other i.e. breaking of functionality and leaving rest to the developer?</li>\n</ol>\n\n<p>Some additional context:</p>\n\n<ul>\n<li>Team size: 5 developers, 1 tester, 1 Product Owner</li>\n<li>Sprint length: two weeks </li>\n<li>Average production experience of developers/tester: 2 years</li>\n</ul>\n\n<p>Are we doing something wrong here? Should we split \"Sprint Planning Meeting\" into two parts like this, is it standard scrum practice? How should we resolve these problems?</p>\n",
        "score": 3,
        "creationdate": "2017-05-06T06:29:57.883000",
        "viewcount": 1148,
        "tags": "|scrum|agile|planning|meetings|sprint-backlog|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in sprint planning within an Agile context (two-week sprints, backlog, etc.), it does not explicitly or implicitly address Technical Debt.  The problems described relate to process inefficiencies and lack of clarity in task breakdown, not to code quality issues, lack of testing, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the structure and productivity of Sprint Planning Meetings in an Agile context but does not relate to Technical Debt (TD). There are no explicit or implicit references to TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is about process improvement rather than addressing TD in Agile Software Development."
    },
    {
        "id": 21586,
        "title": "pivotal tracker chore: Should chores be estimated or not?",
        "body": "<p>To give a background, We are web automobile company having a new and used cars portal, something like <a href=\"http://www.autotrader.com/\" rel=\"nofollow noreferrer\">autotrader usa</a></p>\n\n<p>We have lots of technical debt pending i.e. moving our pages to new backend technology, updating the versions of various open source modules we have integrated, modularizing the javascript etc.</p>\n\n<p>The problem is, should we give points to these or not?</p>\n\n<p>Why team wants point for chores:</p>\n\n<ol>\n<li>There is a lot of legacy code that team says should now be considered as a feature since the majority of the team members never worked at the time when this legacy code was put to production.</li>\n<li>They say velocity measures \"how fast team delivers\", why shouldn't we count things like exploring new technology like a unit testing framework or new UI framework like React, upgrading existing software to higher versions, moving to better technology in the team's velocity, isn't these things worthy enough in fast moving technical world?</li>\n<li>Many times PO suggest to take short cut approach rather than ideal technical approach either due to business pressure or to quickly see the results. If the experiment succeeds,the same thing needs to be done in a proper manner. This is technical debt, why shouldn't we count this in velocity?</li>\n<li>Automating release process- this does not impact customers life, so it should be chore ideally. But it saves team's time and headache. Why we shouldn't give points to it?</li>\n</ol>\n\n<p>Why it shouldn't be given points:</p>\n\n<ol>\n<li>I believe if the team is smart enough to pick right chore activities time to time, this would automatically start showing up in velocity in future sprints. For example, if they start using a unit testing framework (done as a chore with no points), in future, there would be fewer bugs and team would be able to deliver more.</li>\n<li>If a team has to deliver 300 points in next 3 months, and they ask PO for clearing technical debt in the first month, so the team would be delivering 0 points in the first month. But the team should pick stories that would clear all technical hurdles so that team now can deliver 300 points in next 2 months. This would motivate the team to pick the business aligned technical debts and not random stuff to decorate their resume.</li>\n</ol>\n",
        "score": 0,
        "creationdate": "2017-05-09T17:35:52.960000",
        "viewcount": 863,
        "tags": "|scrum|agile|pm-software|pivotal-tracker|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses technical debt within an Agile context.  The post details a real-world scenario in an automobile company using Pivotal Tracker, highlighting the team's struggle with prioritizing and estimating technical debt (refactoring legacy code, upgrading dependencies, improving testing).  The discussion clearly defines multiple TD indicators (legacy code, outdated modules, lack of modularity, shortcuts leading to rework) and explores the impact on velocity and team morale. The author's arguments for and against assigning points to chores directly relate to the management of TD within an Agile framework.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it explicitly mentions 'technical debt' and describes scenarios involving legacy code, shortcuts due to business pressure, and the need for modernization. It provides a real-world scenario from a web automobile company dealing with TD issues, fulfilling the inclusion criteria of describing an existing scenario based on lived experience. The discussion also implicitly defines TD indicators such as legacy code, shortcuts, and the need for modernization. Additionally, it is set in the context of Agile Software Development (ASD), as it discusses velocity and sprint planning, which are key elements of agile methodologies. Therefore, it meets all the inclusion criteria and is rated as 'Excellent' for its comprehensive coverage of TD in an ASD context."
    },
    {
        "id": 21588,
        "title": "pivotal tracker chore: Should chores be picked regularly or one complete sprint should be dedicated to it? At what rate velocity should increase",
        "body": "<p>What is ideal scrum approach:</p>\n\n<ol>\n<li>To fix bandwidth i.e. 10% of every sprint to clear off the technical debt?</li>\n<li>To dedicate one/two sprint every year to clear off these debts?</li>\n</ol>\n\n<p>I believe both has its pros and cons like in \n(1) we can measure things constantly i.e. if we are doing right things or are we off track? In case we are off track, next sprint we can try something else. While in (2) the continuity would lead to more work as complete team would be thinking in the same direction but with greater risk as it would be big code changes.</p>\n\n<p>Suggestions?</p>\n",
        "score": -1,
        "creationdate": "2017-05-09T18:20:23.143000",
        "viewcount": 116,
        "tags": "|scrum|agile|pm-software|pivotal-tracker|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion explicitly addresses technical debt and its management within an Agile Scrum context. The user is asking about different approaches to handling technical debt within sprints, which is a core concern in ASD. The discussion presents a real-world scenario of how to allocate time for TD, making it relevant to the study. While it is a question, it is based on a real scenario and not hypothetical.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions 'technical debt' and explores strategies for addressing it within a Scrum framework (an Agile methodology).  It presents a real-world problem faced by the author, considering two approaches to tackling technical debt: allocating a percentage of each sprint or dedicating entire sprints periodically. While it doesn't explicitly detail specific indicators of technical debt, the context clearly implies the existence of such issues that need addressing. The author's reflection on the pros and cons of each approach further strengthens the relevance to the study.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily advice-seeking and hypothetical, lacking a real-world scenario or lived experience. It does not provide specific examples or evidence of Technical Debt in an Agile Software Development context. The mention of 'technical debt' is not supported by a detailed description of a TD indicator or an existing scenario, making it a false positive."
    },
    {
        "id": 21666,
        "title": "How can these problems with agile be solved?",
        "body": "<p>I'm a lead developer and for the last four years I've owned a code base which has steadily been improving in quality.  I worked at a fairly small company and we previously worked in small waterfall cycles.  Typically we'd do a release of our software every 3-&gt;5 months.  We didn't use many formal project management methods but we had a good team and everybody was intensely collaborative.  I spent the vast majority of my time writing features, fixing bugs and improving the code base as I saw fit.  I refactored code when I thought we were starting to see too many bugs in that area and I focused on trying to make our code unit testable and of high quality.  QA would pick up our work once features became dev complete but we didn't work in sprints.  It's fair to say that things didn't always go smoothly and we did have some quality problems but productivity was very high.</p>\n<p>Fast forward to now..  We've been bought by larger company who have already fully adopted agile methodologies.  We've had to adopt their processes and some in our team were very keen to move to full agile.  Initially, for a period of about 2/3 months our work ground to a halt.</p>\n<ul>\n<li>Decisions that were previously made quickly and efficiently, ad-hoc, by groups of interested individuals became part of the grooming process and we found that design by committee took forever compared to what we did before.</li>\n<li>A great deal of our time was taken up by grooming and planning meetings and at one point I realized that more than 50% of my time was now used for meetings.</li>\n</ul>\n<p>Over time, during our retrospectives we've improved this process.  One of the things we did was to get individual team members to pre-groom Product Backlog Items (PBIs) so that some of the thinking had been done in advance and we didn't have to spend quite so much time just thrashing out the basics of each item during the meetings.</p>\n<p>However, some problems still remain..  Here are the big ones for me:</p>\n<ul>\n<li><p>Generalization and group think has reduced the extent to which anyone &quot;owns&quot; the code base.  This has been really bad and it feels to me like the code base has been left to rot.  Nobody can do anything of any significance to it without a massive discussion first and all those little tasks that used to just happen for free no longer happen.  Instead specialists who used to do this stuff are busy doing other things which are the sprint priority even though they do them very slowly.  There's basically no time left to put serious thought into our code.  Over the longer term I think we'll pay a big price for this.</p>\n</li>\n<li><p>Developer passion has gone..  Nobody wants to spend so much time in meetings and all the decision making power has evaporated leaving the devs demotivated.  Decisions about what development tasks should be undertaken are now often taken by testers or others who don't actually understand the code and so now everybody just drudges on not really enjoying their work like they used to.</p>\n</li>\n<li><p>Generalization is wasting our time and damaging our code.  Right now I'm trying to learn a new programming language to fix one bug and bugs that I could be fixing in a language I know are being fixed by another scrum team by a guy who I don't think knows the code in that area well enough to be able to efficiently or effectively fix it.  This kind of thing has already caused us some quality problems.</p>\n</li>\n</ul>\n<p>So, how can we fix this within Scrum?  We can't get rid of the process, but can we change it somehow so that we can work effectively again?</p>\n",
        "score": 3,
        "creationdate": "2017-05-24T12:23:07.933000",
        "viewcount": 494,
        "tags": "|scrum|agile|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion clearly meets all inclusion criteria. It explicitly describes challenges faced after adopting Agile methodologies, directly relating them to a decline in code quality and developer morale.  The author details several indicators of technical debt, including a lack of code ownership leading to code rot, inefficient bug fixing due to lack of specialization, and reduced time for code improvement and refactoring. The scenario is based on lived experience within an Agile context, making it highly relevant to the study.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is highly relevant to Technical Debt (TD) in Agile Software Development (ASD). It explicitly describes a scenario where the transition to agile methodologies has led to issues such as code ownership loss, reduced developer passion, and inefficient task allocation, which are indicators of TD. The author provides a real-world example of how agile processes have impacted their team's productivity and code quality, meeting the criteria for lived experience. The discussion is clearly situated within an ASD context, as it involves the adoption of Scrum and agile practices. Overall, it provides actionable insights into the challenges faced during the agile transition, making it an excellent fit for the study."
    },
    {
        "id": 21696,
        "title": "How to ensure sprint tasks are bug free before release",
        "body": "<p>I was asked this question in an interview, and couldn't figure out the solution, so I thought I will come here. </p>\n\n<p>Basically, I was mostly working as a developer, and had my own set of unit tests for the tasks I was finishing. But if I was a product owner or scrum master, then how will I ensure that development team has created enough unit tests, or tested the code properly?</p>\n\n<p>I think we can have acceptance testing, or even consider the bugs as part of next sprint. There is another option of having product owner and scrum master create a set of basic tests during sprint meetings. But that will cause the sprint meeting to run for hours. These are the two possible ideas that I could suggest. </p>\n\n<p>Is there any other way, a product owner can ensure the quality?</p>\n",
        "score": 2,
        "creationdate": "2017-05-26T16:20:09.620000",
        "viewcount": 499,
        "tags": "|scrum|testing|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is primarily an advice-seeking question about ensuring code quality in an Agile context. While it touches upon testing and implicitly relates to potential technical debt (if insufficient testing leads to bugs), it lacks a description of an existing scenario based on lived experience.  There's no concrete example of a real-world situation with technical debt indicators. The question focuses on preventative measures rather than addressing an existing problem of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on ensuring sprint tasks are bug-free, which is related to quality assurance practices in Agile Software Development. However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The question is hypothetical and advice-seeking, lacking a real-world scenario or lived experience. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 21741,
        "title": "Did i good to do quick fixes, couple minutes before deadline.",
        "body": "<p>I took part in a above one year lasting project. It is website with couple additional functionalities for a rather important institution. ( in my subjective opinion ). At date 0 there was deployment of website to the public. So 22 may was website start. There were many bugs and features from a client, that at the day 19 may weren't fixed, developed. Three days before deadline i was delegated to go to a client and discuss with them and help with deployment. Client who was dozen of people told me all mistaked during three days, two meetings a day. Boss of my company went to vacation and i had to deploy website. We arranged with boss a small budget to me for helping with some bugs. And up to deadline hour i made with only my strenghts couple of fixes so final effect of website was without any mistake told by dozens of people. So in my opinion final effect to the users was ok. Because without that mistakes, as client wanted, who knows his users. \nAnd now...\nCompany who delivered most of code to website is very unhappy with my changes - that are telling about maintaining code. And also are unhappy about bugs in console. I am asking, everything is working on website, final effect is ok, i did a lot of things to a deadline as much as i could. Now the final effect is ok, but around this, people in my company may seem to be unhappy about quality of fixes i made to the end. It's not Mars mission, but website - some mistaked in javascript console can be turned off. \nI even don't count on extra money because i did this, it was just a matter of my abilities - i have seen i had access to code, i am experienced programmer, so i repaired this as client wanted. </p>\n",
        "score": 0,
        "creationdate": "2017-06-02T10:15:17.630000",
        "viewcount": 116,
        "tags": "|deadline|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario where last-minute fixes were implemented to meet a deadline.  While not explicitly mentioning 'technical debt,' the narrative implicitly points to it through the description of rushed fixes ('couple of fixes'), resulting in unhappiness from the development team regarding maintainability and console errors. The context clearly involves an Agile project (implied by the short timeframe and iterative nature of addressing client feedback), fulfilling the inclusion criteria. The lack of explicit detail on the Agile methodology used slightly lowers the relevance to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it involves quick fixes made under time pressure, which is a common indicator of TD. The scenario is based on lived experience, describing a real-world situation where the author had to make last-minute changes to meet a deadline. The TD indicator is implicit, as the quick fixes led to maintenance issues and bugs, which are typical consequences of TD. The context is related to Agile Software Development, as the author mentions working on a project with a tight deadline and client interactions, which are common in ASD environments. However, the discussion lacks depth in exploring the broader implications of TD, hence the 'Good' relevance rating."
    },
    {
        "id": 21749,
        "title": "Deal with unestimated Defect-Tasks in Sprint for Veloctity calculation",
        "body": "<p>As said many times before (<a href=\"https://pm.stackexchange.com/questions/12743/how-do-we-deal-with-bugs-in-scrum-environment\">1</a>, <a href=\"https://pm.stackexchange.com/questions/8098/handling-bugs-in-the-scrum-process\">2</a>, <a href=\"https://pm.stackexchange.com/questions/5339/tracking-points-spent-on-bugs-during-sprint\">3</a>): </p>\n\n<blockquote>\n  <p>\"Do not estimate bugs / defects\".</p>\n</blockquote>\n\n<p>I know in Scrum we try to minimize the defect rate, but it happens now and then. Fixing such unestimated tasks might have big effects on the actual velocity of the team. I wonder if there is some kind of proceeding or formula to make this visible to the team and to others?</p>\n\n<p>Or is it just, that an increase of defect rate (= drop of velocity) is a sign we should pay more attention to our QA?</p>\n\n<p>As we do not estimate Bugs, this one is not a duplicate of that question: <a href=\"https://pm.stackexchange.com/questions/5339/tracking-points-spent-on-bugs-during-sprint\">Tracking points spent on bugs during sprint</a></p>\n",
        "score": 3,
        "creationdate": "2017-06-03T18:00:19.317000",
        "viewcount": 168,
        "tags": "|scrum|agile|estimation|bugs|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion revolves around the impact of unestimated defect-tasks on team velocity within a Scrum environment, which is a clear indicator of technical debt. The author describes a real-world scenario where fixing bugs affects the team's velocity, implicitly pointing to the presence of poor-quality code or insufficient testing. The context is explicitly Agile, referencing Scrum and sprints. While the discussion doesn't explicitly use the term technical debt, the underlying issue of defects impacting velocity is a common manifestation of it. The discussion is relevant to the study, although it could be more explicit about the connection to technical debt.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions defects and their impact on velocity in a Scrum context (Agile), it does not explicitly or implicitly address Technical Debt.  The focus is on how to handle unestimated bug fixes during a sprint, a process issue rather than a discussion of code quality or design compromises that constitute Technical Debt.  There's no mention of code quality, lack of testing, duplicated code, or other indicators of TD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses the issue of defect rates affecting team velocity, which can be considered a TD indicator. It describes an existing scenario where the author is dealing with unestimated defect tasks in a Scrum environment, thus providing a real-world context. The discussion is clearly related to Agile Software Development (ASD) as it mentions Scrum, an agile methodology. However, the discussion lacks depth in exploring solutions or insights into managing TD, which affects its relevance rating."
    },
    {
        "id": 21912,
        "title": "Retrospective - too many small and random problems. Death by a thousand needles",
        "body": "<p>After reading some literature about retrospective and actions it is not clear to me what to do if team faces big variety of random and small issues during sprint, and these problems do not occur often.</p>\n\n<p>For example, there is: - a bad code region where it is hard to implement new features, but features that touch this code come 1-2 times per year(of course this is just an observation of the historical events and there is no guaranty that this will not change in a month). It will take 1 week to, refactor the code; - Or there was a rare story that requires complicated deployment process, but the same, such stories/tasks happen few times per year and it usually takes 2 days to do it.</p>\n\n<p>Because actions from retrospective take teams time that can be dedicated to implement new product features it is not clear if team should pick any of such actions.</p>\n\n<p>Should team just take the biggest impactful problem despite the fact that it is rare? Or should it collect more data and don't take any action items from retro( besides data collection)?</p>\n",
        "score": 3,
        "creationdate": "2017-06-29T04:53:31.360000",
        "viewcount": 433,
        "tags": "|retrospective|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real scenario where the team faces issues related to technical debt, such as a bad code region that is hard to implement new features and a complicated deployment process. These are indicators of TD. The context is within an agile environment, as the discussion is about retrospective meetings and actions. The author is seeking advice on how to prioritize these issues, which are not frequent but still impact the team's work. The discussion is not hypothetical, it is based on the team's experience.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development (e.g., bad code regions, complicated deployment processes), it primarily focuses on a retrospective meeting and prioritization of action items.  It does not explicitly or implicitly define a Technical Debt indicator based on lived experience.  Although it hints at potential TD, it lacks concrete examples of existing issues and focuses more on a hypothetical problem-solving scenario.  There is no mention of Agile methodologies.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it mentions 'bad code region' and 'complicated deployment process,' which are indicators of TD. It describes an existing scenario based on lived experience, discussing real-world issues faced during sprints. The discussion implicitly defines TD indicators such as poor-quality code and time management difficulties. It is related to Agile Software Development (ASD) as it discusses retrospectives and sprints, which are elements of agile methodologies. However, the discussion lacks depth in exploring the impact of these issues on the team or project, which is why it is rated as 'Good' rather than 'Excellent.'"
    },
    {
        "id": 22052,
        "title": "Time estimates and epics as releases",
        "body": "<p>My company is slowly adopting Scrum and I am doing my best to try to push us away from old Waterfall paradigms. However there are certain aspects I am finding quite hard to map in Team Foundation Server (TFS - visualstudio.com).</p>\n\n<p>The challenges I have at the moment are as follows. I am quite new to Scrum so any advice/critique is highly appreciated:</p>\n\n<ul>\n<li>Investors require dates of high level estimates for certain milestones. For example, when should we expect a MVP (minimum viable product) to be ready. However, only tasks can be measured in hours. How can I provide the investors with a good set of proposed milestone dates in this case?</li>\n<li>I was told that Ideally, we should <strong>NOT</strong> use EPICS to represent a release. But since I see no other viable way of achieving this in TFS, I created an Epic called 'Minimum Viable Product' and added the features we want there. Thoughts?</li>\n<li>Finally, I got contradicting opinions on whether operational aspects of the product development should be included in TFS or not. Things such as <em>'decide on framework', 'set-up development environment',</em> etc. One Scrum Master tells me we should NOT do this because Scrum should only list product deliverable, while the other told me told me that it is obvious that these things should be there as we need to account them in the product development.</li>\n</ul>\n\n<p>Here is a screenshot of my backlog at this point:\n<a href=\"https://i.stack.imgur.com/uElXy.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.stack.imgur.com/uElXy.png\" alt=\"My TFS backlog at this point\"></a></p>\n",
        "score": 2,
        "creationdate": "2017-07-24T09:48:30.683000",
        "viewcount": 1127,
        "tags": "|scrum|agile|tfs|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in Scrum adoption and time management difficulties (which could be implicitly related to TD), it does not explicitly or implicitly define any TD indicators.  The focus is on project management and Scrum implementation within TFS, not on code quality issues or technical debt itself. There is no mention of poor code quality, lack of tests, duplicated code, or other indicators of technical debt.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about transitioning from Waterfall to Scrum and managing project elements in TFS. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on project management challenges rather than TD in Agile Software Development. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 22100,
        "title": "Should bug fixes be deployed as soon as they're ready?",
        "body": "<p>I'm changing the development methodology in my team. When I joined the company, there was no methodology whatsoever (basically, patch 'n' deploy) and in consequence we have 400k of spaghetti unmaintainable untested code.</p>\n\n<p>I proposed a look into the Agile approach, and a we're doing a (quasi-)Scrum approach. Several months passed from the day I suggested releases based on sprints (rather than 3+ releases per day full of bug fixes) to the day my manager saw the benefits of this per-cycle release approach.</p>\n\n<p>However, (since we have no tests nor QA and the whole thing is a legacy monolith, and) since we're mostly doing bug fixes (23 bug and UI-fixes, 2 User Stories last sprint) my manager feels it's weird we have to wait till the end of the sprint to release all those bug fixes.</p>\n\n<p>I come from a background where we're usually backed up by automatic tests, and since we barely have to deal with bugs (1 or 2 bugs per sprint), we see no harm in deploying them along with big changes (like 4 or 6 user stories). So, since that is not the case in this company, should bug fixes be deployed as soon as they're done? Or should we deploy them at the end of the sprint along with the new features to maintain a commitment?</p>\n",
        "score": 12,
        "creationdate": "2017-07-31T13:42:13.690000",
        "viewcount": 4444,
        "tags": "|scrum|agile|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses technical debt. The author describes a legacy system with '400k of spaghetti unmaintainable untested code,' directly indicating poor code quality and lack of tests \u2013 key indicators of technical debt.  The context is explicitly within an Agile (Scrum) transition, fulfilling the ASD requirement. The author's lived experience in two different companies provides a strong real-world context, making it an excellent example for the study. The question of whether to deploy bug fixes immediately or at the end of a sprint further highlights the challenges of managing technical debt within an Agile framework.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is directly related to Technical Debt (TD) as it mentions 'spaghetti unmaintainable untested code,' which is a clear indicator of TD. It describes an existing scenario based on the author's lived experience in transitioning to Agile methodologies, specifically a quasi-Scrum approach. The discussion highlights challenges such as lack of tests and the need for better time management, which are relevant TD indicators. Additionally, it is explicitly related to Agile Software Development (ASD) as it discusses the adoption of Scrum practices. The discussion provides actionable insights into the impact of TD on release management in an Agile context, making it highly relevant."
    },
    {
        "id": 22155,
        "title": "How do I facilitate an effective planning meeting with a remote team?",
        "body": "<p><strong>Background</strong>\nI am a scrum master for a team consisting of a PO, team lead and 3 developers. The team lead and 3 developers are off-shore in a totally different timezone. The PO is in the same office as me.</p>\n\n<p><strong>Problems</strong></p>\n\n<ul>\n<li>Backlog grooming meeting is not working as they want to design the solution during the meeting. They want to estimate only when they understand and have largely designed the solution</li>\n<li>They want to take 'breaks' to discuss things in their native language</li>\n<li>They don't want to create user stories themselves which is fine, but they don't agree with the way the PO splits the stories either.</li>\n</ul>\n\n<p><strong>Question</strong></p>\n\n<ul>\n<li>How do I facilitate an effective planning/grooming/refinement/triage meeting effectively given this scenario?</li>\n</ul>\n\n<p>I have taken a stab at solving my problem and this is what I came up with:</p>\n\n<ul>\n<li>The PO and I do a user story mapping session just us 2 and come up with an initial set of user stories, and activities and then using the planning meeting to ratify and estimate with the team.</li>\n</ul>\n",
        "score": 4,
        "creationdate": "2017-08-07T14:35:26.453000",
        "viewcount": 520,
        "tags": "|user-stories|scrum-master|product-management|product-owner|planning-poker|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in a software development team (time management difficulties, communication barriers), it does not explicitly or implicitly refer to Technical Debt.  The problems described relate to team dynamics, communication, and process in an Agile setting, but there's no mention of code quality, lack of testing, duplicated code, or other indicators of technical debt. The focus is on improving the planning and grooming process, not addressing existing technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on facilitating effective planning meetings with a remote team in a Scrum context. While it mentions challenges in backlog grooming and user story creation, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, the discussion does not describe an existing scenario of TD or relate to Agile Software Development (ASD) in terms of TD management. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 22361,
        "title": "Organization structure in startup",
        "body": "<p>I was given the role of managing 5 different teams (iOS, Android, Backend, Firmware and Hardware (electronics)). All these teams consist of no more than 4-5 developers. There is also a QA team (2 engineers) and they are testing all the components, either feature or new firmware.</p>\n\n<p>All teams used to work separately with their own boards, backlogs, and sprints. Last month we started working on features dividing it on stories and moved iOS, Android, and backend to one dev board. \nCurrently, we have 1-2 dynamic feature teams, as some features can have different lifetime and require different developer pairs (for example, iOS+Android+Backend or FW+Backend, etc.) and individuals who are working on small tasks/tech debt or other items.</p>\n\n<p>I need to understand:\n- What would be the best organization structure of the above teams? Currently, I don't have any idea but to continue working as small feature teams.\n- How to estimate the productivity of each team member within one board where we are tracking either features or individual tasks. I understand that it would be better to track velocity of the TEAM, however, teams are kinda changing from feature to feature and not stable enough to trust the velocity.</p>\n\n<p>Thank you in advance!</p>\n",
        "score": 2,
        "creationdate": "2017-09-06T14:30:00.743000",
        "viewcount": 433,
        "tags": "|team-management|planning|development-process|organizational-structure|process-improvement|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario within an Agile context, where multiple teams are working on features and addressing tech debt. The author explicitly mentions 'tech debt' as a task type, which is a clear indicator of TD. The context of feature teams, sprints, and backlogs indicates an Agile environment. While the primary focus is on organizational structure and productivity, the mention of tech debt within the described workflow makes it relevant to the study.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt (TD) through the mention of \"small tasks/tech debt.\"  It describes an existing scenario in an agile environment (multiple teams, sprints, backlog) and the author's struggle to manage it. While the focus is on organizational structure and team productivity, the inclusion of 'tech debt' as a task type satisfies inclusion criterion 1 and 3. The context clearly relates to Agile Software Development, fulfilling criterion 4. The lack of explicit detail on the nature of the tech debt slightly lowers the relevance to 'Good' instead of 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions 'tech debt' in passing but does not focus on Technical Debt as a primary topic. It primarily seeks advice on team organization and productivity estimation in a startup environment, without providing a real-world scenario related to TD. Additionally, while it involves Agile practices like sprints and boards, it lacks specific TD indicators or lived experiences related to TD in Agile Software Development."
    },
    {
        "id": 22481,
        "title": "Can I convert relationships in MS Project from Start-to-Start to Finish-to-Start? Is there any equation for it?",
        "body": "<p>I have a MPP file with Start-to-Start relationship between tasks. But when I import to MPP in one project, I need to convert it to Finish-to-Start relationship because the system only supports finish-to-start relationships.</p>\n",
        "score": 0,
        "creationdate": "2017-09-28T07:05:37.863000",
        "viewcount": 101,
        "tags": "|ms-project|project-management-style|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on converting task relationships in MS Project, a project management tool.  While it mentions importing into a system with limitations, there's no mention of Technical Debt, Agile methodologies, or any indicators of poor code quality, lack of documentation, or other issues related to software development. The problem is purely related to project scheduling and not software development practices.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about converting task relationships in MS Project from Start-to-Start to Finish-to-Start. It does not relate to Technical Debt or Agile Software Development. There is no mention of TD indicators or ASD context, making it irrelevant to the study."
    },
    {
        "id": 22680,
        "title": "How requirements are handled in TFS with Scrum template",
        "body": "<p>We have just started using TFS (Team Foundation Server) 2017. The team project we created uses the Scrum template. There are only Epics, Features and PBIs (Product Backlog Items) in this template. How to create requirements? We don't want to use a CMMI (Capability Maturity Model Integration) template.</p>\n\n<p>So, the question is: how are requirements created/managed/manifested in the Scrum template?</p>\n",
        "score": 1,
        "creationdate": "2017-10-25T11:23:32.633000",
        "viewcount": 2331,
        "tags": "|scrum|requirements|tfs|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on requirements management within TFS using the Scrum template. While it mentions Scrum (an Agile methodology), it does not discuss Technical Debt (TD) either explicitly or implicitly.  There is no mention of code quality, testing, documentation, or any other indicators of TD. The question is purely about process and tool usage, not about addressing or managing technical debt within a project.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on handling requirements in TFS using the Scrum template, which is related to Agile Software Development. However, it does not address Technical Debt explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or any other TD indicators. The discussion is primarily about project management within a Scrum framework, not about managing or identifying Technical Debt."
    },
    {
        "id": 22716,
        "title": "Should building microservices be a chore or a feature in scrum?",
        "body": "<p>We have recently started splitting a big monolith to individual microservices. Now the point of discussion is that under scrum methodology, <strong>building microservices should be a feature or chore?</strong></p>\n\n<p>As per the scrum protocols, anything that doesn't provide direct value to users should not be a feature.</p>\n",
        "score": 1,
        "creationdate": "2017-10-30T11:39:43.570000",
        "viewcount": 992,
        "tags": "|scrum|agile|project-management-style|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions microservices, which can be related to technical debt (e.g., refactoring a monolith can be a way to address existing TD), it does not describe an existing scenario based on lived experience. It's primarily a question about how to categorize microservice development within Scrum, lacking real-world examples of TD.  Therefore, it fails to meet inclusion criteria 2 and does not explicitly or implicitly define a TD indicator (criterion 3).",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the classification of building microservices within the Scrum framework, debating whether it should be considered a feature or a chore. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of real-world scenarios or lived experiences related to TD. While the discussion is related to Agile Software Development (ASD) through its reference to Scrum, it does not meet the criteria for inclusion as it lacks a connection to TD."
    },
    {
        "id": 22753,
        "title": "What happens when the PBI in a sprint are done but the sprint timebox hasn't expired?",
        "body": "<p>I know that if PBI's cannot be completed within a sprint they can be re negotiated with the product owner </p>\n\n<p>Now again a sprint <strong>cannot be shorted or lengthened</strong> then the agreed time box unless the sprint <strong>goal is obsolete.</strong> So how does the situation play out when the agreed <strong>definition of done is met before the time box expires?</strong></p>\n",
        "score": 2,
        "creationdate": "2017-11-02T13:02:42.623000",
        "viewcount": 426,
        "tags": "|scrum|sprint|product-owner|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on sprint management within an Agile framework, specifically addressing the scenario where sprint backlog items are completed before the sprint timebox ends.  While it touches upon Agile practices, it does not discuss Technical Debt (TD) explicitly or implicitly. There is no mention of code quality, lack of testing, duplicated code, documentation issues, time management problems stemming from TD, or low team morale\u2014all indicators of TD. Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the management of Product Backlog Items (PBIs) within a sprint in Agile Software Development. It does not address Technical Debt (TD) explicitly or implicitly, nor does it discuss any TD indicators such as poor-quality code, lack of tests, or documentation issues. The question is about sprint time management and does not relate to TD in ASD."
    },
    {
        "id": 22807,
        "title": "How to optimise SPM2(Sprint Planning Meeting 2)?",
        "body": "<p>We are doing 2-week sprint. As per scrum guideline, 2-week sprint should not take more than 2 hours to complete. </p>\n\n<p>However, sometimes we take more than 8 hours to complete SPM2. I'm sure something is going wrong here. Below are aspects we cover during SPM2.</p>\n\n<ol>\n<li>Technical Analysis</li>\n<li>Sometimes we also refer code to bring better clarity</li>\n<li>Breaking stories in to tasks</li>\n</ol>\n\n<p>Most of the time consumed in step 1 &amp; 2.</p>\n",
        "score": 0,
        "creationdate": "2017-11-09T06:03:24.377000",
        "viewcount": 130,
        "tags": "|scrum|agile|planning|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions time management difficulties in sprint planning (an implicit indicator of potential Technical Debt if the time is spent resolving poorly understood or documented tasks), it lacks any explicit or implicit mention of Technical Debt itself.  There's no description of poor code quality, lack of tests, duplicated code, insufficient documentation, or other indicators of TD. The focus is solely on optimizing the sprint planning meeting's duration, not on addressing underlying technical issues that might contribute to the time overrun.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on optimizing Sprint Planning Meetings (SPM2) in a Scrum context, which is part of Agile Software Development. However, it does not explicitly or implicitly relate to Technical Debt (TD). The discussion is about time management in meetings, not about poor-quality code, lack of tests, or other TD indicators. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 22849,
        "title": "Creating defect stories and inserting them immediately",
        "body": "<p>When we have a story which can pass but produces a defect to be fixed, the PO or BA involved will usually write a new story and immediately insert it into the sprint on the basis that it is important enough because it is a business priority.</p>\n\n<p>Is this proper for scrum? If not, what should be done?</p>\n",
        "score": 2,
        "creationdate": "2017-11-14T13:41:34.843000",
        "viewcount": 669,
        "tags": "|scrum|product-owner|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions defects and prioritization within a sprint, it doesn't explicitly or implicitly address Technical Debt.  There's no mention of code quality, design flaws, shortcuts taken, or other indicators of TD. The focus is on process and prioritization of defect fixes within Scrum, not on the underlying causes of those defects which would be relevant to TD.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about the process of handling defect stories in a Scrum context, which is an Agile methodology. However, it does not explicitly or implicitly relate to Technical Debt (TD). There is no mention of poor-quality code, lack of tests, duplicated code, or other TD indicators. The focus is on prioritization and process adherence in Scrum, not on TD issues."
    },
    {
        "id": 22900,
        "title": "Meeting format for defining our definition of done",
        "body": "<p>Can anyone recommend a format for facilitating a definition of done meeting ie, a meeting to define the teams definition of done. </p>\n\n<p>I was thinking of first looking at artefacts and then associated a checklist with each eg epic, story, release and then definition of done for each of those. </p>\n\n<p>Any ideas would be greatly appreciated. </p>\n",
        "score": -1,
        "creationdate": "2017-11-20T13:04:21.163000",
        "viewcount": 182,
        "tags": "|agile|scrum-master|definition-of-done|agile-coach|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on defining a 'Definition of Done' in an Agile context, a process improvement activity. While a poorly defined DoD *could* contribute to technical debt, the post itself doesn't describe an existing scenario of technical debt, nor does it present any indicators of technical debt.  It's primarily a question seeking advice on meeting facilitation, lacking the real-world context and evidence of TD required for inclusion.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about facilitating a meeting to define a 'definition of done' in an Agile context. However, it does not relate to Technical Debt (TD) explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on process improvement rather than addressing or identifying TD. Therefore, it does not meet the inclusion criteria for discussions related to TD in Agile Software Development."
    },
    {
        "id": 23111,
        "title": "How do you plan for maintainence after a Scrum project",
        "body": "<p>My background is 6 years in managing \"normal\" projects in an outsourcing company. Recently I've joined a Scrum project.</p>\n\n<p>Here I see people not doing any documentation, no SRS (Software Requirement Specification), no Detailed Design, almost no documents of any sort. They only create some user stories, then start to code. They don\u2019t even create a database design but do \u201ccode-first\u201d and generate the database from code. </p>\n\n<p>So, the question is, how can you maintain such a codebase after the project is \u201cdone\u201d, say 3\u20135 year later, when all the current team members have moved on or can\u2019t remember what they did today?</p>\n",
        "score": 5,
        "creationdate": "2017-12-20T01:54:37.593000",
        "viewcount": 247,
        "tags": "|scrum|agile|maintenance|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario in an Agile (Scrum) project where the lack of documentation, detailed design, and database design (code-first approach) creates significant challenges for future maintenance.  This directly points to technical debt. While the author doesn't explicitly use the term 'technical debt', the described situation is a clear indicator of it. The question is based on lived experience within a Scrum project.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it implicitly addresses issues like lack of documentation and potential future maintenance challenges, which are indicators of TD. The scenario described is based on the author's real-world experience in a Scrum project, thus meeting the criteria for an existing scenario. The discussion is clearly within the context of Agile Software Development, specifically mentioning Scrum. However, while it highlights TD indicators, it lacks depth in exploring solutions or insights, which affects its relevance rating."
    },
    {
        "id": 23166,
        "title": "What could be potential harm of giving points to chores or technical debts?",
        "body": "<p>Recently our team has decided to give points to the chores. They had an argument that:</p>\n\n<ol>\n<li>Velocity defines team's capacity to deliver the work and if chores are not counted in velocity it won't reflect the true capacity of the team. As teams pick chores as per the business priorities/urgency i.e. in some sprint 1 or 2, in other up to 5 chores so, they feel the more chores they have the lesser would be velocity/capacity of the team in that sprint which might not be true.</li>\n<li>They feel chores also add value to the product i.e. if we have some duplicate logic and we plan to remove it as a chore. In long run, it would help us deliver and test things faster and hence, it delivers value indirectly to the user.</li>\n</ol>\n\n<p>What could be downside of this approach?</p>\n",
        "score": 0,
        "creationdate": "2017-12-28T19:29:23.443000",
        "viewcount": 161,
        "tags": "|estimation|story-points|pivotal-tracker|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly relates to technical debt ('chores' representing tasks addressing technical debt like removing duplicate logic).  It describes a real-world scenario within an agile team (points, velocity, sprint planning), fulfilling inclusion criteria 1, 2, and 4. While the post is primarily a question seeking advice, the description of the team's reasoning and the presented arguments regarding the impact of technical debt on velocity implicitly define a TD indicator (reduced velocity due to time spent on chores/debt reduction), satisfying criterion 3. The relevance is rated 'Good' instead of 'Excellent' because the focus is on the potential downsides of the approach rather than a detailed analysis of the existing TD situation.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it mentions chores that include removing duplicate logic, which is an indicator of TD. It describes an existing scenario based on the team's experience with assigning points to chores, thus meeting the criteria for lived experience. The discussion implicitly defines TD indicators such as duplicated code and time management difficulties. It is related to Agile Software Development (ASD) as it discusses velocity and sprint planning, which are key elements of ASD. However, the discussion lacks depth in exploring the downsides of the approach, which affects its relevance rating."
    },
    {
        "id": 23167,
        "title": "Should we create multiple stories for same thing to be replicated at code level?",
        "body": "<p>We have a page with the same content at 2 places. Since we are running with legacy code and due to some previously made bad decisions, we have duplicated the logic twice for the same thing. Both the pages are running on different technologies.</p>\n\n<p>Now if some changes/enhancement come to this, should we create two stories for this OR just one? And should we estimate it considering it would require duplicate effort OR it should be estimated as if its a code at just one common place?</p>\n",
        "score": -1,
        "creationdate": "2017-12-28T19:34:39.590000",
        "viewcount": 66,
        "tags": "|estimation|pivotal-tracker|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly describes duplicated code in a legacy system, a clear indicator of technical debt.  The question of how to manage this duplication within an agile framework (indicated by the use of 'stories' and estimation) satisfies the ASD criterion. While the author doesn't explicitly label it 'technical debt,' the duplicated logic and the resulting duplicated effort are strong indicators. The discussion focuses on a real-world scenario, fulfilling the 'existing scenario' criterion.  It's classified as 'Good' rather than 'Excellent' because the description of the agile context is implicit rather than explicit (e.g., mentioning a specific agile methodology).",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it mentions 'legacy code' and 'duplicated logic,' which are indicators of TD. It describes an existing scenario based on lived experience, discussing the challenges of managing duplicated code in a legacy system. The discussion implicitly defines TD indicators such as duplicated code and poor-quality code due to past decisions. It is related to Agile Software Development as it involves creating user stories and estimating effort, which are agile practices. However, the discussion lacks depth in exploring the impact of TD on the development process, which affects its relevance rating."
    },
    {
        "id": 23261,
        "title": "Measuring code productivity between team members",
        "body": "<p>First question, so here goes!</p>\n\n<p>Between two programmers on the same team, one has produced more code but more defects, whilst the other has produced around 20% less code but significantly less defects by KLOC.</p>\n\n<p>Does established convention (and academic agreement) dictate that the more productive programmer is the first individual? - Defined by his raw output, or can a case be made for the higher quality code?</p>\n",
        "score": 2,
        "creationdate": "2018-01-11T06:34:01.660000",
        "viewcount": 716,
        "tags": "|software-development|metrics|measurement|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions defects and code quality, it does not explicitly or implicitly refer to Technical Debt.  It focuses on a productivity comparison between two programmers, lacking any context related to Agile Software Development or the accumulation of technical debt over time. The question is primarily about measuring programmer productivity, not about managing or addressing technical debt within an Agile framework.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on measuring code productivity between team members, comparing quantity versus quality of code. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There is no mention of TD indicators or agile methodologies, making it irrelevant to the study's criteria."
    },
    {
        "id": 23331,
        "title": "Production bugs and epics in Jira",
        "body": "<p>We are trying to organize our epics in a better way. In the past, the epics remained indefinitely open on Jira. Every production support/bug ticket will be added to the exsiting epic. However, since we use epics to track our roadmap (basically we have plugin that shows the epics timeline and what is active right now. It is very useful to give a big picture, since we have many epics), the indefinitely open epics render this roadmap useless. </p>\n\n<p>We decided to close the epic, once all issues in that epic are closed. The problem now is, where to place production bugs/support tickets if the relevant epic is closed? If we add them to their respective epic, we will be back to keep th epic always open, which we do not want. If we do not assign them under any epic, it will be hard to track the support effort that resulted from certain epics.</p>\n\n<p>Anyone faced such a problem?</p>\n",
        "score": 3,
        "creationdate": "2018-01-22T02:09:16.657000",
        "viewcount": 4936,
        "tags": "|jira|bugs|epics|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Jira and organizational challenges related to tracking bugs and epics, it does not explicitly or implicitly address Technical Debt.  There's no mention of code quality, lack of testing, duplicated code, documentation issues, or other indicators of technical debt. The problem described is primarily a project management and workflow issue, not a technical debt issue.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about organizing epics in Jira and managing production bugs and support tickets. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of Agile Software Development (ASD) practices or methodologies. The focus is on project management within Jira, not on TD in ASD."
    },
    {
        "id": 23376,
        "title": "Can Fixed Scope/Variable Timescale be Agile?",
        "body": "<p>I have an ongoing argument - our delivery manager tried to introduce a \"release after 3 sprints\" pattern into our teams.  Unfortunately, like many businesses, the actual work can be x number of sprints, often more than 3.</p>\n\n<p>I argue, just because the scope is fixed up-front, that is just our DoD.  We release to Live when we complete the scope and we are Done.  Nothing in there breaks agile principles - we just acknowledge that although in theory we <em>could</em> release to live at the end of a given sprint, in reality we never would until we are Done and then we have a true release candidate.</p>\n\n<p>He argues, agile can only be agile if you work a sprint at a time and have a release candidate every sprint.</p>\n\n<p>Which version is correct, or are we both right/wrong?</p>\n",
        "score": 2,
        "creationdate": "2018-01-25T23:01:40.573000",
        "viewcount": 413,
        "tags": "|agile|sprint|scope|release-planning|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon project management challenges and sprint planning within a software development context, it does not explicitly or implicitly address Technical Debt.  There is no mention of code quality issues, lack of testing, duplicated code, documentation problems, or other indicators of technical debt. The core argument revolves around the interpretation of Agile principles regarding fixed scope versus variable timescale, not technical debt within an Agile framework.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is centered around the interpretation of agile principles, specifically regarding fixed scope and variable timescales in sprint planning. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on agile methodology practices rather than TD in Agile Software Development. Therefore, it does not meet the inclusion criteria for discussions related to TD."
    },
    {
        "id": 23500,
        "title": "What is the best way to link the Business Cases to the user stories in Scrum?",
        "body": "<p>I am Product Owner of a Scrum Team which has to develop features for multiple business units. All these features are translated in user stories. Of course, some features are developed for multiple business units.</p>\n\n<p>To explain it very plainly: for Project X we made a business case and got the budget to develop a feature. In the business case, we stated that it would cost an X amount of money to make sure we can earn Y dollars. </p>\n\n<p>Now, a user story in our backlog will lead to the development of a feature which will be responsible for a certain Return on Investment for that project (or others as well).</p>\n\n<p>How can we best track this business value and make a direct link to the business cases for reporting purposes? </p>\n",
        "score": 2,
        "creationdate": "2018-02-07T20:11:35.287000",
        "viewcount": 605,
        "tags": "|user-stories|business-case|value|business-process-mapping|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions budgeting and ROI, which can be indirectly related to managing technical debt (e.g., prioritizing features based on cost/benefit), it does not explicitly or implicitly discuss technical debt itself.  The focus is on linking business cases to user stories in Scrum, a project management concern, not a discussion of technical debt indicators or experiences with poor code quality, lack of testing, etc.  There is no mention of any technical challenges or compromises that might lead to technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on linking business cases to user stories in Scrum, which is related to Agile Software Development. However, it does not address Technical Debt explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or other TD indicators. The discussion is more about business value tracking and reporting rather than technical challenges or debt in software development."
    },
    {
        "id": 23606,
        "title": "Agile requirements tracking",
        "body": "<p>I am new to this forum, I will try to explain the best I can what I am facing. I recently entered a new software development company, and I am the coordinator of a team of Product Owners (POs) who (each of them) are in charge of 5 different products.</p>\n\n<p>The thing is that none of them document anything. The business sends requests on a daily basis and they write each requirement just in a simple JIRA issue, so they are not so easy to understand and cannot be properly documented.</p>\n\n<p>On one hand, I am trying to educate the business regarding these practices (but they are very demanding so I don't think I will have luck on that). On the other hand, and here comes my question: given the rush of daily activities, I don't want to be pushing the POs to document every single request that comes in.</p>\n\n<p>So, when would it be appropriate to formally document requirements? I mean, should we only keep track of requirements when they are long ones, and write daily, short ones is just an issue?</p>\n",
        "score": 0,
        "creationdate": "2018-02-25T01:16:03.340000",
        "viewcount": 284,
        "tags": "|agile|requirements|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development, such as undocumented requirements and rushed daily activities, it does not explicitly or implicitly refer to Technical Debt.  There's no mention of code quality, testing, duplicated code, lack of documentation (beyond requirements), or other indicators of technical debt. The focus is on requirements management and communication with the business, not on technical aspects of the software development process.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about requirements tracking and documentation practices in an Agile context. While it mentions challenges with documentation, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or duplicated code. The focus is on process improvement rather than addressing TD. Additionally, there is no specific scenario of lived experience related to TD, nor is there a clear TD indicator defined. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 23647,
        "title": "How to speed up a passed-the-deadline project while maintaining credibility?",
        "body": "<p>The team I manage has been in the final pre-production push / bug-fixes stage at the end of the project for over a month now, while we allotted one week for these fixes (total project time was 2 months, are now at 3 months).</p>\n\n<p>Due to external pressures, I have twice pushed for deployment with the outlook that this first iteration of the product doesn't need to be perfect, and both times deployment has failed and we had to rollback due to bugs and not being ready for the actual launch (which requires downtime and complicated database migrations).</p>\n\n<p>I am \"defending\" my hurrying deployment (to my team) by explaining that I am OK with taking risks and \"breaking things\" in favor of relevance and ontime delivery, but they are not buying this. I feel that after two failed launches, I am losing/have lost credibility with my team, and they are not confident in my ability to decide to move forward, which is further slowing down the end of the project.</p>\n\n<p>What is the right thing to do here?</p>\n",
        "score": 0,
        "creationdate": "2018-03-01T23:23:04.067000",
        "viewcount": 175,
        "tags": "|software-development|project-management-style|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an Agile project (implied by the short iterations and focus on rapid delivery) where a deadline was missed. The missed deadline and subsequent failed deployments are clear indicators of technical debt.  While 'technical debt' isn't explicitly mentioned, the description of bugs, rushed deployments, and the resulting loss of team confidence strongly suggests the presence of accumulated technical debt. The focus is on the consequences of this debt rather than a direct definition, which slightly lowers the relevance score.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses issues such as time management difficulties, low team morale, and challenges in software development due to rushed deployments and failed launches. The scenario is based on lived experience, describing a real-world situation where the project is delayed and the team is under pressure. The TD indicator is the repeated failed deployments due to bugs, which suggests poor-quality code or inadequate testing. The context is related to Agile Software Development (ASD) as it involves iterative deployment and managing team dynamics, although there is no explicit mention of agile methodologies. The discussion lacks depth in explicitly connecting to agile practices, which is why it is rated as 'Good' rather than 'Excellent.'"
    },
    {
        "id": 23744,
        "title": "How to make the Product Owner realize that he doesn't put focus on the right customer at all?",
        "body": "<p>I'm Technical Leader for a software project dedicated to manage the \"VIP people\"-yearOfWork of a big company.</p>\n\n<p>Basically, to make it simple for this post, the project is a mix of a social network (between those VIP people) and a meeting network, where any one of them could be aware and participate to their respective yearly meetings.</p>\n\n<p>My Product Owner is, oddly, not one of those VIP people but one who remotely manages them (creating meetings etc, establishing their profile etc.).<br>\nHe's part of the Secretariat Team.<br>\nHe argues that he knows their jobs and therefore thinks mastering their needs. </p>\n\n<p>The project is supposed to evolve through agile principles, to receive feedbacks early, but:                   </p>\n\n<ul>\n<li>Product Owner puts focus on features that is viewable, usable and focus on the management team, HIS team.          </li>\n<li>Product Owner argues that his team (secretariat) should benefit of this product to spent less times on redundant tasks like creating meeting for VIP people. </li>\n</ul>\n\n<p>Problem is: </p>\n\n<ul>\n<li>The backlog is full of Secretariat-oriented features and I can't see any VIP people-oriented features.  </li>\n<li>No workshop with customers to study deeply THEIR needs.</li>\n</ul>\n\n<p>We got some feedback that VIP people find the software very light but interesting, but the product owner can't bear of the word \"light\".</p>\n\n<p>Customers are not aware of the amount of tasks under the hood dealing dedicated to the Secretariat Team; I'm sensitive to their \"appointment\".</p>\n\n<p>Product Owner thinks wrongly that the sofware is for HIS team more than VIP people and he's wrong. </p>\n\n<p><strong>How to make the Product Owner realize that he doesn't put focus on the right customer and that it is a huge risk regarding the project's lifetime since whole project budget is almost fully spent?</strong></p>\n\n<p><strong>How to make the Product Owner realize that receiving a feedback like \"pretty good project; but lacks some promised features after 5 months of work\" is not like \"Wow amazing!\" feedback?</strong>  </p>\n\n<p>I was very disappointed as a technical leader when the customer said: \"5 months for that ?!\"; indeed they just see a very very short number of features they can \"play\" with.<br>\nRest is hidden from them. </p>\n",
        "score": 3,
        "creationdate": "2018-03-23T07:36:03.257000",
        "viewcount": 284,
        "tags": "|scrum|agile|product-owner|technical-leader|customer-satisfaction|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario in an Agile project where the Product Owner's focus is misaligned with the actual customer needs.  The lack of VIP-oriented features, the focus on Secretariat tasks, and the resulting 'light' product for the VIP users all point to a form of technical debt \u2013 a debt of functionality and value delivery. The Agile context is clearly stated. While the term 'technical debt' isn't explicitly used, the described situation is a clear indicator of it. The lack of user workshops and the focus on internal team needs instead of customer needs are strong indicators of this.  The relevance is 'Good' rather than 'Excellent' because the discussion focuses more on the management problem than on the technical debt itself, although the technical debt is implicitly a major part of the problem.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) implicitly through indicators such as poor-quality code and lack of customer-focused features, which are symptoms of misaligned priorities and poor time management. The scenario is based on lived experience, as the technical leader describes real-world challenges with the Product Owner's focus. The discussion is related to Agile Software Development (ASD), as it mentions agile principles and the need for early feedback. However, the discussion lacks depth in explicitly addressing TD indicators, which affects its relevance rating."
    },
    {
        "id": 23753,
        "title": "Should a technical person take part of the user stories prioritization process?",
        "body": "<p>As a Tech Lead within a \"Scrum\" team, I am annoying regarding some laid rules. </p>\n\n<p>It is established that only Product Owner, Business Analyst and Scrum Master (and eventually Product Manager) take part of the user stories prioritization process (backlog prioritization). </p>\n\n<p>They are sorting US based on story points, without any further software-oriented facts and knowledge.<br>\nWorth noting that those story points emerged from a quick and probably \"blind\" macro-estimation process, not a deep one. </p>\n\n<p>They judge <strong>which</strong> valuable US could be delivered and <strong>when</strong> through those macro-estimations.</p>\n\n<p>I notice that their decision is often based on wrong assumptions and false hypothesis; leading to a sorting readjustment, therefore wasting anybody's time.</p>\n\n<p>Do you consider a Tech Lead (or any other qualified developer) should be part of this prioritization process to aid to prioritize based on programming knowledge?<br>\nLike a guarantor of feasibility. </p>\n",
        "score": 3,
        "creationdate": "2018-03-24T22:14:19.230000",
        "viewcount": 308,
        "tags": "|scrum|user-stories|prioritization|sprint-backlog|technical-leader|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario within a Scrum team where the prioritization of user stories is done without technical input, leading to issues. The author, a Tech Lead, implicitly points to technical debt indicators such as 'wrong assumptions' and 'false hypothesis' that lead to 'sorting readjustment' and 'wasting time'. The context is clearly within Agile Software Development (Scrum). While the discussion is not deeply detailed, it meets the inclusion criteria.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly discusses challenges in Agile software development (Scrum) related to backlog prioritization. The tech lead describes a real-world scenario where the prioritization process, based on inaccurate story points, leads to wasted time and readjustments.  This implicitly points to a technical debt indicator: inaccurate estimations leading to inefficient planning and potential rework. While not explicitly mentioning 'technical debt', the consequences described strongly suggest it. The discussion focuses on an existing scenario and the author's lived experience within an Agile team.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is centered around the involvement of technical personnel in the user story prioritization process within a Scrum team. While it touches on issues related to decision-making and prioritization, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on process and role involvement rather than TD in Agile Software Development. Therefore, it does not meet the inclusion criteria for discussions related to TD."
    },
    {
        "id": 23801,
        "title": "Should we create an Epic for tech-debts",
        "body": "<p>I was having a discussion in the team to create an <code>Epic</code> for all the <code>technical-debts</code> in the project. The problem is, as per definition Epic should not spawn more than a quarter, but, if we create an Epic for technical-debt it may run for the duration of the project. I surfed on Internet but could not find anything. Please help with right Agile guidelines.</p>\n",
        "score": 5,
        "creationdate": "2018-04-04T07:07:22.397000",
        "viewcount": 4585,
        "tags": "|agile|jira|project-management-style|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions \"technical debts,\" it primarily focuses on Agile methodology (Epics) and project management, not on a real-world scenario of technical debt.  It's an advice-seeking question lacking a description of an existing technical debt situation. There's no mention of specific indicators of technical debt within the project, nor any description of the project's agile practices. Therefore, it fails to meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions 'technical-debts' and 'Agile' but does not provide a real-world scenario or example of technical debt. It is primarily seeking advice on Agile guidelines for managing technical debt within the framework of Epics, without describing any specific instance or indicator of technical debt. Therefore, it does not meet the inclusion criteria for describing an existing scenario or defining a TD indicator."
    },
    {
        "id": 23809,
        "title": "What work items would look like related to support for a solution in production already?",
        "body": "<p>Our shop is going to continue maintenance of a system in production already. Our next update consists of fixing a bug and creating documentation so that new members joining our team may understand the system. I don't know what the work items should be since we have a brand new Team Foundation Server (with Scrum template) and the higher-ups want all work tracked in it. Would something like this work?:</p>\n\n<ul>\n<li>Epic: Customer relationship management \"Echo\" System Support and Updates.</li>\n<li>Feature: System Updates.</li>\n<li>PBI: 1. As a system admin, I want to understand the system completely so I can provide innovation and support.</li>\n<li>Bug: 2. No role validation during approval of a product.</li>\n<li>Task: 1. Create documentation with workflow process of \"Echo\" system.</li>\n<li>Task: 2. Refactor code so that approval action will validate if role is correct for validation.</li>\n</ul>\n",
        "score": 0,
        "creationdate": "2018-04-05T13:11:22.290000",
        "viewcount": 76,
        "tags": "|agile|pm-software|tfs|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario of maintaining a system in production within an Agile context (using Scrum template). It implicitly identifies technical debt through the need to fix a bug (lack of role validation) and create documentation, which are indicators of poor code quality and lack of knowledge transfer. The use of TFS and Scrum template indicates an Agile environment. While the discussion is not deeply detailed, it provides a clear example of TD management within an Agile team.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It describes a real-world scenario of maintaining a production system within an Agile (Scrum) framework.  The tasks include fixing a bug ('No role validation during approval'), creating documentation, and refactoring code \u2013 all clear indicators of technical debt (implicitly addressing poor-quality code and lack of documentation). The context explicitly mentions Agile methodology (Scrum and TFS) and the work items are described within that framework. While it doesn't explicitly label the issues as 'technical debt', the actions taken directly address the consequences of it.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about organizing work items in a Scrum template for a system already in production. While it mentions creating documentation and refactoring code, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of challenges or lived experiences related to TD in Agile Software Development (ASD). The focus is on task management rather than addressing TD issues."
    },
    {
        "id": 23836,
        "title": "How to improve (or to call attention to) the business value of technical needs?",
        "body": "<p>Agile focuses on delivering the highest business value to the interested parts of a project.<br>\nHowever, (at least in my scenario) it seems that the client/stakeholders are always focused on having more and better features, while avoiding to even glance to technical gaps and performance improvements (except when they become too obvious, or the problem is already too big to be easily fixed).</p>\n\n<p>How could the PO (or the development team) show to the people in charge the business value of these needs, considering that to do them it will take some time from the features-development resources?</p>\n",
        "score": 2,
        "creationdate": "2018-04-09T11:39:28.353000",
        "viewcount": 181,
        "tags": "|agile|stakeholders|scope|",
        "answercount": 9,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt.  The author describes a scenario where stakeholders prioritize features over addressing technical gaps and performance improvements, a common indicator of technical debt. The context is clearly within an Agile framework (mention of PO and focus on business value). While the post doesn't explicitly define a specific TD indicator, the description of neglecting technical needs implies the existence of poor-quality code, lack of performance optimization, or other technical issues that constitute TD. The question seeks advice on how to highlight the business value of addressing these issues, indicating a real-world scenario faced by the author.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses the issue of technical gaps and performance improvements, which are indicators of TD. It describes an existing scenario where stakeholders prioritize features over technical needs, a common challenge in Agile Software Development (ASD). The discussion is relevant to ASD as it mentions Agile principles and the role of the Product Owner (PO) in balancing business value and technical needs. However, it lacks specific examples or detailed insights into the lived experience, which prevents it from being rated as 'Excellent.'"
    },
    {
        "id": 23888,
        "title": "Work preparation as a task for upcoming sprint?",
        "body": "<p>The team struggles with making their tickets ready for development. Mostly because the DoR requires a lot of work (designs, multiple translations, tracking, documentation, etc.). </p>\n\n<p>Normally the team expected to get all of these from the PO. However this mostly does not work - it's really hard to get all of the DoR data and get them correctly. This is an issue, because developers are fed up with taking unprepared tasks to the sprint.\nIt's also hard to refine tasks that aren't prepared, because without full DoR developers can't tell how hard is the given story. </p>\n\n<p>My idea is to add tasks preparation as a part of the upcoming sprint. So:</p>\n\n<p>Sprint #1 - implementation and DoR for Sprint #2\nSprint #2 - implementing things prepared in Sprint #1 and DoR for Sprint #3. </p>\n\n<p>Some of these things may be prepared by the PO, but this would also involve the developers in this process (in case PO isn't able to prepare these).</p>\n\n<p>I'm afraid that this is some kind of anti-pattern, because \"work preparation\" isn't a product increment, but I may be wrong. What do you thing?</p>\n",
        "score": -1,
        "creationdate": "2018-04-17T10:56:23.220000",
        "viewcount": 132,
        "tags": "|scrum|refinement|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world problem in an Agile team where the lack of properly prepared tasks (missing designs, translations, etc.) before the sprint leads to developer frustration and difficulty in estimating effort. This implicitly points to a form of technical debt, as the lack of preparation creates extra work and potential rework during the sprint.  The team's proposed solution of dedicating sprint time to preparation acknowledges the problem and attempts to address it. While not explicitly mentioning 'technical debt', the description clearly aligns with the implicit indicators of TD within an Agile context (specifically, time management difficulties and low team morale).",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of challenges in task preparation, which can lead to poor-quality code and time management difficulties. It describes an existing scenario where the team struggles with the Definition of Ready (DoR) and task preparation, impacting the development process. The discussion is set in the context of Agile Software Development, as it involves sprints and the role of the Product Owner (PO). However, the discussion lacks explicit mention of TD indicators and could benefit from more depth in addressing the specific impacts of these challenges on TD."
    },
    {
        "id": 24167,
        "title": "How to fill my day as a Scrum Master?",
        "body": "<p>I have been a SM now for about 3 years and I enjoy many elements of the role and so far I have had really positive feedback from my stakeholders. The PO says I have good influence over them in making improvements and engineering managers say they are getting what they want from me as a scrum master so it seems to be good.</p>\n\n<p>What I do find however is that I go from being very busy during sprint end/start weeks to be very bored. I literally am not sure how to fill my day and its quite demotivating. I have started have 1-2-1\u2019s with all my team members as I think it important for they evolution to agile greatness but I still have huge gaps of my day when I have nothing to do.</p>\n\n<p>I have regular workshops with the team, but I don\u2019t want to take them away from their desks too much during the sprint because then they can\u2019t deliver on their commitments. I facilitate all their ceremonies and I do participate in the agile community in the organisation.</p>\n\n<p>I find however that if I am not doing what I mentioned above I have not much to actually do.</p>\n\n<p>Does anyone have any suggestions of things I am maybe not doing that I should be doing?</p>\n",
        "score": 5,
        "creationdate": "2018-06-04T14:59:23.207000",
        "viewcount": 2005,
        "tags": "|scrum|scrum-master|agile-coach|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion is related to Agile Software Development (ASD) as it mentions a Scrum Master's role, it does not address Technical Debt (TD) either explicitly or implicitly.  There is no mention of code quality, testing, documentation issues, or any other indicators of TD. The post focuses on the Scrum Master's time management and workload, not on issues related to technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the role and activities of a Scrum Master, specifically addressing time management and engagement during non-busy periods. It does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, while it is related to Agile Software Development (ASD) through the context of a Scrum Master, it does not address TD within this context. Therefore, it is a false positive based on the research protocol."
    },
    {
        "id": 24231,
        "title": "Questions about moving from JIRA to VSTS Agile",
        "body": "<p>We have a small team, and most of us are part-time. We have been managing the project using JIRA's simplified software template. We have started using Visual Studio Team Services (VSTS) for continuous integration and we like it. I would like to attempt to use VSTS to replace JIRA, but I am struggling with the differences between the tools.</p>\n\n<p>Here is the workflow which has worked well for our small (non-full-time) team:</p>\n\n<ol>\n<li>I pull a handful of stories out of the backlog, which we want to deliver.</li>\n<li>Assign them.</li>\n<li>Optionally break some into subtasks</li>\n<li>Developers work on them and move them to todo/done</li>\n<li>Tag each task with prod-fix or next-release (JIRA releases feature)</li>\n<li>I may pull a few more tasks onto the board as needed.</li>\n<li>We do a deployment/release.</li>\n<li>By marking a 'release' as done, they automatically get removed from the board.  I actually do 2 releases in JIRA: one for fixes and one for the new release. This helps keep track of what was done where.</li>\n<li>Repeat.</li>\n</ol>\n\n<p>I would like to duplicate something like this in VSTS. But it seems that it is built around rigid Scrum practice, rather than our semi ad-hoc approach.</p>\n\n<p>I created a new 'Agile' project in VSTS to try and duplicate our process. I have the following questions:</p>\n\n<ul>\n<li>I see Features and Stories have separate backlogs.... why? Is there a    way to see them together? </li>\n<li>I can see how I would use Iterations similarly to how I am using Releases in JIRA. But why do iterations have a backlog? </li>\n<li>I figured out how to rename board columns on Features/Stories, but how do I rename the columns on the Iterations boards? </li>\n<li>Is the 'Work Items' just a flat list of tasks? </li>\n<li><p>Why do I need to go into Backlogs to a see the Current iteration? I have to explain to the Team that to see the board, they have to go under Work -> Backlogs -> Click the current Iteration -> Click Board? That is not going to go over well. Is there a quick way to get to the board for the current iteration? 99% of the team will only ever need that. It seems that Work -> Backlogs defaults to the board view of the current iteration. The the main issue is the odd naming, telling them to Backlogs to see their 'Current' tasks</p></li>\n<li><p>If I want to simplify things and Make Epics and Issues go away, can I do that? I foresee wasted time on people debating the difference between an epic and feature, and issue and bug, etc.</p></li>\n<li>Is there a way to get rid of the Capacity tab? </li>\n<li>Can I rename priorities low/normal/high? I don't want debates of when 1 is     a higher priority than 4. </li>\n<li>In some of the forms certain letters of words are underlined, such as the 'e' in State, and 'A' in Area, and 'r' in Iteration. What is the point of that? I can't find mention of it in shortcuts help. </li>\n<li>How do you log work against task? Or do the Effort (hours) have to be manually recorded? (we rarely use this features, so not a big deal)</li>\n<li>Are areas equivalent to components in JIRA? </li>\n<li>How do I complete an iteration? Start another?</li>\n<li>How do you mark a task as Resolved? It only lets me set it to New/Active/Closed? What is the diff between resolved and closed?</li>\n</ul>\n\n<p>Any answers and thoughts appreciated.</p>\n",
        "score": 3,
        "creationdate": "2018-06-13T16:23:37.437000",
        "viewcount": 346,
        "tags": "|agile|pm-software|jira|tfs|vsts|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on migrating from Jira to VSTS (Azure DevOps) and managing Agile workflows within VSTS. While it mentions Agile methodologies and project management aspects, it does not discuss Technical Debt (TD) explicitly or implicitly.  There is no mention of code quality, testing, documentation issues, or other indicators of TD. The core of the discussion is about tool configuration and workflow adaptation, not TD in an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on transitioning from JIRA to VSTS Agile and the differences between these tools. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is centered around tool usage and workflow adaptation rather than issues related to TD in Agile Software Development. Therefore, it does not meet the inclusion criteria for discussions related to TD."
    },
    {
        "id": 24396,
        "title": "How to spot low/high performers within team",
        "body": "<p>We are team of 3 people. We are adapting scrum methodologies. </p>\n\n<p>Everything is based on kanban (trello) where we do daily, retrospectives and sprint planning (the tasks being forecasted by working hours).</p>\n\n<p>Thing is that I have fast developer and slow developer. The fast developer always needs to \"make-up\" on the slow one. I can spot the slow one because I am at the office, but of course when we grow bigger, it will be hard to spot. We want to spot slow developers in order to improve and take actions. How can we do that the scrum way?</p>\n",
        "score": 4,
        "creationdate": "2018-06-30T16:38:32.337000",
        "viewcount": 905,
        "tags": "|scrum|agile|team-management|performance|",
        "answercount": 7,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a Scrum team and performance issues (a potential indicator of technical debt if the slow developer is struggling due to poor code quality or lack of understanding), it does not explicitly or implicitly discuss technical debt. The focus is on identifying and managing individual developer performance within a Scrum framework, not on addressing technical debt itself.  There is no mention of code quality, testing, documentation, or other indicators of technical debt. The problem described is primarily a team management and performance issue, not a technical debt issue.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is related to team performance within an Agile context, specifically using Scrum and Kanban methodologies. However, it does not explicitly or implicitly address Technical Debt (TD) or any TD indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on identifying slow developers, which is more about team dynamics and performance management rather than TD. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 24436,
        "title": "How to deal with hotfixes keeping the scrum methodology",
        "body": "<p>My team works with scrum methodology. </p>\n\n<p>However, during some sprints we have <a href=\"https://softwareengineering.stackexchange.com/questions/288935/difference-between-hotfix-and-bugfix\">hotfixes</a> that have to be developed as soon as possible, so we treat them in the current sprint, and consequently we have an impact on the sprint goal in which we are engaged.</p>\n\n<p>These <a href=\"https://softwareengineering.stackexchange.com/questions/288935/difference-between-hotfix-and-bugfix\">hotfixes</a> have to be corrected quickly, without time to create a task in the backlog or without previous refinement.</p>\n\n<p>Which would be a good way to keep the scrum methodology, while we add constantly these hotfixes to the sprint?</p>\n",
        "score": 18,
        "creationdate": "2018-07-06T09:46:00.843000",
        "viewcount": 4401,
        "tags": "|scrum|sprint|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly mentions Scrum methodology and the disruption caused by urgent hotfixes.  It describes a real-world scenario where the need for immediate hotfixes impacts sprint goals, implicitly indicating technical debt through the disruption and lack of time for proper task management and refinement. While it doesn't explicitly define a TD indicator, the impact on sprint goals and the rushed nature of the hotfixes strongly suggest the accumulation of technical debt. The lack of time for proper task management and refinement is a clear indicator of TD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of hotfixes, which often indicate poor-quality code or time management difficulties. It describes an existing scenario based on lived experience, as the author discusses their team's challenges with integrating hotfixes into the scrum methodology. The discussion is related to Agile Software Development, specifically mentioning the use of scrum. However, the discussion lacks depth in exploring the TD indicators, focusing more on process adaptation rather than the underlying causes of TD, which is why it is rated as 'Good' rather than 'Excellent.'"
    },
    {
        "id": 24486,
        "title": "Can one person be Scrum Master inside two project at the same time?",
        "body": "<p>We have a software company and our team is ten people and the number of projects we have is two. </p>\n\n<p>Can one person be the Scrum Master inside two projects at the same time?</p>\n",
        "score": 8,
        "creationdate": "2018-07-14T06:58:46.760000",
        "viewcount": 2270,
        "tags": "|scrum|agile|scrum-master|team-size|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "The discussion focuses on the feasibility of one person being a Scrum Master for two projects simultaneously. While it touches upon Agile (Scrum), it does not discuss Technical Debt, either explicitly or implicitly.  There is no mention of code quality, testing, documentation, or any other indicators of technical debt. Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about the feasibility of one person serving as a Scrum Master for two projects simultaneously. It does not relate to Technical Debt (TD) or any indicators of TD, nor does it describe an existing scenario based on lived experience. The discussion is focused on role management within Agile Software Development (ASD) but lacks any connection to TD, making it a false positive."
    },
    {
        "id": 24493,
        "title": "What should we do if there are not enough PBIs to fill a final Sprint in Scrum?",
        "body": "<h1>Background</h1>\n\n<h2>Scenario</h2>\n\n<p>At the end of a project, there aren't enough story points to fill a two-week Sprint based on the velocity of the team. </p>\n\n<h2>Capacity &amp; Backlog</h2>\n\n<p>The average velocity of the Development Team is actually 40 points per Sprint. In the Product Backlog there are just 20 points remaining to be completed.</p>\n\n<h1>Question</h1>\n\n<p>Should we start this final Sprint as a standard two-week Sprint, no matter the amount of points remaining, or should we use a quick one-week Sprint in this case?</p>\n",
        "score": 12,
        "creationdate": "2018-07-16T01:36:35.083000",
        "viewcount": 2842,
        "tags": "|scrum|sprint|sprint-planning|product-backlog|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a sprint, a key element of Agile, it does not address Technical Debt.  The core issue is sprint length planning given insufficient backlog items, not a discussion of code quality, maintainability, or other indicators of technical debt. There is no mention of poor code quality, lack of tests, duplicated code, lack of documentation, time management issues, or low team morale \u2013 all potential indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on Scrum practices related to sprint planning and does not address Technical Debt (TD) explicitly or implicitly. It lacks any mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. Additionally, while it is related to Agile Software Development (ASD), it does not provide a real-world scenario involving TD. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 24498,
        "title": "How can we register the technical debt in Scrum?",
        "body": "<p>Scrum emphasizes that all members of the team must know the technical debt of the product. But sometimes, this debt is not tangible as a simple to-do list. Should we register it as another task in the product backlog to review in another sprint? Or should we put it in some document related to this product, so the team can actually know what tasks should be treated later in the development?</p>\n\n<p>I'm not seeing a good way to keep this debt in developers' minds; it can be forgotten later.</p>\n",
        "score": 13,
        "creationdate": "2018-07-16T13:07:33.817000",
        "viewcount": 3422,
        "tags": "|scrum|scrum-master|product-owner|technical-debt|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly mentions 'technical debt' and describes a real-world problem faced by a Scrum team in managing and tracking it.  While it doesn't explicitly detail specific indicators of technical debt, the core issue revolves around the lack of a tangible system for tracking and prioritizing it within the Scrum framework. The question of how to register the debt implies an existing scenario of technical debt within an Agile (Scrum) context.  It's 'Good' rather than 'Excellent' because the description of the existing technical debt is implicit rather than explicit.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions the need to register and manage TD within a Scrum framework, which is a form of Agile Software Development (ASD). The scenario described is based on lived experience, as the author discusses the challenge of keeping TD visible to the team. The discussion implicitly defines a TD indicator by highlighting the issue of TD being forgotten, which relates to time management difficulties and low team morale. However, the discussion lacks depth in terms of specific examples or detailed strategies for managing TD, which affects its relevance rating."
    },
    {
        "id": 24551,
        "title": "How to manage technical conflict between Product Owner and developers?",
        "body": "<p>Imagine you are a Product Owner. And you have planned a sprint, prepared every detail, broken down the epics into\nstories and already presented your roadmap to management and promised the releases\nahead. In the sprint planning you also give 10 features to your engineering team. The\ndevelopers tell you that they are not willing to work on two of your requirements at this\ntime and give you some technical talk which is hard for you to follow and tell you that\nthey want to actually have two additional requirements of their own for the sprint. How do\nyou respond?</p>\n",
        "score": 5,
        "creationdate": "2018-07-22T14:08:21.650000",
        "viewcount": 3625,
        "tags": "|product-owner|sprint-planning|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion presents a hypothetical scenario, failing to meet inclusion criteria 2.  While it touches upon potential conflict that *could* lead to technical debt (e.g., developers prioritizing different tasks), it doesn't describe an existing scenario based on lived experience. There's no description of existing technical debt or its indicators.  The lack of a real-world context makes it a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is a hypothetical scenario about managing technical conflict between a Product Owner and developers. It does not describe an existing scenario based on lived experience, nor does it explicitly or implicitly relate to Technical Debt. Additionally, there is no mention of Agile Software Development practices or methodologies. Therefore, it does not meet the inclusion criteria for the study."
    },
    {
        "id": 24606,
        "title": "Scheduling for Calendar Time when availability is variable?",
        "body": "<p>I have a few core team members who also look after daily support. It\u2019s not uncommon for them to get stuck in some firefighting for a day or two which completely throws off a project schedule. How can I keep my stakeholders from getting frustrated every time the date pushes back?</p>\n",
        "score": 4,
        "creationdate": "2018-07-30T13:48:38",
        "viewcount": 77,
        "tags": "|scheduling|schedule-risk|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where team members get pulled into support tasks, disrupting project schedules. This implies a lack of planning and potentially a form of technical debt related to poor resource allocation and time management, which are indicators of TD. The context is within a project team, suggesting an agile environment. While not explicitly mentioning agile, the scenario is common in agile teams. The question highlights a challenge in managing project timelines due to unexpected interruptions, which is a common issue in ASD.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt. The firefighting mentioned indicates a likely lack of sufficient automated testing, documentation, or well-defined processes, leading to unpredictable delays.  This impacts project schedules, a clear indicator of TD. The context is within a team, suggesting an Agile environment. While it doesn't explicitly mention 'technical debt', the description of the problem strongly suggests it as a root cause. The scenario is based on lived experience, fulfilling the inclusion criteria.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing team availability and stakeholder expectations due to variable schedules. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 24669,
        "title": "In scrum, does it ever make sense to hire a product owner?",
        "body": "<p>I have seen a scrum team trying to hire a product owner. They advertise for scrum skills, and experience.</p>\n\n<p>Does it make sense to hire a product owner from outside the company?</p>\n\n<p>If I do what skills should they have?</p>\n",
        "score": 9,
        "creationdate": "2018-08-08T18:52:51.453000",
        "viewcount": 775,
        "tags": "|scrum|product-owner|human-resources|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on hiring practices for Scrum Product Owners and doesn't address Technical Debt or its indicators.  While Scrum is an Agile methodology, the core topic is unrelated to the research criteria. There is no mention of code quality, time management issues, or any other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about hiring a product owner in a Scrum context, which is related to Agile Software Development. However, it does not address Technical Debt explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on hiring practices rather than TD issues, making it a false positive for this study."
    },
    {
        "id": 24688,
        "title": "Is a good Scrum practice to meassure the developer team by the story points completed at the end of the sprint?",
        "body": "<p>We have new teams working on scrum and they estimates all the points of a several ammount of stories. But, at the beggining, they have no reference of how ammount of points could be delivered in two-week sprint.</p>\n\n<p>We see at the end of the sprints that not all the points are being completed. Near to the end, the team is overhelming, and the quality is being sacrified just for deliver on time.</p>\n\n<p>I want to know if this kind of KPI makes sence in scrum environment, and if not, how  can we assure the team are being as productive as they normally are?</p>\n",
        "score": 4,
        "creationdate": "2018-08-11T22:16:29.543000",
        "viewcount": 312,
        "tags": "|scrum|planning|sprint|kpi|measurement|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly discusses a scenario in an Agile (Scrum) environment where a team sacrifices quality to meet a story point target, indicating a form of technical debt (implicitly through the mention of reduced quality). The post describes a real-world experience, not a hypothetical scenario.  While the indicator of TD (reduced quality due to time pressure) is implicit, it's directly linked to the described practice. The focus is on the impact of the KPI on the team's ability to deliver quality work within the sprint, which is a key aspect of TD in ASD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly references indicators such as poor-quality code and time management difficulties, with the team feeling overwhelmed and sacrificing quality to meet deadlines. It describes an existing scenario based on lived experience with new teams working in a Scrum environment, which is a form of Agile Software Development (ASD). The discussion lacks depth in explicitly defining TD indicators, but it meets the inclusion criteria by addressing real-world challenges in an ASD context."
    },
    {
        "id": 24695,
        "title": "PM techniques/tools for fixed-price 6 month client project",
        "body": "<p>I am looking for project management techniques and tools to help with the following situation.</p>\n\n<p>(P.S. I know this question is technically off-topic but I felt <a href=\"https://pm.meta.stackexchange.com/questions/556/revisiting-tool-recommendation-questions\">Revisiting Tool Recommendation Questions</a> expressed a degree of leeway. I am new to project management. I'm sure the community has a lot of useful advice for me.)</p>\n\n<p>We are doing a software development project for a client which has a fixed budget (about USD 100k) and fixed time (about 6 months). I have a team of developers working on it. The requirements are clear (and I've worked with this client many times before so I don't predict big problems there.)</p>\n\n<p>My question is, how can I keep this project on track in terms of time and budget? (If I go over budget then that'll be very frustrating, despite all the work we're going to put into the project, it would make more sense for me to fire everyone and just sit in Starbucks all day... I really want to avoid that!!)</p>\n\n<p>I'm thinking, you can't change the past, but you can change the future. So I need to keep a track on the costs that have happened, and the predicted costs and effort in the future. And keep a constant eye on whether we're predicted to hit the time and budget constraints, and if not, try to take action. The sooner I know the more chance there is of being able to correct course; if I find out the night before the deadline we're not going to make it, it's too late to correct it.</p>\n\n<p>Here's what I've considered:</p>\n\n<ul>\n<li><p><strong>Scrum.</strong> Dividing the project up into sprints. But, because I know what all the sprints are going to contain ahead of time, it's not really \"agile\". Is this a good/useful option?</p></li>\n<li><p><strong>Use a tool such as MS Project Online, LiquidPlanner or similar,</strong> to enter all tasks and estimates. Team knows what to do, team updates estimates and tasks as soon as things change. I keep a constant eye on spent budget, predicted budget, predicted delivery date. Which tools should I look at there?</p></li>\n<li><p><strong>Use an offline tool such as Excel or MS Project (offline).</strong> And have weekly status meetings where everyone has to update me. I have the worry that then I'll be a week behind (e.g. I've literally seen such situations; have the meeting Monday morning, on Monday afternoon a big problem is discovered, the plan is out-of-date until the next Monday, a week is lost during which preventive action could be taken). Plus nobody likes those big status meetings. Plus they cost a lot.</p></li>\n</ul>\n\n<p>Bonus features I'd love:</p>\n\n<ul>\n<li><p><strong>Handling uncertainty somehow,</strong> e.g. a screen in the framework we already know can be predicted reasonably accurately, a piece of research less so. Ideally \"min 0.5 days, expected 1 day, max 5 days\" or something.</p></li>\n<li><p><strong>Real world estimates</strong> such as \"1 day of effort\" as opposed to \"7 story points\"</p></li>\n<li><p><strong>I don't have to spend ages moving Gantt bar charts around the place.</strong> Ideally I say \"this takes 1 week of effort, and can't be started before this other task finishes, and this person is on holiday on those weeks\" and the tool tells me if it'll be done by the deadline or not.</p></li>\n<li><p><strong>Dependencies, critical path analysis</strong>, so I know which work to look at in case we're not going to meet the deadline.</p></li>\n<li><p><strong>Display of how long people have got work for</strong> e.g. \"Bob runs out of work in 2 weeks, Joe in 3 months\", so I can decide who should take on new tasks.</p></li>\n<li><p><strong>\"what if analysis\"</strong> like \"if I add another developer to the team, will it help the deadline, assuming we have to train them, and maybe development isn't on the critical path\"?</p></li>\n<li><p><strong>Ideally web based.</strong> Not PC/Mac based; so it's cross-platform for my team, and ideally not paper-based to support people who aren't always working from the office.</p></li>\n<li><p><strong>Generate reports</strong> with nice KPIs such as what % of the project we're through to present to the client. (Nice to have)</p></li>\n<li><p><strong>Tool is not slow and difficult to use and annoying.</strong> (Nice to have)</p></li>\n</ul>\n\n<p>I don't mind about cost, if I can avoid a financial disaster with this project then I'm happy to pay for it!</p>\n\n<h2>EDIT/ADDITION:</h2>\n\n<p>Thanks to Erik for the question \"What kind of action are you going to try and take, if the project has fixed budget, fixed time, and fixed scope?\" Here's what I was thinking:</p>\n\n<ul>\n<li><p><strong>I can ask the client for more time.</strong> It might be OK for the client or it might not be but it's worth asking. It's never ideal to ask for more time, but if I have a 6 month project and I ask for 2 extra weeks in the middle, I think it sounds more professional than if I ask for those 2 extra weeks the night before the deadline. And if the client is doing marketing activities based around the deadline, it might really be no problem to postpone them 4 months before the deadline, but be a real problem to postpone them if you let them know a few weeks before the deadline.</p></li>\n<li><p><strong>I can ask the client for more budget, or to reduce scope.</strong> Again, far from ideal! But I've done it, and it does sometimes work. Again, doing it with months still to go allows for a better conversation with the client than the night before the deadline, where some of the features the client might offer to drop have already been developed (so dropping them would now no longer help).</p></li>\n<li><p><strong>Reduce exploratory work.</strong> Maybe the team is spending time exploring new technologies (e.g. new software frameworks or whatever). Such things can help the project, or not, one doesn't know at the start, if they're time they're definitely worth investigating. I can terminate such activity and assert we'll use technologies we already know. (This example comes from my actual experience.)</p></li>\n<li><p><strong>Potentially put other people on the project,</strong> if it's just a question of time and not cost. Always a risky move. But, at least it's an option if there are months still to go. It's not an option if there's only two weeks to go. Better to know about the problem sooner than later.</p></li>\n</ul>\n\n<p>Discovering risks as soon as possible seems to make sense to me. You're going to make better decisions the more information you have (i.e. it's better to know it's going wrong 2 weeks in, than not to know.)</p>\n",
        "score": 8,
        "creationdate": "2018-08-13T09:25:48",
        "viewcount": 1496,
        "tags": "|deadline|fixed-price|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions project management challenges within a fixed-budget, fixed-time software development project, it does not explicitly or implicitly address Technical Debt.  The focus is entirely on project planning, resource allocation, and risk management using various tools and methodologies. There is no mention of code quality, testing, documentation, or other indicators of technical debt.  Although software development is involved, there's no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on project management techniques and tools for a fixed-price, fixed-time software development project. While it mentions Scrum and some agile practices, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is more about managing time and budget constraints rather than dealing with TD in an Agile Software Development context. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 24807,
        "title": "Can you change the end date of a sprint?",
        "body": "<p>Ideally we commit to work being completed and releasable by the time the sprint finishes. However sometimes things happen or estimating is a little bit out.</p>\n\n<p>If we are approaching the end date of a sprint and a user story is not quite finished - maybe another day will see it completed - is it ok to change the end date e.g make the sprint 11 working days instead of 10?</p>\n\n<p>Or should we strictly abide by the end date and move the unfinished story into the next sprint?</p>\n\n<p>Or something else?</p>\n",
        "score": 5,
        "creationdate": "2018-08-29T13:33:49.490000",
        "viewcount": 3000,
        "tags": "|scrum|agile|sprint|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon Agile (sprints), it does not explicitly or implicitly mention Technical Debt.  The core of the question revolves around sprint management and deadline adjustments, not issues related to code quality, maintainability, or other indicators of TD. There is no mention of poor code, lack of tests, duplicated code, or any other implicit indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the management of sprint timelines in Agile Software Development, specifically whether it is acceptable to extend a sprint to complete a user story. However, it does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or documentation issues. The discussion is about sprint management rather than addressing or identifying TD in ASD."
    },
    {
        "id": 24889,
        "title": "Business days calculation for the sprint",
        "body": "<p>Our team is new to agile. We are in the phase of defining the rules for sprint planning. To start, we are keeping our Sprints at 2 weeks (10 business days). Let's say there is a public holiday in a week: then we are left with 9 business days.</p>\n\n<p>Should the Sprint duration be kept to 10 business days, which means two weeks and 1 more business day? Or should the user stories be chosen in a manner to fit in the 9 business days?</p>\n",
        "score": 2,
        "creationdate": "2018-09-12T08:49:20.203000",
        "viewcount": 2438,
        "tags": "|scrum|agile|sprint|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions sprint planning in an Agile context and touches upon time management difficulties (a potential indicator of TD), it does not explicitly or implicitly address Technical Debt. The core issue is about adjusting sprint length to accommodate public holidays, not about code quality, maintainability, or other aspects related to TD.  There is no mention of code, processes, or any other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about sprint planning in Agile, specifically regarding the calculation of business days in a sprint. It does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. The focus is purely on scheduling and does not describe an existing scenario involving TD."
    },
    {
        "id": 24897,
        "title": "How to start Data Warehouse project in agile projects when client ask just some reports?",
        "body": "<p>Agile project management prevents coding for the future. Our client asks some reports which can be coded withing the schema of existing database structure, but the best practices strongly suggest that the client really aims for some kind of  data warehousing solution. Neither our company nor our client is ready for upfront investments and additional work that will bring rewards in future only. What to do? 1) Be satisfied with the present status quo and go with suboptimal design of reports with low maintainability? 2) strongly press for warehousing solution. Who makes such decisions? Developers see the problem, client and management does not see the problem and don't understand the concerns of developers. What should be done in this situation, what behaviour are expected by the best practices of project management methodologies?</p>\n",
        "score": 1,
        "creationdate": "2018-09-13T13:14:22.793000",
        "viewcount": 109,
        "tags": "|agile|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where a client's request for reports clashes with best practices for data warehousing, indicating a potential technical debt issue. The author implicitly identifies the suboptimal design and low maintainability as TD indicators. The context is clearly within an agile project, as the author mentions agile project management and the conflict between short-term client requests and long-term architectural needs. The discussion highlights the challenges of balancing immediate needs with future maintainability in an agile environment.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The author describes a situation where building reports within the existing database structure (a suboptimal solution) will lead to low maintainability in the future. This is a clear indicator of technical debt.  The discussion is based on a real-world scenario faced by the author. While the Agile context is not explicitly stated, the mention of 'Agile project management' and the conflict between short-term client requests and long-term maintainability strongly suggests an Agile environment. The author identifies a TD indicator (low maintainability) stemming from a design decision driven by client demands.  The lack of explicit mention of Agile methodologies slightly lowers the relevance rating.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about decision-making in agile project management concerning data warehousing versus report generation. While it touches on potential technical debt issues like suboptimal design and low maintainability, it does not explicitly or implicitly focus on technical debt indicators or scenarios. Additionally, the discussion lacks a real-world example or lived experience, as it is more of a hypothetical advice-seeking question. Therefore, it does not meet the inclusion criteria for technical debt in agile software development."
    },
    {
        "id": 24904,
        "title": "DevOps and support organization",
        "body": "<p>Nowadays companies go into devops practices to boost productivity.</p>\n\n<p>In our case we (3rd party outsourcing vendor) developed a first version of the product for our client  , it\u2019s cloud based platform. \nWe do have tests, the deployment is semi-automated since there are fashion manual steps (like AD requests) . We don\u2019t have continuous delivery and deployment yet, though.\nDuring development, we cooperated with client IT ops so they contributed to the product development (they built images, deployed to pre-prod, prod, fixed issues related to client infrastructure)</p>\n\n<p>Now it\u2019s time to go-live and client wants to formalize support but still follow devops practices.</p>\n\n<p>For me it\u2019s quite hard to understand how this can be built. </p>\n\n<p>For example:\nIf we keep on implementing new features and have a team working on the product, we can spend % of development time on support requests (2 and 3rd level of support), so that devs are integrated into ops, and understand the pain of users or ops, can not only fix issues but also bring some improvements to deployment, monitoring etc. to make product more reliable, faster and deliver value to business quicker. </p>\n\n<p>But what if there is no new features development and just support (with 2nd and 3rd level) that either configuration and standard operations according to runbook (2nd level) or defects fixing on 3rd level.  Since those are OPEX for clients they don\u2019t tend to invest in this \u2013 hence there is no real opportunity (in terms of efforts spent) to follow and foster good devops practices during just support with no active development. </p>\n\n<p>What do you think ?\nIs it possible to run support in devops mode with no active product development ?  how this can be done ?</p>\n",
        "score": 0,
        "creationdate": "2018-09-15T06:23:28.397000",
        "viewcount": 130,
        "tags": "|devops|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario where a team is transitioning from development to support within a DevOps context. It implicitly touches on technical debt through the mention of manual deployment steps and the need for improvements in deployment and monitoring. The discussion is within an Agile context, as DevOps is an agile practice. The author is seeking advice on how to maintain DevOps practices during support, which implies a need to address existing technical debt and improve processes. While not explicitly stating technical debt, the need for improvements and the challenges of maintaining DevOps practices during support imply the presence of technical debt.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an outsourcing vendor using DevOps practices within an Agile context.  While not explicitly mentioning 'technical debt,' the description of manual deployment steps and the lack of continuous delivery/deployment implicitly points to a form of technical debt. The author's concern about balancing support with DevOps practices in the absence of new feature development directly relates to managing and potentially increasing this implicit technical debt. The discussion focuses on the challenges of maintaining DevOps principles during the support phase of a project, which is relevant to Agile methodologies.  It lacks explicit mention of specific Agile practices, which slightly lowers its relevance.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion primarily focuses on DevOps practices and support organization without explicit or implicit references to Technical Debt (TD). It does not describe an existing scenario related to TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, while it mentions development and support processes, it lacks a clear connection to Agile Software Development (ASD) methodologies. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 24992,
        "title": "What to do with a Product Owner who is not able to understand the role",
        "body": "<p>I am a ScrumMaster for a team of developers and QA's with a Product Owner.</p>\n\n<p>I have tried unsuccessfully for the last year to get the PO to understand what the role of the PO entails and he just does not seem to get it. He tries my suggestions for a few weeks and then he slips into his old mode of working especially when deadlines loom:</p>\n\n<ul>\n<li>Micromanages team members</li>\n<li>Manages the team</li>\n<li>Attempts to plan the teams day, during standups</li>\n<li>Leers at them when they are sitting in a group chatting and asks why they are not working</li>\n<li>Constantly asks for updates</li>\n<li>Attempts to design the solution</li>\n<li>Relentless in his pursuit of understanding the solution design at a low level</li>\n<li>Dominates almost every team meeting and ceremony including technical solution design meetings even though they clearly don't have solution design experience or development experience</li>\n<li>Is constantly involved in team management related work e.g. resourcing of the team etc</li>\n<li>Does not write/is not able to write user stories and acceptance criteria at a level of detail for the team to design and code effectively</li>\n<li>Spends more time on the first points than actually doing requirements elicitation </li>\n</ul>\n\n<p>What have the team said:</p>\n\n<ul>\n<li>They have raised the need for acceptance criteria and scenarios on numerous occasions </li>\n<li>They have said that the requirements are not clear and do not provide enough to 'go on' </li>\n<li>They have said they do feel 'managed' by the PO (during 1on1's with me)</li>\n</ul>\n\n<p>My question is where should I go from here. I am at the end of my tether. </p>\n\n<p>I was thinking my next step should be to talk to his manager and explain that I think he would make a very good traditional manager or project manager but I cannot see any qualities useful for a Product Owner.</p>\n",
        "score": 9,
        "creationdate": "2018-10-05T07:50:37.287000",
        "viewcount": 2667,
        "tags": "|scrum|agile|scrum-master|product-owner|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an Agile (Scrum) environment where a Product Owner's ineffective performance leads to several problems.  While not explicitly mentioning 'technical debt', the lack of clear user stories and acceptance criteria, coupled with the PO's micromanagement and involvement in technical design, implicitly indicates a significant impediment to efficient development. This results in poor quality code and wasted time, key indicators of technical debt. The team's feedback further supports this implicit indication of TD. The discussion focuses on the impact of the PO's actions on the team's ability to deliver quality software, a core aspect of TD in ASD.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through indicators such as poor-quality requirements, lack of clear acceptance criteria, and time management difficulties due to the Product Owner's misunderstanding of their role. It describes an existing scenario based on lived experience, as the ScrumMaster shares real-world challenges faced by the team. The discussion is related to Agile Software Development, specifically within a Scrum framework. However, the discussion lacks depth in explicitly connecting these issues to the concept of Technical Debt, which affects its relevance rating."
    },
    {
        "id": 25105,
        "title": "What is the proper way to add/represent development tasks (like refacturing) to a sprint?",
        "body": "<p>We coded something which works but is quite terrible. We have planned the refactoring of that piece of code in this sprint but since it doesn't really fit in a user story, how do we add or represent this? Nothing will change at front-end, just back-end.</p>\n",
        "score": 0,
        "creationdate": "2018-10-20T21:30:38.873000",
        "viewcount": 140,
        "tags": "|agile|sprint|kanban-board|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions refactoring, a clear indicator of technical debt.  It describes an existing scenario of poor-quality code ('quite terrible') requiring improvement within a sprint. While it doesn't explicitly mention Agile, the context of sprint planning strongly implies an Agile methodology. The lack of user-facing changes further highlights the focus on internal code quality, a common characteristic of addressing technical debt.  The question itself seeks guidance on representing this task, indicating a real-world problem encountered during development.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it involves refactoring poor-quality code, which is a TD indicator. It describes an existing scenario where the team is dealing with a piece of code that works but is 'quite terrible,' indicating lived experience. The discussion is set in the context of Agile Software Development, as it mentions sprints, a key element of agile methodologies. However, the discussion lacks depth in exploring the implications of TD or providing detailed insights into the challenges faced, which slightly limits its relevance."
    },
    {
        "id": 25159,
        "title": "How to deal with a team that fails to complete a task?",
        "body": "<p>I had been in a situation where details about the task and the target to be followed have been explained to the team. However, in spite of multiple follow-ups, they fail to complete the defined tasks in the given timeline.</p>\n\n<p>They come up with reasons such as 'I was occupied with personal works', 'I was not well', etc.</p>\n\n<p>However, at the end, I will be responsible to answer to the client for the missed deadline. How to deal with this situation with the client and convince him?</p>\n",
        "score": 4,
        "creationdate": "2018-11-01T13:35:06.463000",
        "viewcount": 2345,
        "tags": "|team-management|tasks|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion describes a team failing to meet deadlines, it does not explicitly or implicitly mention Technical Debt.  There's no discussion of code quality, lack of testing, duplicated code, or other indicators of TD. The focus is on team management and client communication, not technical issues related to TD within an Agile context.  Therefore, it fails to meet inclusion criteria 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing team performance and client communication regarding missed deadlines. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other software development challenges. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. The focus is on time management and accountability rather than TD in an ASD context."
    },
    {
        "id": 25391,
        "title": "Moving backlog items into Sprint",
        "body": "<p>In Agile, who's the person responsible of moving tickets in Jira (e.g. moving backlog items into Sprint).  Is this a Scrum Master's responsibility or Product Owner?   </p>\n",
        "score": 4,
        "creationdate": "2018-12-05T00:41:07.067000",
        "viewcount": 2914,
        "tags": "|scrum|agile|jira|sprint|backlog|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on Agile processes (specifically, Jira ticket management and roles in Scrum) but doesn't address Technical Debt.  There is no mention of code quality, lack of documentation, time management issues, or any other indicators of technical debt.  It's a question about workflow, not about technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about the roles and responsibilities in Agile, specifically regarding who moves backlog items into a Sprint in Jira. It does not relate to Technical Debt (TD) as it lacks any mention or implication of TD indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, it does not describe an existing scenario based on lived experience, nor does it define a TD indicator. Therefore, it does not meet the inclusion criteria for discussions on TD in Agile Software Development."
    },
    {
        "id": 25671,
        "title": "We work with fixed scope, price and time - why should we use Story points?",
        "body": "<p>We deliver projects in fixed price, fixed time and fixed scope environment. We have a contract that specify those, specifications of features. Recently, an agile couch was trying to convince me to switch to story points but I fail to see how this would help me?  Why should I add an abstract unit that does not bring anything? Velocity is nice, but I have features estimated with time so I can clearly see whether we are making the deadline or not.<br>\nBy the nature of the contract, I cannot not have time estimates as high level estimates were done to calculate the price! So, I know I have 13 people, 5 months and have to deliver X features.\nHow would story points help me in this situation? I am really trying to see the benefit here.</p>\n",
        "score": 2,
        "creationdate": "2019-01-24T14:59:53.927000",
        "viewcount": 774,
        "tags": "|agile|planning|estimation|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile, it does not address Technical Debt. The core question revolves around the utility of story points in a fixed-scope, fixed-price, fixed-time project, which is a project management issue, not a Technical Debt issue.  There is no mention of code quality, lack of documentation, or any other indicator of Technical Debt. The discussion lacks any real-world examples of technical challenges or compromises.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about the use of story points in a fixed scope, price, and time project environment. It does not explicitly or implicitly relate to Technical Debt (TD) as it lacks any mention of poor-quality code, lack of tests, duplicated code, or other TD indicators. Additionally, while it mentions agile practices, it does not describe an existing scenario involving TD in Agile Software Development (ASD). Therefore, it does not meet the inclusion criteria for the study on TD in ASD."
    },
    {
        "id": 25683,
        "title": "How to handle when planned work is blocked and a developer has capacity to take on a new user story that may be too big",
        "body": "<p>Assume the following situation.  All but one user story planned in a sprint is completed.</p>\n\n<p>The remaining user story is blocked.  </p>\n\n<p>A developer would like to take on work in the highest priority work in the backlog that has been estimated.</p>\n\n<p>Unfortunately, the story is bigger than the time remaining.  Ideally, the developer would like to make an early start on work that will be planned for the next sprint.</p>\n\n<p>What is the proper way to handle this situation?</p>\n\n<p>Should the user assign the unplanned work to the next sprint?  In this case, the active sprint does not include all the work that is actively being worked on (ideally, we want the active sprint to be the source of truth of what developers are working on)</p>\n\n<p>If we assign it to the active sprint, then we will most likely have a spill-over.  Everyone would prefer not to do this unless there is a straight forward way to distinguish spill over from planned work vs spill over from unplanned work.</p>\n\n<p>What is the standard way for handling this situation?</p>\n",
        "score": 5,
        "creationdate": "2019-01-25T18:04:53.283000",
        "viewcount": 906,
        "tags": "|scrum|user-stories|jira|sprint|sprint-planning|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within an Agile context (mentioning sprints and user stories), it does not explicitly or implicitly address Technical Debt.  The core issue is about sprint planning and task management when faced with unexpected blocking issues, not about code quality, maintainability, or other indicators of technical debt.  There is no mention of poor code, lack of tests, duplicated code, or any other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about handling blocked work and managing sprint backlog in Agile Software Development. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The scenario described is hypothetical and advice-seeking without a real-world example, and it does not address any TD indicators. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 25719,
        "title": "Scrum for SDK development - split stories horizontally?",
        "body": "<p>Our product is moving more and more in the direction of a software development kit (SDK) which can be used by other developers. </p>\n\n<p>This brings up quite some challenges to our agile processes, though and I am searching for suggestions from people who have experience with this. </p>\n\n<p>The main question we are struggling with is: how to split user stories, since we are disagreeing on who our user is. Are we planning for features from an end-user perspective (we currently ship the SDK together with a standard implementation, so everything actually has UI, etc. but customers can also adjust this standard behaviour to their needs) or is it enough to define a ticket in terms of \"There should be a method in class X doing Y\"?</p>\n\n<p>In \"normal\" Scrum Teams, it's a bad practice to split user stories by horizontal layers but some team members argue that if we consider the SDK consumer as a user, then a ticket \"There should be a method in class X doing Y\" should be valid and that a separate ticket for UI for the same feature can be created since that one targets a different user/use-case. </p>\n\n<p>I hope I explained well enough to give you a good understanding. I am happy to hear your thoughts, experiences and suggestions!</p>\n",
        "score": 5,
        "creationdate": "2019-01-30T14:22:47.593000",
        "viewcount": 761,
        "tags": "|scrum|software-development|user-stories|development-process|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile (Scrum) and challenges in software development, it does not explicitly or implicitly address Technical Debt.  The core of the problem is about user story decomposition and defining user roles in the context of an SDK, not about code quality, maintainability issues, or other indicators of technical debt. There is no mention of poor code quality, lack of tests, duplicated code, or other symptoms of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on challenges in splitting user stories for SDK development within an agile framework. While it touches on agile processes, it does not explicitly or implicitly relate to Technical Debt (TD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about agile methodology practices rather than addressing TD in Agile Software Development."
    },
    {
        "id": 25767,
        "title": "How to improve team motivation with minimal wage increment but fair performance ratings?",
        "body": "<p>How would you motivate the team when the annual wage increment is minimal (less than 5%) even though the performance ratings are very fair?</p>\n",
        "score": 4,
        "creationdate": "2019-02-08T09:49:35.893000",
        "viewcount": 304,
        "tags": "|motivation|performance|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions low team morale, a factor that can be implicitly linked to Technical Debt, it does not explicitly or implicitly discuss Technical Debt itself.  The core of the question is about team motivation in the face of low wage increases, unrelated to software development practices or the presence of technical debt within a project. There is no mention of Agile methodologies or any indicators of technical debt in the codebase or development process.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on team motivation in the context of minimal wage increments and fair performance ratings. It does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is more about human resource management rather than software development practices."
    },
    {
        "id": 25872,
        "title": "What can I do when I can't adjust scope, resources, or schedule and a team member wants a raise?",
        "body": "<p>After almost 20y programming and 5y managing I have arrived at a state to be so confused with the basics that I need help from outside!</p>\n\n<p>At the project management we have 3 pillars: </p>\n\n<ol>\n<li>Scope: features and functionality</li>\n<li>Resources: costs and budget</li>\n<li>Schedule: time</li>\n</ol>\n\n<p>And those 3 results the product with a kind of the quality.</p>\n\n<p>Most of the programmers are employed. They have a fixed time based costs.\nBut they have hidden costs too: example producing bugs.</p>\n\n<p>Managers or product owners usually have a yearly budget or a budget for feature set. Usually 2 they have at fixed from 3.</p>\n\n<p>That resulting the 3rd it is adjustable somewhat or the 4th: quality\nExample 1 year budget for development of X feature is Y sum.\nAt PM level is the similar: for the next Sprint in 3 week we need to do 10 backlogs, and I know the team costs ( salary)</p>\n\n<p>What if somebody is asking a salary increase?\nif I keep him, I have higher costs. Hence probably my budget will blow up. \nI can try to replace him or raise the budget.</p>\n\n<p>What if  I can't keep him, but can't lose him, because hard to replace him (maybe takes to much time or even higher salary requests are), and the feature set need to met and the quality can't be lowered?</p>\n",
        "score": 4,
        "creationdate": "2019-02-24T04:16:00.560000",
        "viewcount": 293,
        "tags": "|team-management|cost-management|human-resources|budget|constraints|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions cost overruns and potential impacts on project quality, it does not explicitly or implicitly refer to technical debt.  The core issue is resource management (salary increase) within a fixed budget and scope, not the accumulation of technical debt due to poor coding practices, lack of testing, etc. There is no mention of Agile methodologies.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion primarily focuses on project management challenges related to scope, resources, and schedule, particularly in the context of handling salary increase requests. While it touches on quality and budget constraints, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or other TD-related issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices, making it irrelevant to the study's focus on TD in ASD."
    },
    {
        "id": 25900,
        "title": "As a Scrum Master, how to handle management expectations on delivering story points?",
        "body": "<p>Problem - I've been appointed as a Scrum Master to a new team and <strong>senior management (CTO) expectation is that our team should deliver <em>more than the SP capacity</em> we can currently <em>realistically</em> deliver</strong>.</p>\n\n<p>This SP expectation is based on previous (over an year ago) estimates. A lot has changed since then. The application has become more complex since then, there are new developers and some developers left.</p>\n\n<p>Senior management now brought in a new developer in and they hope that will help the velocity but I told them the velocity will go down and only after a while go up. They should also consider the stress on the testers.</p>\n\n<p><strong><em>How to approach such situation with senior management?</em></strong></p>\n\n<hr>\n\n<p>More background on me and what I have tried:</p>\n\n<ul>\n<li>I was a Scrum Master for one year in another project</li>\n<li>I worked with team to break larger stories down because when they carried over a task from one sprint to another it was always big.</li>\n<li>Went with a lower velocity that is based on the latest velocity and sprints.</li>\n<li>Remove impediments and act as the scrum master (The team thought they can do it themselves) in areas such as planning, stand up's etc..</li>\n<li>Promote pair programming (Not mentioned in scrum but helped the team a lot)</li>\n<li>I did proper retrospectives (As mentioned by Esther Derby)</li>\n</ul>\n",
        "score": 8,
        "creationdate": "2019-02-26T16:22:20.020000",
        "viewcount": 533,
        "tags": "|scrum|agile|project-management-style|micro-management|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria.  It implicitly addresses Technical Debt. The increased complexity of the application, the turnover of developers, and the resulting lower velocity all point to a situation where the team is struggling to meet unrealistic expectations due to accumulated technical debt. The discussion is based on a real-world scenario faced by the Scrum Master, and it clearly defines a TD indicator (increased complexity leading to lower velocity).  The context is explicitly within an Agile (Scrum) environment. While it doesn't explicitly mention 'technical debt', the underlying issues strongly suggest its presence.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through indicators such as time management difficulties and low team morale due to unrealistic expectations from senior management. It describes an existing scenario based on the Scrum Master's lived experience with a new team, meeting the inclusion criteria. The discussion is related to Agile Software Development, specifically within a Scrum context. However, it lacks explicit mention of TD indicators like poor-quality code or lack of tests, which slightly reduces its depth, hence the 'Good' relevance rating."
    },
    {
        "id": 26011,
        "title": "Is there a relationship between technical debt and velocity?",
        "body": "<p>Per my understanding, velocity is just a metric used to forecast work for future sprints, therefore it has no significance other than for planning purposes. Even if technical debt exists, my assumption is that it would get factored in when work is estimated.</p>\n\n<p>I'd still like to understand if there is any relationship between technical debt and velocity, perhaps if I have missed thinking of something.</p>\n",
        "score": 4,
        "creationdate": "2019-03-15T03:11:08.747000",
        "viewcount": 1712,
        "tags": "|scrum|agile|sprint|velocity|technical-debt|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is primarily an advice-seeking question about the relationship between technical debt and velocity in Agile.  It lacks a real-world example or description of an existing scenario demonstrating technical debt. While it mentions technical debt, it doesn't describe any indicators of it within a lived experience. Therefore, it fails to meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily a question about the relationship between technical debt and velocity, without providing any real-world scenario or lived experience. It lacks explicit or implicit references to technical debt indicators and does not describe an existing scenario. Additionally, while it mentions velocity, which is a concept in Agile Software Development, the discussion does not provide evidence of technical debt in an ASD context. Therefore, it does not meet the inclusion criteria."
    },
    {
        "id": 26070,
        "title": "How to manage long-term software quality requirements?",
        "body": "<p>As newly assigned manager on an already ongoing agile continuous delivery software development project, one of the objectives is the following.</p>\n\n<blockquote>\n  <p>Ensure that software quality meets long term requirements.</p>\n</blockquote>\n\n<p>The project consist of 50+ software developers distributed on different sub-products. So far, the following issues has been identified, which can be possible indicators that improvement is needed of the software quality.</p>\n\n<ol>\n<li>No big new features been released in recent time</li>\n<li>Different UX across sub-products</li>\n<li>Some software modules are barely maintained after ownership shifts</li>\n<li>Architect team is not responsible for quality</li>\n<li>Software developers started leaving project</li>\n<li>Seem too much coordinating across teams for new initiatives</li>\n<li>Often workarounds are used meet customer requirements</li>\n</ol>\n\n<p>So far, the approach to quality has been implicit. Recently, the following has been added.</p>\n\n<ul>\n<li>A <strong>Definition of Done</strong> of <a href=\"https://en.wikipedia.org/wiki/User_story#Relationship_and_Usage_of_User_Stories_to_Epics,_Themes,_Initiatives\" rel=\"nofollow noreferrer\">epics</a> </li>\n</ul>\n\n<p>This seems not to capture the above 7 issues, as it has a more narrow focus.</p>\n\n<p>Quality seems hard to measure in a purposeful way as suggested by <a href=\"https://pm.stackexchange.com/questions/1539/how-to-measure-quality-in-a-software-development-project\">this</a> and <a href=\"https://pm.stackexchange.com/questions/5758/what-software-quality-kpis-do-you-use\">this</a>. Further, it seems hard to navigate after the above 7 issues. This leads to the following considerations. <em>How to identify purposeful efforts? How to estimate the effect of the efforts? When is it enough?</em></p>\n\n<p><strong>Anyone with any experience on how to approach managing long-term software quality focus?</strong></p>\n",
        "score": 1,
        "creationdate": "2019-03-26T16:05:13.737000",
        "viewcount": 374,
        "tags": "|software-development|quality|quality-management|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario within an agile software development project, explicitly mentioning continuous delivery and a team of 50+ developers. It identifies several issues that are indicators of technical debt, such as lack of new features, inconsistent UX, poorly maintained modules, and workarounds. The author is seeking advice on managing long-term software quality, which is directly related to addressing technical debt. While the discussion doesn't explicitly use the term technical debt, the described issues strongly imply its presence. The inclusion of a Definition of Done for epics further reinforces the agile context.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses challenges in maintaining long-term software quality within an agile project.  The listed issues (lack of new features, inconsistent UX, poorly maintained modules, lack of architectural ownership of quality, developer attrition, excessive coordination, and reliance on workarounds) are clear indicators of technical debt. The context is explicitly agile (mention of epics and continuous delivery). While the post is framed as a question, the detailed description of existing problems based on lived experience satisfies the inclusion criteria. The 'Definition of Done' addition is an attempt to address quality, highlighting the existing quality issues.  The relevance is 'Good' rather than 'Excellent' because the connection between the described problems and technical debt isn't explicitly stated by the author, although it's strongly implied.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion mentions issues that could be related to technical debt, such as lack of maintenance and coordination challenges, but it does not explicitly or implicitly address technical debt indicators like poor-quality code or lack of tests. Additionally, while the project is described as agile, the discussion is more focused on general software quality management rather than specific technical debt issues within an Agile Software Development context. The post is primarily seeking advice on managing long-term software quality, lacking a real-world scenario or example of technical debt in ASD."
    },
    {
        "id": 26106,
        "title": "How to work with sprints having to provide support to unplanned issues?",
        "body": "<p>All, I have to work with an Agile team that they have to attend to live system issue(tickets) fixing while working on a sprint. So that we cannot achieve the committed  SP  at the end of the sprint. Does anyone have advice for such an issue?</p>\n",
        "score": 4,
        "creationdate": "2019-03-30T18:04:19.040000",
        "viewcount": 337,
        "tags": "|scrum|agile|planning|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario (inclusion criteria 2) within an Agile team (inclusion criteria 4) where unplanned issues (live system tickets) prevent the team from completing the sprint backlog (implicitly indicating technical debt through time management difficulties and failure to meet sprint goals - inclusion criteria 1).  While the post doesn't explicitly define a TD indicator, the inability to complete committed work due to unplanned issues strongly suggests the presence of underlying technical debt that is causing the need for unplanned support. The lack of explicit detail on the nature of the technical debt makes it 'Good' rather than 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of time management difficulties and challenges in achieving sprint commitments due to unplanned issues. It describes an existing scenario based on lived experience, as the author is dealing with real-world challenges in an Agile team. The discussion is related to Agile Software Development, as it explicitly mentions working with an Agile team and sprints. However, the discussion lacks depth in addressing specific TD indicators, which slightly reduces its relevance."
    },
    {
        "id": 26133,
        "title": "Should dev oncall fix P1 issues?",
        "body": "<p>We have a scrum team, and are debating two approaches for fixing P1 production issues.</p>\n\n<p>For P0 issues, whoever is the expert in that area jumps in and fixes the issue, so that the issue can get addressed at the earliest.  The P2 issues are moved to the backlog and get prioritized for future sprints.   However, P1 issues are such that we cannot wait till the next sprint for them to get fixed.  Hence, we are debating two approaches here:</p>\n\n<ol>\n<li>Whoever is the dev oncall fixes the issue; though they may not have the complete context of that area of code; they would get the context from the dev owner of that feature and fix the issue.</li>\n<li>The dev oncall only does the initial analysis to confirm that it is a genuine issue, and dev owner of the feature fixes the issue.</li>\n</ol>\n\n<p>In approach 1, the advantage is that nothing planned for the current sprint is impacted, and everyone in the team gets to work on areas that they may not have previously worked on.  However, this approach will spend more of oncall bandwidth, and if there are more issues, then, we may need multiple oncall during some sprints.</p>\n\n<p>In approach 2, the advantage is that the P1 issues will get fixed at the earliest since the person with the complete context of the issue works on it. However, something planned in the sprint will have to be deprioritized.</p>\n\n<p>Do you see any other advantages / disadvantages of these two approaches, and would you advice to choose a specific one?</p>\n",
        "score": 5,
        "creationdate": "2019-04-05T06:24:18.663000",
        "viewcount": 251,
        "tags": "|scrum|sprint|development-process|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions prioritization and impact on sprint planning, which could indirectly relate to technical debt if neglected issues accumulate, it does not explicitly or implicitly discuss technical debt or its indicators (poor code quality, lack of tests, etc.). The core of the discussion is about on-call rotation and incident management, not technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about handling P1 production issues in a scrum team, which is related to Agile Software Development (ASD). However, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The focus is on operational decision-making for issue resolution rather than on TD. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 26149,
        "title": "Parallel Sprints Use case",
        "body": "<p>Why do we need Parallel Sprints? I am trying to understand the use case here.  Consider our Use case</p>\n\n<ol>\n<li><p>We have two developers and two testers on our scrum team</p></li>\n<li><p>We have four developers joining the team (but they are not dedicated team members)</p></li>\n<li><p>Our sprint cycle is 2 weeks</p></li>\n</ol>\n\n<p>Do you recommend parallel sprints for this scenario? The team is thinking to have sprint 1 and sprint 2 (with four developers) start on the same date, but sprint 2 to have 3 weeks cycle to accommodate the testing.</p>\n",
        "score": 3,
        "creationdate": "2019-04-08T18:35:26.060000",
        "viewcount": 1021,
        "tags": "|scrum|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on the organizational strategy of parallel sprints within a Scrum team, addressing team scaling and sprint cycle lengths.  While it mentions team members and testing, it does not discuss any indicators of technical debt, either explicitly or implicitly. There is no mention of code quality, lack of documentation, or other issues related to technical debt. The core of the discussion is about project management and team organization, not technical debt within an Agile context.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the logistics of managing parallel sprints in a scrum team, which is an aspect of Agile Software Development. However, it does not address Technical Debt explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or any other indicators of Technical Debt. The discussion is purely about sprint planning and team management, without any reference to Technical Debt issues."
    },
    {
        "id": 26220,
        "title": "In Scrum, what should we do with partly-completed work started at the end of a Sprint?",
        "body": "<p>I get most of Scrum. However, I can't get my head around what to do with work in progress at the end of a Sprint.</p>\n\n<p>If we are working in a swarm, we can defer the end of a Sprint, or bring it forward if we don't think we have enough time. However, when working as individuals or in pairs, not every one finishes at exactly the same time. Therefore some people will be sitting around, or producing work that cannot be finished.</p>\n\n<p>As a developer I hate it when I am halfway through my 7th bit of work, and the Sprint ends. If the unfinished work is selected for the next Sprint, all is good; but if not, then I feel disheartened. Even worse is when it is selected in a later Sprint. (This seems to go against the low work in progress philosophy).</p>\n\n<p>In the past I adapted our practice to focus on low work-in-progress, and regular review (but no Sprints). I later realized that this was Scrumban.</p>\n\n<p><strong>Am I missing something?</strong> I would like to get a better understanding of pure Scrum. (I know we are supposed to adapt it, but understanding it first is also a very good idea).</p>\n",
        "score": 8,
        "creationdate": "2019-04-16T19:51:18.107000",
        "viewcount": 990,
        "tags": "|scrum|agile|sprint-backlog|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions unfinished work and the feeling of being disheartened, it does not explicitly or implicitly address Technical Debt.  It focuses on Scrum process improvement and managing work-in-progress within a sprint, not on code quality, maintainability, or other indicators of technical debt. There is no mention of code quality issues, lack of testing, or other factors that would indicate technical debt.  The core issue is workflow management within the Scrum framework, not technical debt accumulation.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about understanding Scrum practices, specifically handling work in progress at the end of a Sprint. While it touches on concepts like low work-in-progress and team morale, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, the discussion does not describe an existing scenario based on lived experience related to TD. Therefore, it does not meet the inclusion criteria for discussions on TD in Agile Software Development."
    },
    {
        "id": 26339,
        "title": "Agile Estimation - How to estimate for bugs?",
        "body": "<p>The story points can be used for estimate user stories and tasks will be marked in hours in Visual Studios. </p>\n\n<p>When there is a critical bug (which is not in the backlog, reported by users) we incorporate to the current sprint and try to resolve it within the current sprint.</p>\n\n<p>In doing so, we have to make adjustments to tasks or other issues, which,in turn will probably end up in a future sprint. </p>\n\n<p>Now when we want to estimate for the critical issues reported (on TFS), we can enter the effort in hours. But, this does not display in the charts and nor it is counted. I figured that, if I was to monitor the effort for bugs, I have to create them as tasks and then only I can monitor on the charts. </p>\n\n<p>My question, is do you recommend this approach or is it there something that I am doing wrong? </p>\n",
        "score": 2,
        "creationdate": "2019-05-03T11:03:02.877000",
        "viewcount": 563,
        "tags": "|bugs|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real-world scenario within an Agile context where critical bugs disrupt sprint planning, leading to adjustments and potential delays. This implicitly points to technical debt as the bugs are not part of the planned work and require immediate attention, impacting the team's velocity and potentially creating further debt. The author is using an agile methodology (sprints, user stories, tasks) and is facing a challenge related to bug management, which is a common indicator of technical debt. The discussion is not explicitly about technical debt, but the scenario described is a consequence of it.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an Agile environment (using Visual Studio and TFS) where unexpected bugs disrupt sprint planning.  The team's struggle to track and estimate the effort for bug fixes, impacting their ability to accurately monitor progress and potentially leading to future sprint delays, implicitly points to a form of technical debt (unforeseen work due to inadequate initial development). While not explicitly mentioning 'technical debt', the description of the problem and its consequences clearly aligns with the implicit indicators of TD within an Agile context. The lack of a clear definition of a TD indicator in the initial post slightly lowers the relevance score.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on estimation practices for bugs in Agile development, specifically using story points and hours in Visual Studio and TFS. While it touches on Agile Software Development, it does not explicitly or implicitly address Technical Debt. The discussion lacks any mention of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. Therefore, it does not meet the inclusion criteria for discussions on Technical Debt in Agile Software Development."
    },
    {
        "id": 26369,
        "title": "Multiple people working on the same new open source project and chaos",
        "body": "<p>How to take advantage of multiple people working on a single android app when it comes to tasks and task delegation? It seems like a lot of times it is a matter of sewing multiple pieces of code done by others together. Is there a better way?</p>\n\n<p>Please note that the project is very new. We don't have a lot of code and are working ideas and drawings.</p>\n",
        "score": -1,
        "creationdate": "2019-05-09T12:02:20.173000",
        "viewcount": 56,
        "tags": "|team-management|project-management-style|open-source|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in collaborative software development, it does not explicitly or implicitly refer to Technical Debt.  There's no mention of code quality issues, lack of testing, duplicated code, or other indicators of TD. The focus is on project organization and task delegation in a new project, not on managing existing technical debt.  It lacks any description of an existing scenario with TD indicators, failing to meet inclusion criteria 1, 2, and 4.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about task delegation and collaboration in a new open source project. It does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no mention of Agile Software Development (ASD) practices or methodologies. The focus is on managing contributions from multiple developers, which does not align with the criteria for TD in ASD."
    },
    {
        "id": 26555,
        "title": "Mark user stories as not possbile/plausible",
        "body": "<p>Our team noticed during this Sprint that a user story is not plausible to do from a technical point of view. We approved this decision with our stakeholders and client and we want to mark this user story as \"will not be implemented\" or something similar.</p>\n\n<p>I can't find any official documentation on how to deal with these sort of user stories. Is there an official way to mark these user stories and are there some functionalities in the tool Jira for that?</p>\n",
        "score": 2,
        "creationdate": "2019-06-03T18:29:05.967000",
        "viewcount": 198,
        "tags": "|scrum|user-stories|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions a user story deemed technically infeasible, it doesn't describe an existing scenario of technical debt.  It's primarily an advice-seeking question about Jira functionality for handling such situations, lacking real-world examples of technical debt indicators or Agile methodologies in practice.  Therefore, it fails to meet inclusion criteria 2 and 3.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about marking user stories as not plausible in Jira, which is related to Agile Software Development. However, it does not discuss Technical Debt explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or other TD indicators. The focus is on process management in Agile, not on TD."
    },
    {
        "id": 26602,
        "title": "WIP Limits broken by low-priority Stories - What to do?",
        "body": "<h2>Current Situation</h2>\n\n<p>Small team of 4 developers and 2.2 QAs.</p>\n\n<p>I'm trying to implement work in progress (WIP) limits.</p>\n\n<p>There are currently many (37) Stories waiting for QA (also 22 currently being QA'd, but that's a separate issue).</p>\n\n<p>Of these Stories, some of them are an entirely new application that isn't yet live. Most/all (I haven't checked) have been merged to develop branches but are alone so could always just delete develop and remake it from master. It's possible (though somewhat unlikely) some of them are merged into develop with other work, though.</p>\n\n<h2>Problem</h2>\n\n<p>Now, as per my understanding, as per how WIP limits should work, the team should be focusing on reducing those 'waiting for QA' Stories instead of heaping more Stories into the 'Waiting for QA' by developing more stuff.</p>\n\n<p>Problem is, until now, the team has been working on things without much regard to priorities. So many (~2/3) of the Stories waiting to be QA'd are much lower priority than things that are waiting to be developed.</p>\n\n<h2>Question</h2>\n\n<p>So... what should be done? I can see these possibilities, but have no idea what is the best approach:</p>\n\n<ul>\n<li>Ignore the low-priority Stories (and, consequently, reasonable WIP limits) until sometime in the future when they can be addressed.</li>\n<li>Create some other field or column to hide the work until such time as it's relevant.</li>\n<li>Throw away the work and move the Stories back to Ready to Develop.</li>\n<li>Ignore priorities and get the work under WIP limits as soon as possible.</li>\n<li>Some solution I've missed...?</li>\n</ul>\n",
        "score": 3,
        "creationdate": "2019-06-10T19:54:27.200000",
        "viewcount": 145,
        "tags": "|kanban|prioritization|work-in-progress|",
        "answercount": 1,
        "favoritecount": 0,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses Technical Debt. The large number of low-priority stories waiting for QA indicates a potential backlog of unfinished work, suggesting a build-up of technical debt.  The team's disregard for priorities and the resulting WIP limit issues point to a lack of effective prioritization, which can contribute to accumulating technical debt. The context is clearly within an Agile environment (mention of WIP limits, stories, sprints). While the discussion doesn't explicitly mention 'technical debt', the described situation is a strong indicator of it. The author describes a real-world scenario, fulfilling the criteria for inclusion.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of poor time management and prioritization issues, which are indicators of TD. The scenario described is based on lived experience, detailing a real-world problem with WIP limits and prioritization in a small Agile team. The discussion is clearly within the context of Agile Software Development, as it involves WIP limits and prioritization, which are key elements of agile methodologies. However, the discussion lacks depth in exploring the consequences of the described issues on the team's performance or software quality, which prevents it from being rated as 'Excellent.'"
    },
    {
        "id": 26616,
        "title": "How to plan for bugs, looking for advice",
        "body": "<p>I work in a software development company, where we use something which resembles scrum.</p>\n\n<ul>\n<li>We have sprints of 4 weeks</li>\n<li>We have 6 sprints / release</li>\n<li>We plan a development per sprint, with an estimate</li>\n<li>We have a debug factor, this is the time per sprint allocated for debugging (varies per developer)</li>\n<li>We have maximum levels for our bugs</li>\n</ul>\n\n<p>We run into the issue that when we are working on our developments, and the bugs start coming, we need to drop our development work and focus on debugging. When the maximum levels are reached, we don't release our software anymore and we need to first fix bugs before we make new builds for our customers.</p>\n\n<p>This all seems perfectly reasonable, since we only release every half year and we have customers waiting for the bugs to be fixed.</p>\n\n<p>However, this creates the situation where we sometimes don't find the time to work on our developments, because we have to keep debugging for weeks sometimes.</p>\n\n<p>How can we plan correctly for bugs?\nA couple of things I thought about, but I'm curious what your opinion is </p>\n\n<ul>\n<li>Plan bugs as regular developments, with an estimate. Don't give them priority</li>\n<li>If a developer spends it's debugging budget for a sprint, don't debug anymore that sprint and continue work on the development.</li>\n<li>Other options?</li>\n</ul>\n",
        "score": 2,
        "creationdate": "2019-06-13T08:45:46.133000",
        "viewcount": 1292,
        "tags": "|scrum|planning|bugs|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in a Scrum-like Agile environment where debugging consumes significant development time, hindering progress on planned features.  While not explicitly mentioning 'technical debt,' the description of accumulating bugs that require extensive debugging implicitly points to a form of technical debt. The team's struggle to balance bug fixing with new development directly relates to the challenges of managing technical debt within an Agile framework. The proposed solutions also reflect attempts to address this debt.  The lack of explicit mention of specific code quality issues slightly lowers the relevance rating.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses time management difficulties and challenges in software development due to the need to prioritize bug fixing over new development. The scenario described is based on lived experience, meeting the inclusion criteria. The discussion also relates to Agile Software Development (ASD) as it mentions using a process resembling Scrum, which is an agile methodology. However, the discussion lacks depth in explicitly defining TD indicators, which slightly affects its relevance, hence the 'Good' rating."
    },
    {
        "id": 26621,
        "title": "How to move towards Scrum when we don't really seem to be able to fit into 'The Scrum Guide'?",
        "body": "<p>I have previously <a href=\"https://pm.stackexchange.com/questions/24475/software-dev-team-managing-task-across-multiple-projects-in-a-manufacturing-pla\">asked a question on PM</a>, which was not well focused, but I still received some useful tips. I do plan on putting some of the notions in front of my manager, but I would like to re-approach our issues here to see if I can't get any more insight.</p>\n\n<p>I work for a mid-sized American company (300ish) on a very small, not officially/organizationally recognized development team (3). Only one of us has a degree in CS (and it isn't me). Our manager is an manufacturing engineer and has negligible experience programming, designing software, or managing a development team (except for the past two years of our 'covert developing'). On top of this, our developer with a CS degree tends to work on projects solo, separate from the other two of us.</p>\n\n<p>We have an <em>insane</em> amount of projects our manager is looking to achieve. Essentially he is hoping to digitize most of our Quality &amp; Inspection processes &amp; paperwork, all the way to semi-automating our PPAP/PFMEA documentation. Frankly it is all way more than is chew-able by such a small, inexperienced team (in any sort of respectable time frame), in my opinion, but I admittedly tend to have a 'glass half-empty' attitude. So far our extended time frame hasn't been an serious issue to our company's President. Half of the projects are very large... our current project has more or less taken up about 70% of overall work-time for two of our developers, and has taken 2 years to develop, and still going (we had to restart the architecture and include unit-tests because we didn't know what we were doing when we started).</p>\n\n<p>Now, our manager (who, to his credit spends a lot of time reading on relevant subject matter to try and understand our position as developers better) wants to try and work under a Scrum framework. I have taken on the role of Scrum-Master, our manager as Product-Owner, and of course the other two developers are... developers. Other mgmt. and our President would be the 'shareholders'.</p>\n\n<p>My main issues that I am struggling with, and unsure how to approach are:</p>\n\n<ul>\n<li>Our 1 'team' actually consists of two separate development teams\nworking on unrelated projects (mentioned in second paragraph) and either team can, currently, get our priorities changed independent of the other team's priorities as well. This seems like it should be 2 separate scrum teams but our manager/PO does not have the time for that, and I don't think I have the mental energy for it, currently. Also, how are we supposed to be accountable as a team for separately developed projects?</li>\n<li>Projects are all essentially interwoven into the same 'suite' and our\nprojects kind of have blurred borders/edges.</li>\n<li>Even if we break projects into hard-defined boundaries... the\nprojects are still quite large and our product backlog could be too\nmuch to navigate if it is fully populated</li>\n<li>Fully and accurately populating the product backlog seems daunting, as\noften times 'case-scenarios' are often overlooked by shareholders in\nfavor of 'the ideal interaction' or they state outcome but struggle\nto define how to get that outcome even on paper. Sometimes processes get such a vague description such as : \"The quality tech would look up the relevant specification and make sure the document conforms\"... which you can't turn into programmable logic on its own, we aren't making magical PDF parsers.</li>\n<li>More on the previous point: Getting vague, generalized process outcomes from shareholders has required us to go and talk to individual employees that actually do the paperwork, often times the nuances in their process will slightly deviate the generalized mind's-eye picture of the shareholders, which then often triggers long, grueling conversations where we as the developers are just trying to get the shareholders to understand <em>what</em> we need to know and <em>why</em> we need to know it... this seems incredibly anti-Scrum and I don't see how we are supposed to essentially design an enterprise-level software-suite if we have to re-explain why we need to understand case-scenarios and the nuanced details of the process every time we outline a new software behavior. <em>Is there a way I can get non-programmers to understand our needs better? Especially when I have a hard time outlining our needs because we are trying to digitize processes that often rely on 'tribal knowledge'</em></li>\n<li>We lack personnel to be able to handle documentation, training, and\nmaintenance (we often have to drop development work to handle these\n\"fires\" as they come up)</li>\n<li>EDIT: some of my other points kind of speak to this, but how\ngranular/detailed should a PBI be? Do all PBI's have to be finishable\nwithin a sprint?</li>\n<li>Also, can Scrum Planning, Review, and Retrospective be held without <em>any</em>\nPO or Shareholders if none of them have time?</li>\n</ul>\n",
        "score": 1,
        "creationdate": "2019-06-13T15:58:30.360000",
        "viewcount": 235,
        "tags": "|scrum|software-development|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses challenges in adopting Scrum in a real-world software development team.  While not explicitly mentioning 'technical debt,' the description of restarting a project due to initial architectural flaws and lack of unit tests clearly indicates a significant amount of implicit technical debt. The team's struggles with vague requirements, insufficient time, and a lack of personnel to handle documentation and maintenance further highlight the presence of technical debt and its impact on the Agile process. The context is clearly within an Agile (Scrum) framework. The issues described are based on lived experience within the team.  The lack of depth in explicitly defining the technical debt indicators is why it's classified as 'Good' rather than 'Excellent'.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly references indicators such as poor-quality code (having to restart architecture and include unit-tests), lack of documentation, and time management difficulties. It describes an existing scenario based on lived experience, detailing the challenges faced by a small development team in a mid-sized company. The discussion is related to Agile Software Development (ASD) as it focuses on the team's attempt to implement Scrum, an agile methodology. However, the discussion lacks depth in explicitly addressing TD indicators, which affects its relevance rating."
    },
    {
        "id": 26695,
        "title": "How several teams should work on one product using Scrum?",
        "body": "<p>Problems:</p>\n\n<ol>\n<li><p>A team should be able to do the increment. But with multiple team the product may become unstable because the changes from different teams may create code or functional conflict. Who should solve this problem and how?</p></li>\n<li><p>We have no architect role (all members are developers without additional titles), and code quality rules may be different in teams. One of the teams may always add technical debt to the product and the other teams will suffer from it. How to solve this problem?</p></li>\n</ol>\n\n<p>Assumption: project is a big monolith application with tight coupling.</p>\n",
        "score": 0,
        "creationdate": "2019-06-23T14:07:48.650000",
        "viewcount": 1228,
        "tags": "|scrum|agile|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly addresses challenges in managing technical debt within a multi-team Scrum environment.  The second point directly mentions 'technical debt' and describes a scenario where differing code quality practices across teams lead to problems for the entire project. The context is clearly within an Agile (Scrum) framework, and the description is based on a real-world problem, not a hypothetical one. While it doesn't explicitly define a specific TD indicator beyond the general concept of inconsistent code quality, the implication is clear. The tight coupling of the monolith application further emphasizes the potential for accumulating technical debt.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it explicitly mentions the risk of one team adding technical debt that affects others. It describes an existing scenario where multiple teams work on a monolithic application, leading to potential instability and code conflicts, which are indicators of TD. The scenario is based on lived experience, not hypothetical, and it is set in the context of Agile Software Development (ASD) using Scrum. However, the discussion lacks depth in exploring solutions or providing detailed insights, which affects its relevance rating."
    },
    {
        "id": 26909,
        "title": "Is there any estimation method to estimate end user testing?",
        "body": "<p>Is there any estimation technique that can help us to estimate the number of needed test cases in traditional software projects? For example, we have a Software requirements specification (SRS) with 200 use cases; can I say \"we need 200 *10 = 2000 test cases\", as a rough estimation?</p>\n\n<p>We need this estimation to write a test plan for the project manager. Sometimes we don't fully understand the application from the SRS because of having spent too little time performing test planning.</p>\n",
        "score": 1,
        "creationdate": "2019-07-31T17:02:16.077000",
        "viewcount": 135,
        "tags": "|estimation|testing|software|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in software development (lack of time for test planning), it does not explicitly or implicitly address Technical Debt.  It's primarily focused on estimating test cases, a general software development task, not a discussion of existing technical debt. There is no mention of Agile methodologies or any indicators of poor code quality, lack of documentation, or other symptoms of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on estimation techniques for end-user testing in traditional software projects, specifically related to test case estimation from a Software Requirements Specification (SRS). It does not mention or imply Technical Debt (TD) indicators such as poor-quality code, lack of tests, or time management difficulties. Additionally, there is no reference to Agile Software Development (ASD) methodologies or practices. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 27208,
        "title": "Is it really necessary to have a four hour meeting in Sprint planning?",
        "body": "<p>According to Wikipedia, it is recommended that there should be a four hour meeting in a\ntwo-week sprint planning (pro-rata for other sprint durations).</p>\n\n<p>Is it necessary? Why?</p>\n",
        "score": 13,
        "creationdate": "2019-09-18T06:11:13.413000",
        "viewcount": 9703,
        "tags": "|scrum|sprint|sprint-planning|timeboxing|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion is primarily an advice-seeking question about sprint planning meeting duration.  It lacks a real-world context or description of an existing scenario involving technical debt. While time management difficulties could be an *implicit* indicator of TD, this is not established in the post.  There is no mention of Agile methodologies or any indicators of technical debt in the described scenario.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the necessity of a four-hour meeting during sprint planning, which is a procedural aspect of Agile Software Development. However, it does not relate to Technical Debt, either explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties related to TD. The discussion is about the logistics of sprint planning rather than any issues or challenges that could be classified as Technical Debt."
    },
    {
        "id": 27773,
        "title": "What is the best methodology for a multiproject and multiteam environment?",
        "body": "<p>I'm working in an enterprise that realizes several dozens of projects based on its own system. The problem is that there are:</p>\n\n<ul>\n<li>several projects</li>\n<li>several teams</li>\n<li>several modules that are associated with teams</li>\n</ul>\n\n<p>Currently, PMs work as coordinators of their projects between Teams - the same project can be done by several teams, and sometimes one part of a project depends upon other teams.</p>\n\n<p>Currently, we follow a Scrum-like approach:</p>\n\n<ul>\n<li>Teams up to 9 members</li>\n<li>2-week sprints</li>\n<li>planning of work is done at the beginning, but there is much unplanned work delivered by PMs</li>\n</ul>\n\n<p>All this leads to some factors:</p>\n\n<ul>\n<li>Low morale of Team members; it is very rare (~0%) that a Sprint is done in time</li>\n<li>One worker got an idea to just ignore all Scrum activities</li>\n</ul>\n\n<p>As I see at this moment, the main problem is in many-many relationship between Teams and projects; even when there is no product itself, it spreads over the projects.</p>\n\n<p>So my question is the following: maybe the best way would be to use Kanban? Workers will only pull work items from the backlog, just organizing flow. Maybe we don't have VERY complex projects, to justify using Scrum, and Kanban will be useful.</p>\n\n<p>I want to discuss this with my bosses. Are there any obvious disadvantages that I've missed here?</p>\n",
        "score": 0,
        "creationdate": "2019-12-17T08:37:50.763000",
        "viewcount": 297,
        "tags": "|scrum|kanban|project-management-style|multi-projects|multi-team|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion describes a real-world scenario in an Agile (Scrum-like) environment experiencing significant challenges.  While not explicitly mentioning 'technical debt,' the indicators strongly suggest its presence: low team morale, sprints rarely completed on time, unplanned work significantly impacting the process, and a team member suggesting abandoning Scrum activities altogether. These are all strong indicators of underlying problems likely stemming from poor planning, communication breakdowns, and potentially accumulating technical debt. The context is clearly within an Agile framework, fulfilling all inclusion criteria.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) implicitly through indicators such as low team morale and time management difficulties, which are common symptoms of TD. The scenario described is based on lived experience, detailing the challenges faced in a multi-project, multi-team environment using a Scrum-like approach. The author mentions the potential switch to Kanban, indicating a context of Agile Software Development (ASD). However, the discussion lacks explicit mention of TD or specific TD indicators, which slightly reduces its depth in addressing the inclusion criteria."
    },
    {
        "id": 27909,
        "title": "How to motivate a team when you have nothing to offer but equity?",
        "body": "<p>I recently got into the whole startup scene, and I was hired as CTO for an early-stage startup. I've got a fair bit of engineering experience, but when it comes to management, I'd definitely be in the junior range...</p>\n\n<p>I think I understand the essentials when it comes to managing people:</p>\n\n<ul>\n<li>Align user stories with their personal aspirations</li>\n<li>Give them independence</li>\n<li>Do not criticise in public</li>\n<li>Set an example</li>\n<li>Sell the whole thing as an opportunity to gain new skills fast</li>\n<li>etc</li>\n</ul>\n\n<p>I'm doing all those thing, and yet... the output I'm getting is minimal. </p>\n\n<p>I should clarify that we hire people on a part-time basis (10 - 20 hours a week), and we offer good equity (and no actual pay). New joiners always have an enthusiastic disposition, and they can get loads done in their first couple of weeks. Then they stop appearing online on Slack; they stop responding to my messages; and, eventually, they stop posting the weekly standup messages. The people that do contribute only offer the bare minimum -- not even 10 hours worth of work weekly.</p>\n\n<p>I'm really at a bit of a loss here. I shared my vision, and received no pushback from anyone. I can only assume that we're aligned and everyone agrees with the vision. This begs the question: if I can't offer money, how can I possibly motivate my engineers?</p>\n",
        "score": 22,
        "creationdate": "2020-01-07T19:34:09.880000",
        "viewcount": 10386,
        "tags": "|product-owner|motivation|startup|",
        "answercount": 12,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion touches upon team morale and low output, which could be *indirectly* related to technical debt, it does not explicitly or implicitly mention any technical debt indicators. The core issue is lack of motivation due to the absence of monetary compensation, not the quality of the codebase or development practices.  There is no mention of Agile methodologies or practices. Therefore, it fails to meet inclusion criteria 1 and 4.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about team motivation and management challenges in a startup context, focusing on issues related to offering equity instead of pay. While it touches on team morale and productivity, it does not explicitly or implicitly relate to Technical Debt (TD) or Agile Software Development (ASD). There are no mentions of poor-quality code, lack of tests, or other TD indicators, nor is there any reference to agile methodologies. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 28012,
        "title": "User Stories in backend/frontend teams working for clients",
        "body": "<p>We are a small software agency (15 people), currently using Jira, and implementing some Scrum practices more rigorously. </p>\n\n<p>But we're struggling with understanding how User Stories would help some parts of our dev process, particularly when backend/frontend teams work asynchronously.</p>\n\n<p>As our allocation of people to projects may vary from sprint to sprint, it's common that one sprint there may be only backend work, and then the next only frontend work. So the User Story may be complete only after both areas finished their part.</p>\n\n<p>We're aware that <a href=\"https://pm.stackexchange.com/a/26421/38421\">this is not a good practice</a>, but for the size of the company it seems useful.</p>\n\n<h2>Problem</h2>\n\n<p>An US may take several sprints to be finished (because of async work between frontend and backend). I'm aware that this wouldn't be a good practice.</p>\n\n<h2>Possible solutions</h2>\n\n<p><strong>1-  Not using US at all</strong> (how we're currently working). So we're using only Tasks (like implementing an endpoint for backend, or implementing a view for frontend), and Epics directly. </p>\n\n<p>Cons:</p>\n\n<ul>\n<li>Developers loose sight and ownership of the big picture of the feature. </li>\n<li>We can't measure feature/US deviation.</li>\n</ul>\n\n<p><strong>2- Avoid our async practice between specializations</strong> (backend/frontend). \nWe should make sure that in every sprint we have a \"full-stack\" team that is able to complete the US.</p>\n\n<p>Cons:</p>\n\n<ul>\n<li>It's common that we have idle people when transitioning between projects. For example, it's useful for us to work some backend tasks before the Frontend team start.</li>\n</ul>\n\n<p><strong>3- Use User Stories</strong>, but it may be finished after several sprints.</p>\n\n<p>Cons:</p>\n\n<ul>\n<li>They may be only completed after several sprints.</li>\n<li>It's not clear who is the owner. Should it be the last person in charge? Or the PM? </li>\n</ul>\n\n<p>I'd would appreciate some thoughts on this.</p>\n\n<p>Thanks for your help</p>\n",
        "score": 3,
        "creationdate": "2020-01-21T21:07:59.190000",
        "viewcount": 4091,
        "tags": "|scrum|agile|jira|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Agile practices (Scrum, User Stories) and challenges in software development, it does not explicitly or implicitly address Technical Debt.  The core problem revolves around team organization and workflow in an Agile context, not the accumulation of technical debt. There is no mention of code quality, lack of tests, duplicated code, or other indicators of technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion focuses on the challenges of using User Stories in a small software agency implementing Scrum practices. While it touches on issues like asynchronous work between frontend and backend teams, it does not explicitly or implicitly relate to Technical Debt (TD). There is no mention of poor-quality code, lack of tests, or other TD indicators. The discussion is more about process optimization in Agile Software Development rather than addressing TD."
    },
    {
        "id": 28023,
        "title": "Slowing down of an agile team as the development progresses",
        "body": "<p>Let's consider an agile software project. </p>\n\n<p>In the beginning of a project each Story can be implemented quite quickly because the code base is small, there're few dependecies between different parts of code, we don't have to maintain backward compatibility etc.</p>\n\n<p>But as the team moves forward the code base becomes larger, more complex - it requires more time to understand all the dependecies. We need to spend more time talking to other developers about the current architecture. A Story that used to be done during a few days, now becomes to require at lest a week. </p>\n\n<p>Nearer to the end of the project fixing even a minor bug often becomes very difficult because the code base is huge, there are a lot of dependecies and restrictions (for example, backward compatibility).</p>\n\n<p>So as the team progresses its velocity should slow down. The same Story in the beginning of the project may be estimated as 1 Story Point, but the this very Story taken into development at the end of the project may be estimated by the team as 10 Story Points or greater.</p>\n\n<p>Agile manifest sates that an agile team should maintain a constant pace - is it really possible?</p>\n\n<p>The team, of course, may begin to give more points to Stories to compensate for this complexity increasing, but that would mean that Story Point itself isn't a fixed unit of measure, and threrefore we can't use Story Points for forecasting the amount of time required to complete the project.</p>\n",
        "score": 0,
        "creationdate": "2020-01-23T18:39:26.253000",
        "viewcount": 238,
        "tags": "|scrum|agile|estimation|story-points|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion clearly meets all inclusion criteria. It explicitly discusses an existing agile project, detailing how increasing code complexity and dependencies (indicators of technical debt) lead to a decrease in team velocity.  The author directly relates this slowdown to the difficulty of understanding dependencies and maintaining backward compatibility, which are key aspects of technical debt in an agile context. The question regarding maintaining a constant pace in agile development further strengthens the relevance to the research topic.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly addresses issues like increased complexity, dependencies, and time management difficulties, which are indicators of TD. It describes an existing scenario based on lived experience, discussing how an agile team's velocity slows down as the project progresses due to these factors. The discussion is clearly set in the context of Agile Software Development (ASD), referencing agile methodologies and challenges. However, it lacks explicit mention of TD or more detailed insights into specific TD indicators, which slightly limits its depth."
    },
    {
        "id": 28226,
        "title": "How can I make sure that the development team understand the importance of the Scrum ceremonies?",
        "body": "<p>I heard a comment the other day from a team in our organization</p>\n\n<blockquote>\n  <p>As soon as release pressure increase the scrum ceremonies gets\n  neglected</p>\n</blockquote>\n\n<p>I thought to maybe have a chat with scrum master and have a session with our organization around this subject because I think this might affect more than one team.\nI am not sure how to approach this meeting because I know all ceremonies are important</p>\n\n<blockquote>\n  <p>Scrum ceremonies are important elements of the agile software delivery\n  process. They are not just meetings for the sake of having meetings.\n  Rather, these scrum ceremonies provide the framework for teams to get\n  work done in a structured manner, help to set expectations, empower\n  the team to collaborate effectively, and ultimately drive results. If\n  they\u2019re not managed appropriately, however, they can overwhelm\n  calendars and drown out the value they are intended to provide.</p>\n</blockquote>\n\n<p>As of writing this I dont know what \"neglected\" means in the context of this team but I will still have a meeting. The point is, it\u2019s not about whether or not they are doing these things perfectly but that they are doing them at all.  Each of the ceremonies has a very particular reason for its existence and continued use, so we want to target those reasons, not stick to some unnecessarily rigid definition of what\u2019s \u201cright\u201d or \u201cwrong\u201d.</p>\n\n<p>Agility requires us to adapt to changing conditions, but it starts by adopting processes that make us more likely to do the right things at the right times.</p>\n\n<p>Do you have any pointers when I talk to the teams? </p>\n",
        "score": 3,
        "creationdate": "2020-02-24T09:35:05.507000",
        "viewcount": 272,
        "tags": "|scrum|agile|scrum-ceremonies|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions challenges in an Agile team (neglecting Scrum ceremonies under pressure), it doesn't explicitly or implicitly refer to Technical Debt.  The focus is on the effectiveness of Scrum ceremonies, not on code quality, time management issues stemming from technical debt, or other indicators of TD.  Therefore, it fails to meet inclusion criterion 1.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on the importance of Scrum ceremonies within Agile Software Development. While it mentions the neglect of these ceremonies under release pressure, it does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. The discussion lacks a real-world scenario describing TD and does not define any TD indicators. Therefore, it does not meet the inclusion criteria for discussions related to TD in ASD."
    },
    {
        "id": 28228,
        "title": "How should a Scrum master handle disagreements about story-point estimates in Scrum?",
        "body": "<p>For example : Some see its userstory (e.g. 2 points) and others see technical complications and judge that the story should be 20 points. The 2-point voters say, \"I understand your opinion, but don't think those complications are valid.\" The 20-point voters say, \"The past tells us that these things are always a lot more complicated then they seem.\" Now the team is in deadlock condition. can you someone  put some light on this. how to handle this suitation.</p>\n",
        "score": 19,
        "creationdate": "2020-02-24T10:23:13.280000",
        "viewcount": 9069,
        "tags": "|scrum|agile|estimation|user-stories|",
        "answercount": 9,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion takes place within a Scrum context (Agile), it does not explicitly or implicitly address Technical Debt. The disagreement is about story point estimation, which is a project management and planning issue, not a symptom of technical debt.  There's no mention of code quality, lack of documentation, or other indicators of technical debt. The core problem is a difference in opinion regarding complexity, not a consequence of accumulated technical debt.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about handling disagreements in story-point estimates within a Scrum team, which is related to Agile Software Development (ASD). However, it does not explicitly or implicitly relate to Technical Debt (TD). The focus is on team dynamics and estimation disagreements rather than indicators of TD such as poor-quality code or lack of documentation. Therefore, it does not meet the inclusion criteria for discussions on TD in ASD."
    },
    {
        "id": 28288,
        "title": "Single Jira project for multiple Scrum teams",
        "body": "<p>We're going to develop a Java web application (frontend + backend's microservices) using several Scrum development teams. One team is resposible for the core product modules (microservices). Some other teams are responsible for some other modules (microservices). And yet another team is responsible for  development of the frontend.</p>\n\n<p>All the design and the specifications are kept in Confluence.</p>\n\n<p>Is it a good idea to create a single project in Jira and configure it so that each team sees only its tasks? Or is it more convenient to create different projects in Jira for each team?</p>\n\n<p>What are pros and cons of each approach?</p>\n",
        "score": 2,
        "creationdate": "2020-03-03T18:06:00.307000",
        "viewcount": 2773,
        "tags": "|scrum|agile|team-management|jira|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions Scrum teams and software development, it does not address Technical Debt (TD) either explicitly or implicitly.  The question focuses on Jira project management strategies for multiple teams, not on issues of code quality, maintainability, or other indicators of TD. There is no mention of poor code quality, lack of testing, duplicated code, or any other TD indicators.  Therefore, it fails to meet inclusion criterion 1 and is classified as a false positive.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on the configuration of Jira for multiple Scrum teams, which is related to Agile Software Development (ASD). However, it does not address Technical Debt (TD) explicitly or implicitly. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is primarily about project management tools and team organization, not about TD in ASD."
    },
    {
        "id": 29584,
        "title": "How do I overcome a bottleneck in a team's process, when what people are telling me doesn't match what I see",
        "body": "<p>I started a new job a few months ago as a scrum master.</p>\n\n<p>The team was and still is having problems completing their tasks during the sprint. </p>\n\n<p>Initially the problems seemed to be tasks that were too big and there were some blockers early on in the development process. As these problems were solved the percentage of tasks in the Testing column at the end of the sprint kept going up and up. While the done column didn't move much at all.</p>\n\n<p>There are two developers for each tester. Which is more testers than my previous team, but I am not sure how it compares to the industry average.</p>\n\n<p>I asked how the team could help the testers. I was told the developers weren't testing the changes before passing it to the tester. So we tightened up the pretesting quantity gates. Now not only do changes need to pass code review by another developer the developers also have to demo the code to the testers before the testers test it.</p>\n\n<p>The percentage of tasks in the testing column went up again. Now it is more than 80% of tasks by the end of the sprint.</p>\n\n<p>I suggested that the developers and testers pair test the tasks combining the pretest demo and testing. But the testers don't trust any testing done in the development environment and they won't let the changes into the testing environment without a pretest demo. And the suggestion that the developers and testers test in both environments in quick succession is popular with no-one.</p>\n\n<p>I have been talking the lead tester and the challenges they are experiencing seem significant, however I keep getting the feeling I'm missing something. I feel as if I am asking the wrong questions.</p>\n\n<p>I think I need to talk to someone lower on the totem pole, someone less invested in the status quo. Smaller, more concrete, subtler questions maybe during one of those pretesting demos. I'll do that next week.</p>\n\n<p>Also the complaints about lack of developer testing are louder.</p>\n\n<p>My feeling is that only a few tasks are getting bounced back, but those few are causing  disproportional pain to both developers and testers. Also much of the time the problem is not the task bounced back, but some other task in the testing queue. My feeling is the problems will get worse the longer the testing queue gets.</p>\n\n<p>But that is my feeling. It would be nice to have some concrete numbers. With my previous team I would open up JIRA reports and I'd get some idea about what might be causing the problem. With this team JIRA reports is giving me garbage. They are saying we are getting no work done at all which is not quite true. I'd like to get the percentage of tasks reopened after testing and the percentage of time in testing, it looks like I will have to dig into JQL as the standard reports are giving me nothing.</p>\n\n<p>What am I doing wrong? What am I missing? </p>\n\n<p>My previous team was more cross functional. With this team I am not sure how to even begin to move them in that direction. Any suggestions in that direction are shot down immediately.</p>\n",
        "score": 21,
        "creationdate": "2020-04-25T09:16:36.347000",
        "viewcount": 5881,
        "tags": "|scrum|jira|testing|bugs|velocity|",
        "answercount": 8,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Excellent",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It explicitly describes a real-world scenario in an Agile (Scrum) environment where a team is struggling to complete sprints due to a bottleneck in the testing phase.  The post details indicators of technical debt, such as poor-quality code leading to significant rework and retesting (implied by the high percentage of tasks stuck in testing and the repeated issues with tasks being bounced back). The author's observations and attempts to address the problem through process changes (pretesting gates, pair testing suggestions) further support the existence of a TD-related issue. While the author doesn't explicitly label the problem as 'technical debt', the symptoms strongly suggest it. The lack of concrete data initially hinders a full assessment, but the author's intention to gather more data (JQL analysis) indicates a commitment to understanding the root cause. The discussion is therefore relevant and valuable for the study, although it could benefit from more concrete data to strengthen the analysis.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is highly relevant to Technical Debt (TD) in Agile Software Development (ASD). It explicitly describes a scenario where the team is facing challenges in completing tasks during sprints, which is a common indicator of TD related to time management difficulties and process inefficiencies. The Scrum Master describes lived experiences and real-world challenges, such as the imbalance between developers and testers, lack of developer testing, and issues with JIRA reports, which are all indicative of TD. The context is clearly within an Agile framework, as the role of Scrum Master and sprint processes are mentioned. The discussion provides actionable insights into the challenges faced and potential areas for improvement, making it an excellent fit for the study."
    },
    {
        "id": 29724,
        "title": "Team velocity declined after legacy declaration",
        "body": "<p>I am the manager and I am struggling with a declined velocity. I have tried to discuss with the team what is going on, and they say they got better at story point estimation. But I suspect they are not motivated. </p>\n\n<p>A few months ago, the director announced that the company planned to phase out the software the team had been working on and replace it a different product from the market. He said there were no timelines yet for the sunset date and it was not their intention to leave users without alternatives. It is not clear if the team will have any role in the new product, so their future is uncertain. </p>\n\n<p>Ever since the announcement, the velocity has declined by up to 50%. I suspect the team are either interviewing or ramping up their skills to prepare for their next job. How do I motivate them to restore their velocity? </p>\n\n<p>I know it is not common for management to rely on velocity as a measure of productivity. But in this company, velocity and individual points are how teams and individuals are evaluated.</p>\n",
        "score": 1,
        "creationdate": "2020-05-19T13:16:10.110000",
        "viewcount": 234,
        "tags": "|agile|team-management|sprint|motivation|velocity|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion meets all inclusion criteria. It implicitly addresses Technical Debt through the decline in team velocity following an announcement to phase out their existing software.  The decline in velocity is presented as an existing scenario based on lived experience, fulfilling criterion 2. The decreased motivation and potential job searching are implicit indicators of TD (criterion 3), stemming from the uncertainty about the team's future and the legacy nature of their current project. The context is clearly within an Agile environment, as evidenced by the mention of velocity and story points (criterion 4). While it doesn't explicitly mention 'technical debt', the impact on team morale and productivity strongly suggests it as an underlying factor. The lack of explicit detail on the technical aspects of the software slightly reduces its relevance, hence the 'Good' classification.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt implicitly through the mention of low team morale and time management difficulties, which are indicators of TD. It describes an existing scenario based on the manager's lived experience with a decline in team velocity after a strategic decision by the company. The discussion is related to Agile Software Development as it involves concepts like team velocity and story point estimation, which are common in agile methodologies. However, the discussion lacks depth in exploring specific TD indicators beyond team morale, which affects its relevance rating."
    },
    {
        "id": 29868,
        "title": "\"View content\"-type user story/acceptance criteria",
        "body": "<p>I'm relatively new to the acceptance criteria in GWT format, and I'm struggling with writing them for the features that involve reviewing content. For instance: the user is on the home page of e-commerce website, and reviews the items being sold on that website.</p>\n\n<p>My user story looks like this: As a User, I want to view the available products so that I can find the one I want to buy. But what about acceptance criteria? I've come up with the \"Given\" part (Given I've navigated to the system home page) and \"Then\" part (Then I'm able to view the available products) - however, \"When\" is a mystery for me. What is that trigger that moves the user from \"Given\" to \"Then? Maybe I'm just totally wrong with \"Given\"/\"Then\" parts?</p>\n\n<p>I've tried to google that, but it seems like either my requests are clumsy or it's not that big problem for everyone else.</p>\n\n<p>Thank you in advance and sorry if it's been posted before :)</p>\n",
        "score": 3,
        "creationdate": "2020-06-17T15:50:11.507000",
        "viewcount": 167,
        "tags": "|user-stories|acceptance-criteria|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "This discussion focuses on writing user stories and acceptance criteria in the context of GWT (Google Web Toolkit) for an e-commerce website. While it mentions user actions and the ability to 'view products', it does not discuss technical debt, its indicators, or any aspects of Agile Software Development.  There is no mention of code quality, development challenges, or any other implicit or explicit indicators of technical debt. The core of the question is about software development process, not technical debt within that process.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on writing acceptance criteria for user stories in an e-commerce context, specifically using the Given-When-Then (GWT) format. It does not relate to Technical Debt (TD) or Agile Software Development (ASD) in any explicit or implicit manner. There are no mentions of TD indicators such as poor-quality code, lack of tests, or time management difficulties. The discussion is primarily about understanding the structure of acceptance criteria, which does not align with the research focus on TD in ASD."
    },
    {
        "id": 29946,
        "title": "How can I effectively differentiate the Sprint Goal from the Sprint Backlog?",
        "body": "<p>I'm facing a situation where I have to explain with an example the difference between a Sprint Goal and a Sprint Backlog. Here's how I understand it:</p>\n<ol>\n<li>The <strong>Sprint Goal</strong> is an objective that needs to be achieved by the team during the sprint through the implementation of <strong>part</strong> of the Product Backlog.</li>\n<li>The <strong>Sprint Backlog</strong> is a stream or set of items from the Product/Release Backlog that are to be worked upon and some of it which will help achieve the <strong>Sprint Goal</strong>.</li>\n</ol>\n<p>For example, a team is building a ratings feature for a product item on sale at an e-commerce website.</p>\n<ul>\n<li>Feature 1:, As a user, I want to leave a rating for an item I have purchased.</li>\n<li>Feature 2: As a user, I want to view ratings given by other users who have purchased a product.</li>\n</ul>\n<p>Now the <strong>Sprint Backlog</strong> could be a mix of User Stories for each of these:</p>\n<ul>\n<li>features</li>\n<li>defects</li>\n<li>tech debt</li>\n<li>spikes/research/proofs-of-concept, etc.</li>\n</ul>\n<p>but the Sprint Goal for each Sprint should be from the user's perspective. For example, goals for four different Sprints might be:</p>\n<ol>\n<li>Sprint Goal:\n<ul>\n<li>Users should be able to see a list of stars against each product.</li>\n</ul>\n</li>\n<li>Sprint Goal:\n<ul>\n<li>Users should be able to give a rating to each product.</li>\n<li>Users should be able to view ratings of other users.</li>\n</ul>\n</li>\n<li>Sprint Goal:\n<ul>\n<li>Users should be able to change the rating at any given point of time.</li>\n<li>Users should not be able to change other users' ratings.</li>\n</ul>\n</li>\n<li>Sprint Goal:\n<ul>\n<li>Users cannot rate products that have not yet been purchased.</li>\n</ul>\n</li>\n</ol>\n<p>How can I better explain the difference?</p>\n",
        "score": 2,
        "creationdate": "2020-07-08T02:22:21.943000",
        "viewcount": 361,
        "tags": "|scrum|agile|sprint|product-backlog|sprint-goal|",
        "answercount": 3,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "The discussion is about explaining the difference between a Sprint Goal and a Sprint Backlog within an Agile context. While it mentions tech debt as a possible item in the Sprint Backlog, it does not describe an existing scenario of technical debt. The discussion is primarily advice-seeking and does not present a real-world example of TD in ASD.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "The discussion explicitly mentions \"tech debt\" as part of the sprint backlog, fulfilling inclusion criterion 1 (explicit mention of TD).  It describes a real-world scenario (building a ratings feature), satisfying criterion 2. The author defines a TD indicator (tech debt items in the backlog) implicitly, meeting criterion 3. Finally, the context is clearly within Agile Software Development (Sprints, Sprint Backlog, Sprint Goal), fulfilling criterion 4. While the focus isn't solely on TD, its inclusion within the sprint backlog in a real-world Agile context makes it relevant.  It's classified as 'Good' because the discussion of TD is brief and not the central theme.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is focused on explaining the difference between a Sprint Goal and a Sprint Backlog in the context of Agile Software Development. However, it does not relate to Technical Debt (TD) explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or other TD indicators. The mention of 'tech debt' is in a generic list of backlog items and not discussed further. Therefore, it does not meet the inclusion criteria for TD in ASD."
    },
    {
        "id": 30136,
        "title": "Refactoring in Agile development",
        "body": "<p>In an app development project, the full scope of the project was not considered in the app design. So, the frequent refactoring of codes to accommodate changes is negatively impacting the project delivery timeline, which has become necessary during a sprint. How best can this be controlled to minimize the risk of overshooting the agreed date of project delivery, since stakeholders are not willing to compromise?</p>\n",
        "score": 5,
        "creationdate": "2020-08-15T14:03:16.870000",
        "viewcount": 663,
        "tags": "|scrum|agile|software-development|schedule-risk|",
        "answercount": 2,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion explicitly mentions refactoring, a common indicator of technical debt in software development.  It describes a real-world scenario of an Agile project experiencing time management difficulties due to unforeseen design limitations requiring frequent code changes. While it doesn't explicitly label the refactoring as 'technical debt', the context strongly implies it. The question focuses on managing the impact of this debt on the project timeline within an Agile sprint, fulfilling all inclusion criteria.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt as it implicitly mentions the need for frequent refactoring due to poor initial design, which is impacting project timelines. This aligns with TD indicators such as poor-quality code and time management difficulties. The scenario is based on a real-world experience in an Agile Software Development context, as it discusses issues arising during a sprint. However, the discussion lacks depth in exploring specific TD indicators or solutions, which affects its relevance rating."
    },
    {
        "id": 30622,
        "title": "How can we simulate hard deadline?",
        "body": "<p>We're working on an ongoing project.</p>\n<p>We have internal deadlines like sprint but it's not a hard deadline.</p>\n<p>Nothing will happen if we don't reach the internal goals.</p>\n<p>The team is starting to get used to not finishing things within the deadline.</p>\n<p>And I still can't find a way to simulate a hard deadline because it doesn't actually exist.</p>\n<p>How can we simulate one to make team serious about getting projects finished?</p>\n<p>What are the factors that make us successfully create internal deadlines?</p>\n<p>Process, management, communication, people?</p>\n",
        "score": 2,
        "creationdate": "2020-11-19T13:37:50.543000",
        "viewcount": 364,
        "tags": "|team-management|deadline|goals|",
        "answercount": 5,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions deadlines and team performance issues, it does not explicitly or implicitly refer to Technical Debt.  It focuses on project management and team motivation rather than code quality or technical challenges. There is no mention of Agile methodologies, fulfilling exclusion criteria 3.  The lack of a real-world example of technical debt also contributes to its exclusion.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about simulating hard deadlines in a project management context. It does not explicitly or implicitly relate to Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, there is no mention of Agile Software Development (ASD) methodologies or practices. The focus is on team management and motivation rather than TD in ASD."
    },
    {
        "id": 30775,
        "title": "How should I deal with common dependencies when estimating stories in Scrum?",
        "body": "<p>There's something that has always bothered me with Scrum. Hopefully I can get some insight here.</p>\n<p>With Scrum, we try to break the backlog down in vertical slices. Let's say stories A and B. These stories are supposed to be customer oriented and deliver value. Assume here that they have similar customer value.</p>\n<p>Now, let's say that, to implement, A and B both need a shared infrastructure. So let's say we're at backlog refinement. If I ask the dev team to estimate in story points, they might estimate them each at 8 points, if they are estimated separately: A8, B8. This is good for me as PO because I can move the stories around in the backlog without breaking anything.</p>\n<p>However, when forecasting, my backlog will appear heavier, because, if combined, they might be delivered with a lesser effort than the sum of the parts. If my team has a hypothetical velocity of 13, it will look like they won't be able to deliver in 1 sprint. If there are many items like this, it will be impossible to have any visibility of a timeline beyond the planned sprint.</p>\n<p>If we have multiple stories with a same shared infrastructure, the backlog will seem very heavy, and forecast will be impossible.</p>\n<p>I have seen 2 variants:</p>\n<ol>\n<li><p>Split the infra work to a separate &quot;technical&quot; story: A3, B3, T5\nThis solves the estimation process, but it's a horizontal slice. The\ninfra itself has no customer value. Also, the backlog now contains\ndependencies, because the stories are no longer atomic, which means\nthat I can't reorder them without being aware of the dependencies.\nWithout looking at the specifics, I would have chosen A and B to be\ndone first, because they are low effort and high value. So it's\ngoing back to classic project planning.</p>\n</li>\n<li><p>Estimate the infra effort in one of the stories only, and\nestimate the second one as if the first one is already done: A8, B3.\nThe downside here is that one story will seem more complex than the\nother, so if I don't look at the details, I will be inclined to\nprioritize story B, because it will have the same customer value as\nA, with less effort.</p>\n</li>\n</ol>\n<p>So the questions are:</p>\n<ul>\n<li>Are there any documented ways to handle these?</li>\n<li>Have you found ways to\ndeal with situations like this that don't require you to pick between\nthe downsides mentioned here?</li>\n</ul>\n<p>I have dealt with these a bit with an ad-hoc way, by using one of the two options above and by marking dependencies, so that I don't put prerequisite tasks before subsequent ones. If I do, I redistribute the story points. But it looks bad for anyone else looking at the backlog, and I prefer the backlog to be a useful and transparent artifact.</p>\n",
        "score": 5,
        "creationdate": "2020-12-11T01:23:26.087000",
        "viewcount": 615,
        "tags": "|scrum|estimation|story-points|backlog|dependencies|",
        "answercount": 6,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions estimation challenges in Scrum, it does not explicitly or implicitly address Technical Debt.  The core issue is about dependency management in story point estimation, not about code quality, lack of tests, or other indicators of technical debt.  Although the example touches upon the potential for increased effort due to shared infrastructure, this is a project management challenge rather than a symptom of accumulated technical debt. There is no mention of Agile methodologies beyond Scrum.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily focused on estimation challenges in Scrum related to shared infrastructure dependencies. While it touches on issues like backlog management and estimation, it does not explicitly or implicitly address Technical Debt (TD) indicators such as poor-quality code, lack of tests, or documentation issues. Additionally, the discussion does not describe an existing scenario based on lived experience but rather seeks advice on handling estimation in Scrum. Therefore, it does not meet the inclusion criteria for TD in Agile Software Development."
    },
    {
        "id": 31076,
        "title": "How to store/manage a huge amount of coder task in the backlog",
        "body": "<p>What to do when the programmers from the dev team want to put their development tasks in the product backlog (such as refactor XXX, clean class XXX, ...)?</p>\n<p>We tried and have the users stories mixed with (a huge number of) programmers task that are hard to understand from the Product Owner point of view.</p>\n<p>Is there any good practices to store developers task?</p>\n",
        "score": 2,
        "creationdate": "2021-02-01T17:42:04.777000",
        "viewcount": 123,
        "tags": "|scrum|user-stories|backlog|",
        "answercount": 1,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "The discussion describes a real scenario where developers are adding technical tasks like refactoring and code cleaning to the product backlog, which is a form of technical debt. This is causing issues with the Product Owner's understanding, indicating a problem within an Agile context. The discussion implicitly points to poor code quality and maintainability as a TD indicator. While not explicitly mentioning Agile, the context of product backlog and product owner implies an Agile environment.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt. The developers' tasks like 'refactor XXX' and 'clean class XXX' are clear indicators of existing technical debt that needs addressing.  The context is within an Agile framework (product backlog, product owner), fulfilling the ASD criterion. While the post is primarily seeking advice, the description of the problem with a large number of developer tasks mixed with user stories provides a real-world scenario of a team struggling with managing technical debt within their backlog. The lack of explicit mention of 'technical debt' is why it's classified as 'Good' rather than 'Excellent'.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is primarily about managing a backlog in Agile Software Development, specifically how to handle developer tasks alongside user stories. While it touches on organizational challenges, it does not explicitly or implicitly address Technical Debt indicators such as poor-quality code, lack of tests, or time management difficulties. The focus is on backlog management rather than TD, making it a false positive for this study."
    },
    {
        "id": 31094,
        "title": "How to handle a Sprint completed ahead of time?",
        "body": "<p>Let's say we have a sprint of 2 weeks. In that sprint, the IT team has to implement some issues or features. How can we handle the case where the team finishes all issues/features ahead of time?</p>\n<p>Do we pull tasks from the next sprint to the current one? Do we start a new sprint with some extra days in it in order to compensate for the days that were earned? Or we see the IT team playing games on the internet until the sprint ends and a new one starts?</p>\n<p>I know that when there is not enough time in the sprint for the tasks to be implemented, some of them can go to the next sprint, but what about the opposite (when the tasks were implemented faster)?</p>\n",
        "score": 1,
        "creationdate": "2021-02-05T07:50:18.123000",
        "viewcount": 512,
        "tags": "|scrum|agile|sprint|sprint-planning|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "No",
        "Relevance": "False Positive",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "No",
        "justification_llm1": "While the discussion mentions sprints and Agile, it does not address Technical Debt either explicitly or implicitly.  It focuses on sprint management and task completion time, not on code quality, design issues, or other indicators of technical debt. There is no mention of poor code quality, lack of testing, or other symptoms of technical debt. The question is purely about time management within an Agile framework, lacking any connection to the quality of the software being developed.",
        "inclusion_llm2": "No",
        "justification_llm2": "The discussion is about handling a sprint completed ahead of time, which is related to Agile Software Development (ASD). However, it does not address Technical Debt (TD) explicitly or implicitly. There are no mentions of poor-quality code, lack of tests, duplicated code, or any other TD indicators. The focus is on sprint management rather than TD issues."
    },
    {
        "id": 31155,
        "title": "Cadence in Scrum",
        "body": "<p>Scrum coaches say that a Scrum Team (often Scrum Developent Team is meant) should adhere to:</p>\n<ul>\n<li>predictable cadence</li>\n<li>delivering business value each Sprint</li>\n</ul>\n<p>But at the same time Scrum emphasizes that completing all the PBIs planned for a Sprint can NOT be considered obligatory, it is just a forecast.</p>\n<p>These two points contradict to each other to some extent. But the second point makes much more sence to me than the first one.</p>\n<p>For example, a Scrum Team may fail to deliver any PBI at the end of a sprint, but the lessons learned during the sprint and the new knowledge obtained (e.g. the fact that their understanding of the technology used was not precise and the business goal should be achieved in a different way compared to how they thought before) also have value though not immediatelly usable or shippable.</p>\n<p>Another example - when experiencing technical problems durng a Sprint, developers may tend to use quick-hacks thus sacrificing the product's quality for achieving the Sprint Goal.</p>\n<p>So is it right to say that a Scrum Team should adhere to cadence? Isn't it a fallacy?</p>\n",
        "score": 2,
        "creationdate": "2021-02-14T17:07:31.787000",
        "viewcount": 781,
        "tags": "|scrum|value|",
        "answercount": 4,
        "favoritecount": null,
        "Inclusion": "Yes",
        "Relevance": "Good",
        "Justification": "There was a consensus.",
        "inclusion_llm1": "Yes",
        "justification_llm1": "This discussion implicitly addresses technical debt within an Agile (Scrum) context. The author highlights the conflict between maintaining a predictable cadence and the reality of encountering technical problems during a sprint, leading to the use of 'quick-hacks' which is a clear indicator of technical debt.  While not explicitly mentioning 'technical debt', the description of sacrificing product quality for sprint goals directly reflects the accumulation of technical debt. The discussion is based on the author's experience, fulfilling the criteria for an existing scenario.  The relevance is rated 'Good' instead of 'Excellent' because the connection to technical debt is implicit rather than explicit.",
        "inclusion_llm2": "Yes",
        "justification_llm2": "The discussion is related to Technical Debt (TD) as it implicitly references indicators such as 'quick-hacks' and 'sacrificing the product's quality,' which are common TD indicators. It describes an existing scenario based on lived experience, discussing real-world challenges faced by Scrum teams. The discussion is related to Agile Software Development (ASD) as it specifically mentions Scrum, an agile methodology. However, the discussion lacks depth in exploring the TD indicators and their impact, which is why it is rated as 'Good' rather than 'Excellent.'"
    }
]